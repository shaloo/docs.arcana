{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"auth-index/","title":"Web3 Made Effortless","text":"Web3 Developers <p>Speed up user onboarding to Web3 apps by eliminating the complex setting up and connecting a Web3 wallet for login and authentication. </p> <p>Onboard users to Web3 apps via familiar Web2 login providers. Let authenticated users instantly access the in-app, non-custodial Arcana wallet to sign blockchain transactions.</p> <p>Integrate Web3 apps with the Arcana Auth SDK to enable social login.</p> <p> TL;DR |  Setup | Install | Quick Start  | Examples | Usage </p>"},{"location":"auth-index/#quick-start","title":"Quick Start","text":"<p>What kind of Web3 app do you have? </p> <p>Select the appropriate app type and get started with integrating the Arcana Auth SDK.</p> Web AppsNon-EVM AppsMobile AppsGaming Apps <p> Wagmi   RainbowKit   Web3-React   WalletConnect   HTML/CSS/JS   React/NextJS   Vue </p> <p> Solana   MultiversX   Near </p> <p> React-Native   Flutter </p> <p> Unity </p> <p>Advanced Usage</p> <p>Let users onboard Web3 apps via social login. Let them spend unified balance on any chain through chain abstracted transactions. For this, the app must be integrated with both the SDKs, Arcana CA SDK and the Arcana Auth SDK.</p>"},{"location":"auth-index/#demo","title":"Demo","text":"<p>Would you like to experience how social login works without actually integrating your Web3 app with the Arcana Auth SDK? Try the SDK integration demo app.</p> <p> SDK Integration Demo </p>"},{"location":"auth-index/#auth-playground","title":"Auth Playground","text":"<p> Try Now </p>"},{"location":"auth-index/#onboard-with-zero-friction","title":"Onboard with Zero Friction","text":"<p>Let users log into your Web3 app securely without having to deal with Web3 specific complexities. Integrate with Arcana Auth SDK to enable social login.</p> <ul> <li> <p> Social Login</p> <p>Enable Web2-like login in Web3 apps with Arcana Auth SDK and enable in-app Arcana wallet.</p> <p> Learn More...</p> </li> <li> <p> Set up in 2m</p> <p>Use Arcana Developer Dashboard to register app, configure settings and manage user experience.</p> <p> Configure</p> </li> <li> <p> Integration Examples</p> <p>Get up and running quickly with these integration examples for various supported Web3 apps.</p> <p> Integration Examples</p> </li> <li> <p> Resources</p> <p>Release notes, migration guides, Dashboard Settings Guide, FAQ, integration checklists and more.</p> <p> Resources</p> </li> </ul>"},{"location":"auth-index/#need-help","title":"Need Help?","text":"<p>\ud83d\udce8 Email Arcana Support</p> <p>\u2705 Be a part of the Arcana Community. Stay informed about the new upcoming SDK capabilities and usage examples.</p> <p> Integration Checklist </p>"},{"location":"ca-index/","title":"Unify Balance Across Chains","text":"Web3 Developers <p>Let users spend any supported crypto asset on  any blockchain instantly - no chain switching, no bridging, no cross-chain swaps necessary. </p> <p>Build seamless, no hassle Web3 transaction experience.</p> <p>Integrate Web3 app with the Arcana's Chain Abstraction (CA) SDK. Enable app users to access and spend the unified balance combining assets from all chains.</p> <p> TL;DR |  Install | Quick Start | Examples | Usage </p>"},{"location":"ca-index/#quick-start","title":"Quick Start","text":"<p>What kind of Web3 app do you have? </p> <p>Select the appropriate app type and get started with integrating the Arcana CA SDK.</p> <p> Web Apps Wagmi Apps </p> <p>Advanced Usage</p> <p>Let users onboard Web3 apps via social login. Let them spend unified balance on any chain through chain abstracted transactions. For this, the app must be integrated with both the SDKs, Arcana CA SDK and the Arcana Auth SDK.</p>"},{"location":"ca-index/#demo","title":"Demo","text":"<p>Would you like to experience chain abstraction and how unified balance works before integrating a Web3 app with the Arcana CA SDK? Try the SDK integration demo app.</p> <p> SDK Integration Demo App </p>"},{"location":"ca-index/#ca-playground","title":"CA Playground","text":"<p> Seamless UX with unified balance across assets and chains </p> <p> Try Integration Sample Code </p>"},{"location":"ca-index/#spend-on-any-chain","title":"Spend on Any Chain","text":"<p>Chain abstracted transactions are a game changer for Web3 app adoption. Integrate with Arcana CA SDK to enable unified balance in Web3 apps.</p> <ul> <li> <p> Unified Balance</p> <p>Spend on any chain with unified balance of funds on the source chains and sign transactions on any destination chain with a third-party browser-based wallet.</p> <p> Learn More...</p> </li> <li> <p> Track Status</p> <p>Use Arcana Intent Explorer to track status of chain abstracted transactions.</p> <p> Learn More...</p> </li> <li> <p> Integration Examples</p> <p>Get up and running quickly with integration examples: </p> <p> <code>ca-sdk</code></p> <p> <code>ca-wagmi</code></p> </li> <li> <p> Resources</p> <p>Release notes, FAQ, audit reports, whitepaper and more.</p> <p> Learn more...</p> </li> </ul> <p>Learn more...</p>"},{"location":"ca-index/#need-help","title":"Need Help?","text":"<p>\ud83d\udce8 Email Arcana Support</p> <p>\u2705 Be a part of the Arcana Community. Stay informed about the new upcoming SDK capabilities and usage examples.</p>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>This troubleshooting guide covers common issues faced by developers when integrating Web3 apps with the Arcana Auth SDK for user onboarding and signing blockchain transactions.</p>"},{"location":"troubleshooting/#configuration-issues","title":"Configuration Issues","text":"Twitter login failures caused by setup issues. What values need to be specified in client ID and secret in the dashboard settings? <p>Often, during SDK usage configurations, developers fail to specify the correct values from the Twitter Developer console into the Arcana Developer Dashboard resulting in Twitter login failures. Remember to copy the Redirect URI values from the Arcana Developer Dashboard in the Twitter Developer console.</p> <p>Also, ensure that you have specified the correct Twitter API Key and the API Key Secret values in the Arcana Developer Dashboard Configure &gt; Social Auth &gt; Twitter settings. Learn more...</p> Is it possible to stop the Arcana wallet UI from being displayed in the app's context. <p>The Arcana Auth SDK allows developers to manage the user experience for signing blockchain transactions by controlling when the wallet UI shows up. To manage visibility mode, integrate the app with the SDK, and create <code>AuthProvider</code> with the <code>alwaysVisible</code> parameter set to <code>false</code>. Use the <code>showWallet</code> function to display the wallet when required.</p> <pre><code>const auth = new AuthProvider(\n  \"xar_test_445007f942xxxxxxxxxxxxxxxxxx484cAfd2\", // App client ID\n  { \n    position: 'left',         // default: right\n    theme: 'light',           // default: dark\n    alwaysVisible: false,     // default: true, wallet always visible\n})\n</code></pre> Registered app does not show up in the Arcana Developer Dashboard 'Manage Apps' screen. <p>After logging into the Arcana Developer Dashboard, the developer can view all the apps that were registered earlier displayed as cards in the 'Manage Apps' screen.  There is one card per registered application.</p> <p>If you do not see your registered application card, check if you used a different social login provider or email ID to log into the Arcana Developer Dashboard. Arcana Auth SDK supports aggregate login feature whereby if a developer uses different social login providers to log into the Arcana Developer Dashboard in subsequent logins, both logins will be recognized as a single developer. This feature works if the same email ID is used by the developer across social login providers.</p> <p>Note: If you are migrating to the latest Arcana Auth SDK release from versions older than v1.0.0, you will not see your pre-registered apps in the Arcana Developer Dashboard due to some breaking changes. You need to re-register your apps again.</p> Aggregate login does not work when GitHub is one of the providers used to login into the Arcana Developer Dashboard. <p>Issue Details</p> <p>A developer logs into the Arcana Developer Dashboard for the very first time, using social authentication provider, say P1. The Arcana Developer Dashboard displays the 'Manage Apps' screen with the 'Create New App' wizard and zero registered app configuration profile cards. The developer can register a new application and obtain a unique Client ID say Addr1. This will create a new app configuration profile card on the 'Manage Apps' screen for the newly registered app. Now if the developer logs out and logs back in using a different social authentication provider, say P2, Arcana Auth SDK can recognize that the login is by the same developer. This results in the 'Manage Apps' screen displaying the previously registered application configuration profile card. This behavior is supported only if the developer has the same email ID associated with both the social login providers P1 and P2.</p> <p>If the user has a different email ID associated P1 and P2 then during the second login with a different provider, the same developer cannot be recognized and associated with the apps registered earlier using the different social login provider. The Arcana Developer Dashboard considers login with a new provider (different email ID) as a new identity and assumes this is a fresh login by a new developer. It brings up the 'Manage Apps' screen where the same user will not be able to see the application configuration card that was present earlier while logging in with a different social login provider.</p> <p>If one of the providers is GitHub, then even if the same email ID is associated with all providers, Arcana Auth SDK may fail to associate the GitHub identity of the same developer with other providers.  </p> <p>Is there a way to get this working?</p> <p>Solution</p> <p>The aggregate login feature of Arcana Auth SDK allows an application developer to login into the Arcana Developer Dashboard using any supported authentication providers to register and configure the application.</p> <p>With GitHub, the behavior is different, only if the GitHub user settings are not in place.  To ensure the same behavior as other social authentication providers, in the case of GitHub, make sure that you specify the following details in GitHub Settings:</p> <pre><code>1. In your GitHub profile setting, allow your email to be visible\n2. In the GitHub Email Settings preferences, make sure you do not select the checkbox which says 'Keep my email address private'.\n</code></pre> <p>Refer to the figure below for details:</p> <p> GitHub Profile: Email Visible </p> <p> GitHub Email Settings: Not Private </p> Why do users experience a 'Redirect URI Mismatch' error during authentication? <p>This error shows up if the developer has not properly set up the social login provider during app registration and configuration using the Arcana Developer Dashboard.</p> <ul> <li> <p>Go to the Arcana Developer Dashboard and check the app settings in the Social Auth section. Note that the Redirect URI displayed for the app is exactly the same as the one you have specified in the social login provider OAuth settings.  For example, in the case of social login provider 'Google', use Google Developer Console and check OAuth settings. Check the spelling of the Redirect URI specified against the entry for your app.</p> </li> <li> <p>If you are deploying the app on the Mainnet, then make sure the Redirect URI displayed in the Mainnet configuration profile of the app in the Arcana Developer Dashboard is used in the social login provider settings.</p> </li> </ul>"},{"location":"troubleshooting/#auth-issues","title":"Auth Issues","text":"Configured social login providers do not show up in the Arcana wallet UI with v1.0.0. <p>If you are using an older version of the Arcana Auth SDK before v1.0.0, simply upgrading the package to v1.0.0 or beyond is not sufficient. Your older app configuration settings will no longer work. If you allow users to log in, their auth plug-and-play pop-up UI will not show any of the configured social login providers. </p> <p>Please follow the instructions in the Migration to v1.0.0 Guide before integrating with the Arcana Auth SDK v1.0.0. We highly recommend that you use the latest Arcana Auth SDK.</p> <p>If your app users continue to see the same issue of social login providers not showing after migrating properly, please double-check the Client ID that is specified at the time of instantiating the <code>AuthProvider</code>.  If you are using v1.0.0, and do not explicitly specify any <code>network</code> value while instantiating the <code>AuthProvider</code>, then by default 'Mainnet' is selected. In this case, make sure you provide the Client ID assigned to your app's 'Mainnet' configuration profile. If you specify a different Client ID during app integration with the SDK then you will only see the social login providers in the login UI that are associated with the specified Client ID.</p> <p>If you choose to specify the optional <code>network</code> parameter as 'testnet' while instantiating the <code>AuthProvider</code>, then make sure you specify the Client ID corresponding to the 'Testnet' configuration profile of the app as displayed in the Arcana Developer Dashboard.</p> User used Hotmail address for passwordless login. No email with OTP was received. <p>The Arcana Auth SDK does not support passwordless user login via Hotmail. Use other social login providers or Google email for passwordless authentication. </p> <p>Also, user login via Microsoft accounts is not supported in the current release.</p> Error: Wallet is not initialized. <p>Issue</p> <p> Wallet Not Initialized </p> <p>Solution</p> <p>This error is caused due to incorrect integration of the Arcana Auth SDK.  While integrating with the Arcana Auth SDK, you need to perform the following key steps in the suggested order:</p> <ol> <li> <p>First, install the Arcana Auth SDK</p> </li> <li> <p>Next, create an <code>AuthProvider</code> instance. </p> </li> <li> <p>Lastly, initialize the <code>AuthProvider</code> by calling the <code>init()</code> function. This is important as it initializes the embedded Arcana wallet. Only after a successful login, the Arcana wallet is visible in the context of an application. </p> </li> </ol> User could log in to the Web3 app but subsequent login fails after a developer enables the 'global keys' feature in the app. <p>By default, Arcana Auth SDK is configured to allow app-specific keys for the Web3 apps that integrate with the SDK. Developers can begin deploying their apps on the Arcana Testnet and then deploy them on the Arcana Mainnet.  To use the global keys feature in their apps, the developers are required to fill up an online form, submit it and wait for approval from the Arcana team before global keys are enabled for an app. The status of the feature request is displayed in the Arcana Developer Dashboard. While the feature is in 'review' status, the app can be deployed on the Arcana Testnet and users are allowed to log in and use the app. </p> <p>While an app is switching over from the default 'app-specific' keys configuration to the 'global keys' configuration, the developer may choose to allow app users to log in before the global features option is approved. Users that log in before the global keys are approved will be assigned 'app-specific' keys. There is some part of key metadata that is stored locally in the authenticated user's device. In this case, once the feature gets approved, the user keys are re-assigned. The keys change from 'app-specific' to 'global keys' and this results in new key metadata. There is a mismatch between the keys or Arcana wallet addresses already in use by the users and the new global keys that are now reconfigured for the app users.  As a result, users will not be able to log in to the app anymore.</p> <p>To fix this issue, the user needs to clear the local storage used by the Arcana wallet on their device by clearing the browser cache and then attempting another login from a fresh browser window.</p>"},{"location":"audit/auth/","title":"Audit Reports","text":"<p>  Auth Smart Contracts</p> <p>  ADKG</p>"},{"location":"audit/ca/","title":"Audit Reports","text":"<p>  Arcana Vault</p> <p>  CA Wallet</p>"},{"location":"auth/auth-core-usage-guide/","title":"Arcana Auth Core SDK Usage Guide","text":""},{"location":"auth/auth-core-usage-guide/#arcana-auth-core-sdk-usage","title":"Arcana Auth-Core SDK Usage","text":"<p>The Arcana Auth-Core SDK is a client-side tool for developers to assign Web3 keys to authenticated users for signing blockchain transactions. Use this SDK instead of the Arcana Auth SDK for key assignment or when building a completely whitelisted solution.</p> <p>When initializing Arcana Auth-Core SDK, the developer sets the redirect URL. The SDK performs OAuth2 login with the chosen provider and returns the login token from the provider. At the specified redirect URL, the developer uses this token to fetch the user's private key.</p> <p>Limited Feature SDK</p> <p>The Arcana Auth-Core SDK has limited capabilities as compared to the Arcana Auth-Core SDK:</p> <ul> <li>No built-in plug-and-play login UI feature</li> <li>No built-in Arcana wallet UI</li> <li>No support for Global keys, only app-specific keys (default) are allowed.</li> <li>No support for enhanced wallet security via MFA.</li> </ul> <p>Contact support to access the latest release. </p> <p> SDK Reference </p>"},{"location":"auth/auth-core-usage-guide/#installation","title":"Installation","text":""},{"location":"auth/auth-core-usage-guide/#npm","title":"npm","text":"<pre><code>npm install --save @arcana/auth-core\n</code></pre>"},{"location":"auth/auth-core-usage-guide/#yarn","title":"yarn","text":"<pre><code>yarn add @arcana/auth-core\n</code></pre>"},{"location":"auth/auth-core-usage-guide/#cdn","title":"CDN","text":"<pre><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/@arcana/auth-core\"&gt;&lt;/script&gt;\n</code></pre> <pre><code>&lt;script src=\"https://unpkg.com/@arcana/auth-core\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"auth/auth-core-usage-guide/#usage","title":"Usage","text":""},{"location":"auth/auth-core-usage-guide/#import","title":"Import","text":"<pre><code>const { AuthProvider, SocialLoginType, CURVE } = window.arcana.auth_core;\n// or\nimport { AuthProvider, CURVE } from '@arcana/auth-core';\n</code></pre>"},{"location":"auth/auth-core-usage-guide/#initialize-authprovider","title":"Initialize <code>AuthProvider</code>","text":"<pre><code>const auth = new AuthProvider({\n   curve: CURVE.ED25519, // defaults to CURVE.SECP256K1\n   appId: `${appId}`,\n   redirectUri: ''    \n});\n</code></pre>"},{"location":"auth/auth-core-usage-guide/#initiate-social-login","title":"Initiate Social Login","text":"<pre><code>await auth.loginWithSocial(SocialLoginType.google);\n</code></pre>"},{"location":"auth/auth-core-usage-guide/#initiate-passwordless-login","title":"Initiate Passwordless Login","text":"<pre><code>const result = await auth.loginWithPasswordlessStart(`${emailAddress}`, PasswordlessOptions);\n</code></pre>"},{"location":"auth/auth-core-usage-guide/#get-login-status","title":"Get Login Status","text":"<pre><code>const loggedIn = auth.isLoggedIn(); /* boolean response */\n</code></pre>"},{"location":"auth/auth-core-usage-guide/#get-user-info","title":"Get User Info","text":"<p>After successful login, the user information is saved in memory. Before the page <code>unload</code> event, the user information gets stored in <code>session-storage</code>. After a successful page reload, it is fetched again to memory and removed from the <code>session-storage</code>.</p> <pre><code>const userInfo = auth.getUserInfo();\n/* \n  UserInfo: {\n    loginType: 'google',\n    userInfo: {\n      id: 'abc@example.com',\n      name: 'ABC DEF',\n      email: '',\n      picture: ''\n    },\n    privateKey: ''\n  }\n*/\n</code></pre> <p>For userInfo type details, see Exported Types.</p>"},{"location":"auth/auth-core-usage-guide/#get-public-key","title":"Get Public Key","text":"<pre><code>const publicKey = await auth.getPublicKey({\n  verifier: SocialLoginType.google,\n  id: `abc@example.com`,\n}); \n</code></pre> <p>For details regarding <code>SocialLoginType</code>, see Exported Enums.</p>"},{"location":"auth/auth-core-usage-guide/#clear-login-session","title":"Clear Login Session","text":"<pre><code>await auth.logout();\n</code></pre>"},{"location":"auth/auth-core-usage-guide/#typescript-usage","title":"TypeScript Usage","text":""},{"location":"auth/auth-core-usage-guide/#exported-enums","title":"Exported Enums","text":"<pre><code>enum SocialLoginType {\n  apple = 'apple',\n  google = 'google',\n  discord = 'discord',\n  twitch = 'twitch',\n  github = 'github',\n  twitter = 'twitter',\n  telegram = 'telegram',\n  passwordless = 'passwordless',\n}\n</code></pre>"},{"location":"auth/auth-core-usage-guide/#exported-types","title":"Exported Types","text":"<pre><code>interface KeystoreInput {\n  id: string;\n  verifier: LoginType;\n}\n\ninterface InitParams {\n  // arcana app id with network hint, ex xar_dev_xyz - xyz is the appId\n  appId: string;\n  network?: 'dev' | 'testnet'| 'mainnet'; /* defaults to testnet  */\n  /**\n   * autoRedirect: is redirected via SDK, instead of `loginWithSocial`\n   * output being `{ url }`\n  */\n  autoRedirect: boolean                   /* defaults to true     */\n  /** \n   * shouldVerifyState: state is compared internally, the state is stored\n   * to local storage on login init\n  */\n  shouldVerifyState: boolean              /* defaults to true     */ \n  /**\n   * revokeTokenPostLogin: Some tokens need to be revoked to get new tokens\n   * on subsequent login or to prevent misuse, SDK does this internally. If\n   * set to `false` there is a cleanup function that is output of the func\n   * `auth.handleRedirectMode()` which should be called after token is used \n   * for secondary purpose\n   */\n  revokeTokenPostLogin: boolean           /* defaults to true     */\n  debug?: boolean;                        /* defaults to false    */\n}\n\ninterface GetInfoOutput {\n  loginType: SocialLoginType;\n  userInfo: UserInfo {\n    id: string;\n    email?: string;\n    name?: string;\n    picture?: string;\n  };\n  privateKey: string;\n}\n</code></pre>"},{"location":"auth/auth-core-usage-guide/#flow-modes","title":"Flow Modes","text":""},{"location":"auth/auth-core-usage-guide/#redirect","title":"Redirect","text":"<p><code>login.js</code></p> <pre><code>window.onload = async () =&gt; {\n  const auth = new AuthProvider({\n    appId: `${appId}`,\n    redirectUri:'path/to/redirect' \n  });\n\n  googleLoginBtn.addEventListener('click', async () =&gt; {\n    await auth.loginWithSocial(SocialLoginType.google);\n  });\n}\n</code></pre> <p><code>redirect.js</code></p> <pre><code>window.onload = async () =&gt; {\n  const auth = new AuthProvider({\n    appId: `${appId}`,\n    redirectUri:'path/to/redirect' \n  });\n\n  await auth.handleRedirect();\n\n  if(auth.isLoggedIn()) {\n    const info = auth.getUserInfo();\n  }\n}\n</code></pre>"},{"location":"auth/auth-core-usage-guide/#variables","title":"Variables","text":"<ul> <li><code>origin</code> - Base URL of the app.</li> </ul>"},{"location":"auth/auth-demo/","title":"Auth Demo","text":"<p>Do you wish to experience how social login can remove the friction of onboarding users to any Web3 app before you try to enable that in your Web3 app?</p> <p>Experience the power of social login for onboarding Web3 apps in a frictionless manner. Click to log into the Arcana Auth SDK demo app. </p> SDK Integration Demo <p>This sample app integrated with the Arcana Auth SDK, demonstrates the following features:</p> <ul> <li>Any user, even those who do not yet have their own keys or a wallet to connect to the app, can onboard Web3 app integrated with the Arcana Auth SDK.</li> <li>Use of familiar Web2 authentication mechanisms (for example, Google, passwordless login, etc.) to onboard Web3 app</li> <li>Automatic access to a secure, self-custodial, in-app, embedded, built-in Arcana wallet right after user authenticates.</li> <li>No need to download or set up a Web3 wallet - own your in-app wallet and its assets.</li> <li>Upon subsequent log ins, access the same wallet.</li> <li>In-app wallet allows users to import keys if they wish to use EOA accounts associated with any third-party browser-based wallets.</li> </ul>"},{"location":"auth/auth-error-msg/","title":"Auth Errors","text":"<p>If you integrate a Web3 app with the Arcana Auth SDK, you might encounter some of the following errors depending on user actions, app logic, and the sequence of Arcana Auth SDK function calls. </p> <p>For more insights, refer to the Arcana Auth SDK troubleshooting guide.</p>"},{"location":"auth/auth-error-msg/#error-messages","title":"Error Messages","text":"Error Description wallet_not_initialized Wallet is not initialized. Please run <code>await wallet.init()</code> before calling any other wallet functions. user_not_logged_in User is not logged in. First, trigger user login and after successful authentication, you can use wallet functions."},{"location":"auth/auth-error-msg/#passwordless-authentication-errors","title":"Passwordless Authentication Errors","text":"Error Description authorize_params_missing Missing one or more required params. login_token_already_used Login token is invalid or has already been used. login_token_not_found Login token not found in query params. login_token_invalid Login token is invalid. user_token_not_found User token not found in header or query. user_token_invalid User token is invalid."},{"location":"auth/auth-usage-guide/","title":"Arcana Auth Web SDK Usage Guide","text":""},{"location":"auth/auth-usage-guide/#arcana-auth-sdk-usage","title":"Arcana Auth SDK Usage","text":"<p>Use the Arcana Auth SDK to onboard users via social login, allow users to access the in-app Arcana wallet and sign blockchain transactions.</p> <p> SDK Reference</p>"},{"location":"auth/auth-usage-guide/#installation","title":"Installation","text":""},{"location":"auth/auth-usage-guide/#npmyarn-install","title":"NPM/Yarn Install","text":"<pre><code>npm install --save @arcana/auth\nyarn add @arcana/auth\n</code></pre>"},{"location":"auth/auth-usage-guide/#cdn-install","title":"CDN Install","text":"<pre><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/@arcana/auth\"&gt;&lt;/script&gt;\n</code></pre> <pre><code>&lt;script src=\"https://unpkg.com/@arcana/auth\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"auth/auth-usage-guide/#quick-start-with-ethersjs","title":"Quick Start with <code>ethers.js</code>","text":"<pre><code>import { AuthProvider } from '@arcana/auth'\nimport { ethers } from 'ethers'\n\n// clientId: Arcana Unique App Identifier via Dashboard\nconst auth = new AuthProvider(`${clientId}`) \n\nwindow.onload = async () =&gt; {\n  try {\n    await auth.init()\n\n    const arcanaProvider = await auth.connect()\n    const provider = new ethers.providers.Web3Provider(arcanaProvider)\n\n    await provider.getBlockNumber()\n    // 14983200\n  } catch (e) {\n    // log error\n  }\n}\n</code></pre>"},{"location":"auth/auth-usage-guide/#quick-start-with-web3js","title":"Quick Start with <code>web3.js</code>","text":"<pre><code>import { AuthProvider } from '@arcana/auth'\nimport Web3 from 'web3'\n\n\n// clientId: Arcana Unique App Identifier via Dashboard\nconst auth = new AuthProvider(`${clientId}`)\n\nwindow.onload = async () =&gt; {\n  try {\n    await auth.init()\n\n    const arcanaProvider = await auth.connect()\n    const provider = new Web3(arcanaProvider)\n\n    await provider.getBlockNumber()\n  } catch (e) {\n    // log error\n  }\n}\n</code></pre>"},{"location":"auth/auth-usage-guide/#usage","title":"Usage","text":""},{"location":"auth/auth-usage-guide/#authprovider","title":"AuthProvider","text":""},{"location":"auth/auth-usage-guide/#import-authprovider","title":"Import AuthProvider","text":"<pre><code>const { AuthProvider } = window.arcana.auth // From CDN\n// or\nimport { AuthProvider } from '@arcana/auth' // From npm\n</code></pre>"},{"location":"auth/auth-usage-guide/#initialize-authprovider","title":"Initialize AuthProvider","text":"<pre><code>import { AuthProvider } from '@arcana/auth'\n\nconst auth = new AuthProvider(`${clientId}`, {\n  position: 'left', // default - right\n  theme: 'light', // default - dark\n  alwaysVisible: false, // default - true\n  setWindowProvider: true, // default - false\n  connectOptions: {\n    compact: true, // default - false\n  },\n})\n\nawait auth.init()\n</code></pre> <p>See Get Started with Auth SDK for more Auth SDK usage insights.</p>"},{"location":"auth/auth-usage-guide/#auth-api","title":"Auth API","text":""},{"location":"auth/auth-usage-guide/#plug-and-play-authentication","title":"Plug and Play Authentication","text":"<pre><code>const provider = await auth.connect()\n</code></pre>"},{"location":"auth/auth-usage-guide/#custom-login","title":"Custom Login","text":"<p>Social login</p> <pre><code>// loginType - Apple, Cognito, Discord, GitHub, Google, Steam, Twitch, Twitter\nconst provider = await auth.loginWithSocial(`${loginType}`)\n\n// Note: Use loginWithBearer method for Telegram, Firebase\n</code></pre> <p>Passwordless login via an email verification OTP </p> <pre><code>await auth.loginWithLink(`${email}`)\n</code></pre> <p>Deprecated</p> <p><code>loginWithLink</code> is deprecated.</p> <p>Use <code>loginWithOTPStart</code>, <code>loginWithOTPComplete</code> for passwordless login with OTP. The OTP will be received via email supplied in <code>loginWithOTPStart</code> call.</p> <p>Passwordless login via OTP</p> <pre><code>try {\nconst loginState = await auth.loginWithOTPStart(\"john.doe@somemail.com\");\nawait loginState.begin()\nif(loginState.isCompleteRequired) {\n  // App is using default app-specific keys\n  // App must ask the user to input a 6-digit code received in mail\n  var userInput = prompt(\"Please enter a 6-digit code:\", \"111111\");\n\n  // Validate if the input is a 6-digit code\n  if (userInput !== null &amp;&amp; \n      userInput.length === 6 &amp;&amp; \n      !isNaN(userInput)) {\n    const complete = await auth.loginWithOTPComplete(\n      userInput, \n      onMFARequired() =&gt; {\n      //Hide overlay, if used in the app\n    });\n    console.log(\"complete:\",complete);\n  } else {\n    console.log(\"Invalid input. Please enter a valid 6-digit code.\");\n  } \n} else {\n  // App is using global keys, built-in OTP input UI is displayed by the SDK\n  // App is not required to add code for OTP input\n}\n} catch (e) {\nconsole.log(e);\n}\n</code></pre> <p>Check if a user is logged in</p> <pre><code>const isloggedIn = await auth.isLoggedIn() // boolean\n</code></pre> <p>Check and reconnect, if required, within a 30-minute window after logout.</p> <pre><code>const canReconnect = await auth.canReconnect()\n// auth.reconnect() should be on a click event since it opens a new tab\nawait auth.reconnect()\n</code></pre> <p>Get user information. The loginToken is a JWT Token that can be verified by using the public JWT Key. In the future this will be deprecated. Refer to userDIDToken. It is base64 encoded data</p> <p><code>base64(JSON.stringify([sig, claims]))</code></p> <pre><code>const info = await auth.getUser()\n\n/*\ninterface UserInfo {\n    address: string;\n    email?: string;\n    id: string;\n    userDIDToken: string;\n    loginToken: string;\n    loginType: Logins | \"passwordless\";\n    name?: string;\n    picture?: string;\n    publicKey: string;\n}\n*/\n</code></pre> <p>Show wallet UI</p> <pre><code>auth.showWallet()\n</code></pre>"},{"location":"auth/auth-usage-guide/#logout","title":"Logout","text":"<pre><code>await auth.logout()\n</code></pre>"},{"location":"auth/auth-usage-guide/#get-public-key","title":"Get Public Key","text":"<p>Get the public key associated with an email.</p> <pre><code>await auth.getPublicKey(`${email}`)\n</code></pre>"},{"location":"auth/auth-usage-guide/#encryption","title":"Encryption","text":""},{"location":"auth/auth-usage-guide/#ecies-encryption","title":"ECIES Encryption","text":"<p>The wallet uses ECIES to decrypt cipher text, so a complementary encryption method has to be used from package <code>eth-crypto</code>.</p> <pre><code>import EthCrypto from 'eth-crypto'\n\nconst encrypted = await EthCrypto.encryptWithPublicKey(\n  'bf1cc3154424dc22191941d9f4f50b063a2b663a2337e5548abea633c1d06ece...', // publicKey\n  'foobar' // message\n)\n</code></pre>"},{"location":"auth/auth-usage-guide/#arcana-wallet-operations","title":"Arcana Wallet Operations","text":"<p>Arcana wallet is an embedded Web3 wallet offered via the Auth SDK. It uses Ethereum JSON-RPC to interact with the blockchains.</p>"},{"location":"auth/auth-usage-guide/#json-rpc-support","title":"JSON RPC Support","text":"<p>Arcana wallet implements the following common interfaces exposed by all Ethereum clients:</p> <ul> <li>eth_accounts</li> <li>eth_getBalance</li> <li>eth_sendTransaction</li> <li>eth_sign</li> <li>eth_call</li> </ul>"},{"location":"auth/auth-usage-guide/#switching-chains","title":"Switching Chains","text":""},{"location":"auth/auth-usage-guide/#wallet_addethereumchain","title":"<code>wallet_addEthereumChain</code>","text":"<p>This method is specified by EIP-3085.</p> <pre><code>try {\n  await provider.request({\n    method: 'wallet_addEthereumChain',\n    params: [{\n      chainId: '0xABCDEF',\n      chainName: 'My Custom Chain',\n      rpcUrls: ['...']\n    }]\n  })\n} catch(error) {\n  ...\n}\n\ninterface AddEthereumChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n</code></pre>"},{"location":"auth/auth-usage-guide/#wallet_switchethereumchain","title":"<code>wallet_switchEthereumChain</code>","text":"<p>This method is specified by EIP-3326.</p> <pre><code>try {\n  await provider.request({\n    method: 'wallet_switchEthereumChain',\n    params: [{ chainId: '0xf00' }],\n  });\n} catch(error) {\n  ...\n}\n\ninterface SwitchEthereumChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n}\n</code></pre> <p>If the error code (error.code) is 4902, then the requested chain has not been added, and you have to request to add it via <code>wallet_addEthereumChain</code>.</p>"},{"location":"auth/auth-usage-guide/#wallet_watchasset","title":"<code>wallet_watchAsset</code>","text":"<p>This method is specified by EIP-747</p> <pre><code>await provider.request({\n  method: 'wallet_watchAsset',\n  params: {\n    type: 'ERC20',\n    options: {\n      address: '0xB983E01458529665007fF7E0CDdeCDB74B967Eb6',\n      symbol: 'FOO',\n      decimals: 18,\n      image: 'https://foo.io/token-image.svg',\n    },\n  },\n})\n</code></pre> <p>Check out Auth SDK Reference Guide for details.</p>"},{"location":"auth/auth-wagmi-usage-guide/","title":"Arcana Auth Wagmi SDK Usage","text":"<p>Use the Arcana Auth Wagmi SDK to onboard users in a Wagmi app via social login. Let users instantly access the in-app Arcana wallet and sign blockchain transactions.</p> <p> SDK Reference</p>"},{"location":"auth/auth-wagmi-usage-guide/#install","title":"Install","text":"<pre><code>npm install --save @arcana/auth @arcana/auth-wagmi\n</code></pre>"},{"location":"auth/auth-wagmi-usage-guide/#usage","title":"Usage","text":""},{"location":"auth/auth-wagmi-usage-guide/#with-plug-n-play-ui","title":"With plug n play UI","text":"<pre><code>import { ArcanaConnector } from \"@arcana/auth-wagmi\"\nimport { AuthProvider } from \"@arcana/auth\"\n\nconst auth = new AuthProvider(`${arcana_client_id}`)\nconst connector = ArcanaConnector({\n  auth,\n})\n</code></pre>"},{"location":"auth/auth-wagmi-usage-guide/#with-custom-ui","title":"With custom UI","text":"<pre><code>import { ArcanaConnector } from \"@arcana/auth-wagmi\"\nimport { AuthProvider } from \"@arcana/auth\"\n\nconst auth = new AuthProvider(`${arcana_client_id}`)\nconst connector = ArcanaConnector({\n  auth,\n  loginType: {\n    provider: \"google\"\n  } \n})\n</code></pre> <p>For more details on connectors and integrating your app with Wagmi, see Wagmi documentation.</p>"},{"location":"auth/custom-auth/","title":"Integrate Custom Auth App","text":"<p>Integrate 'Custom-Auth' apps with Arcana Auth SDK and allow authenticated users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"auth/custom-auth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>The app should be registered and configured for using custom Auth using the Arcana Developer Dashboard.</p> </li> <li> <p>You will require the following to integrate the app with the SDK:</p> <ul> <li>Unique Client ID assigned to the app after registration.</li> <li>Provider identifier value displayed in the registered app settings in the dashboard after configuring and saving the custom Auth settings.</li> </ul> </li> </ul>"},{"location":"auth/custom-auth/#1-install","title":"1. Install","text":"<p>Depending upon the app type, you may need to install one or more SDKs and the integration code may vary from one app type to another.</p>"},{"location":"auth/custom-auth/#2-integrate-app","title":"2. Integrate App","text":"<p>Select the app type and follow the instructions to integrate the app with the SDK.</p> Web AppsMobile AppsCustom Auth Apps <p>  HTML/CSS/JS App  React/Next.js App  Wagmi App  WalletConnect App   RainbowKit App   Web3-React App  Unity App</p> <p>  Flutter Apps  React-Native Apps</p> <p>  Custom Auth</p> <p>No user onboarding</p> <p>When using custom authentication, apps do not onboard users via the social login feature of the Arcana Auth SDK. Simply integrate with the SDK, access <code>AuthProvider</code> and call <code>loginWithCustomProvider</code> to provision the user's keys for signing blockchain transactions.</p>"},{"location":"auth/custom-auth/#3-call-loginwithcustomprovider","title":"3. Call <code>loginWithCustomProvider</code>","text":"<p>After the user logs in successfully via custom authentication solutions, get the JWT and provide it as input to the Arcana Auth SDK method below:</p> <pre><code>await auth.loginWithCustomProvider({\n  token: params.token, //JWT Token\n  userID: params.userID,  // Email or ID as configured in the Dashboard settings\n  provider: \"provider-id-name\", //Custom Auth Provider identifier displayed in the Dashboard\n});\n</code></pre> <p>Upon success, <code>loginWithCustomProvider</code> will ensure that the authenticated user's key shares are fetched locally and the user key is generated within the app/user context securely, with full privacy.  </p> <p>Sample Code</p> <p>Refer to Custom Auth Frontend and Custom Auth Server for details. These are examples of a custom authentication server and a frontend that uses the <code>loginWithCustomProvider</code> method for fetching authenticated user's keys to perform blockchain transactions.</p>"},{"location":"auth/custom-auth/#whats-next","title":"What's Next?","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/custom-auth/#see-also","title":"See also","text":"<p>'Custom-Auth' integration example: See <code>sample-auth-custom-oauth</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> <li> <p>Arcana Auth SDK Usage Guide</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/custom-wallet-ui/","title":"Custom Wallet UI","text":"<p>Learn how a Web3 app can use a custom wallet UI instead of the default, built-in, Arcana wallet UI and integrate with the Arcana wallet to enable social login and allow users to sign blockchain transactions.</p>"},{"location":"auth/custom-wallet-ui/#prerequisites","title":"Prerequisites","text":"<p>To log into the Arcana Developer Dashboard, you\u2019ll need an account with a supported social login or use email for passwordless access.</p> <ul> <li>Google</li> <li>GitHub</li> <li>Twitch</li> <li>Discord</li> </ul>"},{"location":"auth/custom-wallet-ui/#1-dashboard-login","title":"1. Dashboard Login","text":"<p>Use https://dashboard.arcana.network to log in with one of the available options.</p> Developer Dashboard Login Page <p>Aggregate Login</p> <p>The aggregate login feature in the Arcana Auth SDK merges login identities from social providers into one Arcana account if the email ID is the same across these providers. Developers can log into the Arcana Developer Dashboard using any supported provider and still access the same Arcana account and app settings. </p>"},{"location":"auth/custom-wallet-ui/#2-register-app","title":"2. Register App","text":"<p>Use the dashboard to create a new app entry and register the app. While specifying the new app name and other details, specify the  Wallet UI Mode setting as 'Custom UI'. By default, it is set to use the built-in, Arcana wallet UI. Then click the 'Create' button to confirm app registration. Once registered, you cannot change the  Wallet UI Mode setting.</p> Choose Custom Wallet UI"},{"location":"auth/custom-wallet-ui/#3-configure-social-login","title":"3. Configure Social Login","text":"<p>Follow the instructions to configure social login and custom IAM providers if required, before integrating the app with the Arcana Auth SDK.</p>"},{"location":"auth/custom-wallet-ui/#4-integrate-app","title":"4. Integrate App","text":"<p>Select the app type and follow the instructions to integrate the app with the SDK.</p> Web AppsMobile AppsCustom Auth Apps <p>  HTML/CSS/JS App  React/Next.js App  Wagmi App  WalletConnect App   RainbowKit App   Web3-React App  Unity App</p> <p>  Flutter Apps  React-Native Apps</p> <p>  Custom Auth</p>"},{"location":"auth/custom-wallet-ui/#5-onboard-users","title":"5. Onboard Users","text":"<p>Apps that are integrated with the Arcana Auth SDK can choose the built-in plug-and-play login UI or use custom login ui to onboard users. </p> User Onboarding Considerations <ol> <li> <p>Log in Options: What options are offered by the app to the onboard users via social login? Configure the required social login providers via the dashboard.</p> </li> <li> <p>Built-in or Custom Login UI: Does the Web3 app have a custom login UI or do they need to use the built-in, plug-and-play login UI modal offered by the Arcana Auth SDK? Choose the appropriate onboarding functions of the <code>AuthProvider</code>.</p> </li> <li> <p>Session Management: Does the authenticated user stay logged in if they accidentally close the browser tab? If yes, what is the acceptable Web3 app security window for the session? After how long should the session expire and a user re-login is necessitated for security? Configure the session management settings via the dashboard.</p> </li> <li> <p>Reconnect: Does the Web3 app allow users to stay connected or require re-authentication after a certain time has elapsed? Use <code>isConnected</code>,  <code>canReconnect</code> and <code>reconnect</code> functions of the <code>AuthProvider</code>.</p> </li> </ol> Built-in Login UICustom Login UI <p>  Wagmi Apps  RainbowKit Apps   WalletConnect Apps   Web3-React Apps  React/Next.js Apps  Vanilla HTML/CSS/JS App  Vue App  Flutter Apps  React-Native Apps</p> <p>  Wagmi Apps  RainbowKit Apps   WalletConnect Apps   Web3-React Apps  React/Next.js Apps  Vanilla HTML/CSS/JS App  Vue App  Flutter Apps  React-Native Apps</p>"},{"location":"auth/custom-wallet-ui/#advanced","title":"Advanced","text":"Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p> Global vs. App Specific Keys <p>Apps using app-specific keys must use a custom login UI that allows users to input the OTP. In this case, the <code>isCompleteRequired</code> boolean returns <code>true</code> after initiating login with OTP.</p> <p>Apps using global keys are not required to use a custom login UI. A built-in login UI is automatically displayed for the user for OTP. Users must enter the OTP received via email in this UI.</p> MFA Enabled / Disabled <p>During passwordless login via OTP, apps configured for MFA and those using overlays must hide it to enable OTP input. Use the <code>isMFARequired</code> callback in the <code>loginWithOTPComplete</code> method to hide the overlay.</p> Reconnect Users <p>Use <code>canReconnect</code> and <code>reconnect</code> methods of <code>AuthProvider</code> within a 30-min window of the user-logout action. Allow users to automatically reconnect to the app without re-authentication. </p> <p>See <code>canReconnect</code> and <code>reconnect</code> for details.</p> Apps Using Custom Auth <p>Web3 apps that use custom user authentication solutions and require authenticated users to sign blockchain transactions can also integrate with the Arcana Auth SDK. These apps can skip the social onboarding feature and use <code>loginWithCustomProvider</code> function of the <code>AuthProvider</code> to assign keys securely. Learn more...</p>"},{"location":"auth/custom-wallet-ui/#6-plug-in-custom-wallet-ui","title":"6. Plug in Custom Wallet UI","text":"<p>Once user onboarding logic is in place, add code to wire your custom wallet UI to enable wallet operations. </p> <ul> <li>Issue Wallet Ops</li> <li>Manage User Control</li> <li>Export Private Key</li> </ul>"},{"location":"auth/custom-wallet-ui/#issue-wallet-ops","title":"Issue Wallet Ops","text":"<p>During app integration with Arcana Auth SDK, an <code>AuthProvider</code> is created. This provider is a standard Ethereum EIP-1193 provider. It facilitates wallet interactions with the blockchain. Use <code>AuthProvider</code> to call the JSON-RPC API and handle Web3 wallet operations for the selected chains. Add code to trigger wallet actions like sending transactions, signing messages, and executing contract calls.</p> Sample Code <p>The following code snippet shows how an HTML/CSS/JS app can integrate with the Arcana Auth SDK, onboard users via plug-and-play login UI and use the standard EIP-1193 Ethereum provider for issuing blockchain transactions through a custom wallet UI.</p> <pre><code>import { AuthProvider } from \"@arcana/auth\";\nimport { ethers } from 'ethers';\n\nlet provider;\nconst auth = new AuthProvider('xar_live_nnnnnnnnnnnnnnncdddddddd')  //Use registered app client Id\n\n// initialize the Arcana AuthProvider before calling any AuthProvider functions\n...\nawait auth.init()\n...\n\n// onboard users - for e.g. using plug-and-play ui\n\nconst arcanaProvider = await auth.connect()\n\n// alternatively, onboard users by calling loginWithLink(deprecated), `loginWithOTPStart`, `loginWithOTPComplete`, loginWithSocial, loginWithBearer for passwordless, social or IAM providers.\n...\n\nconst provider = new ethers.providers.Web3Provider(arcanaProvider)\n\n// Call ethers provider APIs see https://docs.ethers.org/v5/api/providers/provider/ for details\nawait provider.getBlockNumber()\n\n// Use the Arcana provider to sign a message using JSON RPC calls\n\nasync function signMessage() {\n\n  // Display a notification in custom wallet UI  showing the message details and seeking user's approval\n\n  ...\n\n  // Once user approves, issue the request via the Arcana Auth SDK to sign transaction\n\n  const { sig } = await arcanaProvider.request({\n    method: 'eth_sign',\n    params: [\n      {\n        from, // sender account address\n        data: 'Some message data',\n      },\n    ],\n  })\n  console.log({ sig })\n}\n\n...\n\n// You can send tokens or use eth_sendtransaction functionality in custom wallet UI \n// Show a UI notification displaying the transaction details and ask for user's approval\n\n...\n\n// Use the Arcana provider to issue the send transaction\n\nasync function sendTransaction() {\n  const hash = await arcanaProvider.request({\n    method: 'eth_sendTransaction',\n      params: [{\n      from,\n      gasPrice: 0,\n      to: '0xE28F01Cf69f27Ee17e552bFDFB7ff301ca07e780', // receiver account address\n      value: '0x0de0b6b3a7640000',\n    },],\n  })\n  console.log({ hash })\n}\n\n...\n</code></pre>"},{"location":"auth/custom-wallet-ui/#manage-user-control","title":"Manage User Control","text":"<p>For a smooth user experience, ensure your custom UI displays clear approval/rejection prompts when blockchain requests are made. Users must be able to view the details and accept or reject these actions.</p>"},{"location":"auth/custom-wallet-ui/#export-key-option","title":"Export Key Option","text":"<p>When using the default Arcana wallet UI, authenticated users can access and copy their private key from the profile tab. For custom wallet UI, developers should include secure options for users to export their private key. Use the <code>AuthProvider</code> to access the private key and make a JSON/RPC <code>request</code> call with the <code>_arcana_getPrivateKey</code> method to retrieve the key securely in the user's context.</p> Sample Code <pre><code>// Only valid when custom wallet UI is selected in the dashboard\n// during app registration\n\nasync function onClickGetUserPrivateKey() {\n  const authProvider = window.ethereum //assuming setWindowProvider is set when AuthProvider was instantiated \n  try {\n    const userPkey = await authProvider.request({\n      method: '_arcana_getPrivateKey',\n      params: []\n    });\n    // Do something with the key in custom wallet UI\n    // For e.g., display it in the app context, allow user to copy it\n  } catch(error) {\n        console.log(error);\n  };\n}\n</code></pre> <p>Access Limitation</p> <p>If the app is configured through the Arcana Developer Dashboard for using the default app specific keys option, then <code>_arcana_getPrivateKey</code> can be used. Not available for the Global Keys Keyspace configuration setting for security reason.</p>"},{"location":"auth/custom-wallet-ui/#whats-next","title":"What's Next?","text":"<p>Add code to use the <code>AuthProvider</code> and issue blockchain transactions in the context of the authenticated user and seek the user's approval, if required. The JSON/RPC functions and Web3 wallet operations supported by the Arcana Auth SDK for  EVM chains may differ from those supported for the non-EVM chains. Learn more...</p>"},{"location":"auth/custom-wallet-ui/#see-also","title":"See also","text":"<ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> <li> <p>Arcana Auth SDK Usage Guide</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul>"},{"location":"auth/handle-provider-events/","title":"Handle Provider Events","text":"<p>This guide lists the standard EIP-1193 events raised by the <code>AuthProvider</code> in the Arcana Auth SDK and how app developers can handle those events in the app. </p>"},{"location":"auth/handle-provider-events/#prerequisites","title":"Prerequisites","text":"<ul> <li>To receive and handle the <code>AuthProvider</code> events, register the app, configure social login and wallet settings and integrate the app with the SDK.</li> </ul>"},{"location":"auth/handle-provider-events/#events","title":"Events","text":"<p><code>AuthProvider</code> emits the following standard EIP-1193 events:</p> <ul> <li>connect: the provider is ready to submit the blockchain requests to the chain on behalf of the user (Use <code>provider.isConnected()</code> to check if the <code>AuthProvider</code> is connected.)</li> <li>disconnect: the <code>AuthProvider</code> is unable to submit RPC requests to a chain</li> <li>chainChanged: the chain associated with the Provider has changed</li> <li>accountsChanged: the <code>AuthProvider</code> emits this event when the return value of the <code>eth_accounts</code> RPC method changes</li> </ul> <p>After initialization, when the provider is ready to submit the blockchain requests to the chain on behalf of the user, the connect event is generated. Use <code>provider.isConnected()</code> to check if the <code>AuthProvider</code> is connected. The disconnect event occurs when there is any connectivity issue with the blockchain network. If the chain is switched programmatically via the app and approved by the user or if it is changed via the Arcana wallet UI by the user, the chainChanged event occurs. Similarly, when the account associated with the <code>AuthProvider</code> changes, the accountsChanged event is emitted.</p>"},{"location":"auth/handle-provider-events/#examples","title":"Examples","text":""},{"location":"auth/handle-provider-events/#connect-event","title":"Connect Event","text":"<pre><code>interface ConnectEventInfo {\n  chainId: string;\n}\n\nconst auth = new AuthProvider(\"...\")\nawait auth.init()\n\n...\n\nauth.provider.on('connect', handler: (data: ConnectEventInfo) =&gt; void);\n</code></pre>"},{"location":"auth/handle-provider-events/#disconnect-event","title":"Disconnect Event","text":"<p>When the <code>AuthProvider</code> becomes disconnected from the chains it emits the event <code>disconnect</code> with the error ProviderRpcError.</p> <pre><code>interface ProviderRpcError extends Error {\n  code: number;\n  data?: unknown;\n}\n\nconst auth = new AuthProvider(\"...\")\nawait auth.init()\n\n...\n\nauth.provider.on('disconnect', handler: (error: ProviderRpcError) =&gt; void);\n</code></pre>"},{"location":"auth/handle-provider-events/#chain-changed-event","title":"Chain Changed Event","text":"<pre><code>const auth = new AuthProvider(\"...\")\nawait auth.init()\n\n...\n\nauth.provider.on('chainChanged', (chainId: string) =&gt; { \n  console.log(chainId);\n  // Use chainId\n});\n</code></pre>"},{"location":"auth/handle-provider-events/#accounts-changed-event","title":"Accounts Changed Event","text":"<p>If the accounts available to the <code>AuthProvider</code> change, it emits the event accountsChanged with value accounts: string[], containing the account addresses.</p> <pre><code>const auth = new AuthProvider(\"...\")\nawait auth.init()\n\n...\n\nauth.provider.on('accountsChanged', handler: (accounts: Array&lt;string&gt;) =&gt; void);\n</code></pre> <p>Remove Listener</p> <p>Make sure that you remove event listeners once you're done listening to an event in the app.  For example:</p> <pre><code>const auth = new AuthProvider(\"...\")\nawait auth.init()\n\n...\n\nfunction handleSomeEvent(accounts) {\n  // Handle the event\n}\n\nauth.provider.on('someEvent', handleSomeEvent);\n\n// Later, when the component is unloaded or you are done watching the event\n\nauth.provider.removeListener('someEvent', handleSomeEvent);\n</code></pre> <p>That is all. </p> <p>You are all set to handle the events emitted by the <code>AuthProvider</code>.</p>"},{"location":"auth/handle-provider-events/#whats-next","title":"What's Next?","text":"<p>Authenticated users can use the Arcana wallet to sign blockchain transactions, send and receive native, ERC20, or custom tokens, and   more.</p>"},{"location":"auth/handle-provider-events/#see-also","title":"See also","text":"<ul> <li>Arcana wallet capabilities</li> <li>Using Web3 wallet operations </li> </ul>"},{"location":"auth/passkeys-auth/","title":"Onboarding Options","text":"<p>Apps using Arcana Auth SDK can enable passkey login in two ways:</p> <ul> <li>Allow new users to sign up with passkeys, making it the only login option.</li> <li>Let existing users set up passkeys as an alternative login method, alongside other social login options. </li> </ul>"},{"location":"auth/passkeys-auth/#passkey-sign-up","title":"Passkey Sign-up","text":"<p>To sign up with passkeys, use <code>registerWithPasskey()</code>, followed by <code>loginWithPasskey()</code>. This will allow users to sign up and log in one step. Users must provide a unique identifier for passkey registration such as a name, email, device ID, biometrics data, PIN, or pattern. This sign-up flow is ideal for apps that only allow passkey onboarding.   See details...</p>"},{"location":"auth/passkeys-auth/#passkey-login","title":"Passkey Login","text":"<p>To use passkeys as an alternative login, users first need to onboard through another method, like social login. Once logged in, they can set up a passkey for future logins. Use <code>linkPasskey()</code> to create and associate passkey with the app or website. Next time, when user chooses passkey option to log in, the app can call <code>loginWithPasskey()</code>, triggering the device or browser to display a UI where the user can choose the previously set passkey. This flow works best for apps that support multiple onboarding methods.   See details...</p>"},{"location":"auth/sdk-installation/","title":"Install Arcana Auth SDK","text":"<p>Arcana Auth SDK supports various app types. You may be required to install one or more Arcana Auth SDK packages depending upon the app type.</p> <p>For example, Vue apps, HTML/CSS/JS apps only require installation of the <code>auth</code> package. For other app types, you may need to install app-type-specific packages along with the companion <code>auth</code> package. See table for more details:</p> <p>Arcana Auth SDK Flavors</p> <p>In some cases, you need to install and integrate the app with the <code>auth</code> package in addition to the app-specific package listed below. </p> SDK Name Web3 Application Type Package Name Requires companion SDK Arcana Auth SDK For enabling user onboarding in web apps: Vanilla HTML/CSS/JS Apps, Vue Apps <code>auth</code> None Arcana Auth React SDK React Apps <code>auth-react</code> <code>auth</code> Arcana Auth Wagmi SDK Apps using wallet connectors such as Wagmi, RainbowKit, WalletConnect <code>auth-wagmi</code> <code>auth</code> Arcana Auth Web3 React SDK Apps using Web3-React wallet connector <code>auth-web3-react</code> <code>auth</code> Arcana Auth Flutter SDK Mobile apps built using Flutter <code>arcana_auth_flutter</code> None Arcana Auth React-Native SDK Mobile apps built using React Native <code>auth-react-native</code> None Arcana Auth-Core SDK Auth SDK for user onboarding features usage only and ability to assign keys to authenticated users, with no embedded wallet feature <code>auth-core</code> None Arcana Auth Unity SDK Gaming apps built using Unity <code>arcana-auth-sdk</code> None"},{"location":"auth/sdk-installation/#arcana-auth-sdk","title":"Arcana Auth SDK","text":""},{"location":"auth/sdk-installation/#htmlcssjs-vue-apps","title":"HTML/CSS/JS, Vue Apps","text":"npmyarn <pre><code>npm install --save @arcana/auth\n</code></pre> <pre><code>yarn add @arcana/auth\n</code></pre>"},{"location":"auth/sdk-installation/#reactnextjs-apps","title":"React/Next.js Apps","text":"npmyarn <pre><code>npm install --save @arcana/auth @arcana/auth-react\n</code></pre> <pre><code>yarn add @arcana/auth  @arcana/auth-react\n</code></pre>"},{"location":"auth/sdk-installation/#wagmirainbowkitwalletconnect-apps","title":"Wagmi/RainbowKit/WalletConnect Apps","text":"npmyarn <p>Wagmi 2.0</p> <pre><code>npm install --save @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>npm install --save @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre> <p>Wagmi 2.0</p> <pre><code>yarn add @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>yarn add @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre>"},{"location":"auth/sdk-installation/#web3-react-apps","title":"Web3-React Apps","text":"npmyarn <pre><code>npm install --save @arcana/auth-web3-react @arcana/auth\n</code></pre> <pre><code>yarn add @arcana/auth-web3-react @arcana/auth\n</code></pre>"},{"location":"auth/sdk-installation/#unity-framework","title":"Unity Framework","text":"<p>Download the Arcana Auth Unity SDK package: https://npm-registry.arcana.network/. Unzip the contents and copy them to the Assets folder of the Unity Project.</p> <p>Unity Settings</p> <p>Developers must update the Unity Project settings in addition to installing the Arcana Auth Unity SDK. This is required to enable SDK usage in Unity Apps. See  Unity Setup.</p>"},{"location":"auth/sdk-installation/#mobile-sdks","title":"Mobile SDKs","text":""},{"location":"auth/sdk-installation/#flutter-apps","title":"Flutter Apps","text":"pubspec.yaml<pre><code>dependencies:\n  flutter:       # Required for every Flutter project\n    sdk: flutter # Required for every Flutter project\n  flutter_localizations: # Required to enable localization\n    sdk: flutter         # Required to enable localization\n  arcana_auth_flutter: ^0.0.6 \n</code></pre>"},{"location":"auth/sdk-installation/#react-native-apps","title":"React-Native Apps","text":"<pre><code>npm i @arcana/auth-react-native\n(cd ios &amp;&amp; pod install)\n</code></pre>"},{"location":"auth/walletui-error-msg/","title":"Wallet UI Errors","text":"<p>The Arcana wallet users may encounter the following run-time errors when using the wallet to sign blockchain transactions or while using other wallet UI features such as adding or switching networks, setting up enhanced security via  MFA, etc.</p>"},{"location":"auth/walletui-error-msg/#error-messages","title":"Error Messages","text":"Error Description W-101: RPC URL  is already specified in  profile. Cannot add this RPC URL more than once. W-102: Chain Id  already exists in  profile. Cannot add same chain ID more than once. W-103: This network is currently active. Select a different to make it active. You may be trying to switch to a network which is already selected as the active network. Try again. W-104: Enter the pin to continue. For enhanced security via MFA, you need to enter the pin to authorize access. Wallet address copied. The wallet address is copied successfully to the clipboard. W-105: Please enter a valid wallet address. Check the specified wallet address for the blockchain transaction. Answer all the questions to recover the key. You must answer at least 3 security questions correctly in order to authorize access. Each questions must be unique! You cannot specify the same security question more than once during MFA setup or recovery. W-106: Please provide the gas fee. You have not specified the required gas fees for this transaction. W-107: Insufficient balance to pay for the gas fee. Top up your account to pay for the gas fee, otherwise the transaction will fail due to insufficient balance. W-108: Cannot estimate gas fee. Please try again later. For some unknown reason, we are not able to estimate the gas fees for this transaction. The network may not be responding or loaded so try again after some time. W-109: Gas limit cannot be set to a value less than the required gas fee for this transaction. You have set up a gas limit which is insufficient to cover the gas fees for this transaction, change the gas limit. W-110: Enter all the details to continue. You need to provide all the required details before this transaction can occur. Token Added successfully. - Token already added. This token is already available in the wallet, you cannot add it more than once. Token belongs to Ethereum Mainnet. This token is not available on the current selected network but on the Mainnet, try switching network. Token sent successfully. - W-111: Insufficient balance for specified transfer amount. The account balance is insufficient for this transaction. Try topping up the balance before performing this transaction. W-112: Amount cannot be greater than the maximum available balance. The amount of tokens specified should be less than or equal to the balance available in the current account. NFT Added. - NFT already added. This NFT is already added to the wallet, cannot add an NFT more than once. W-112: Unsupported NFT. The wallet supports only these NFT types: ERC-721, ERC-1155. W-113: You don't have ownership for this NFT. Cannot add NFT to the current wallet as this wallet address does not own the specified NFT. NFT Deleted. - W-114: Insufficient NFTs. At most, you can send  NFTs. The quantity of NFTs specified in the transaction is more than available NFTs, fix and resubmit the transaction. W-116: Error creating NFT. Please try again. - W-115: Invalid contract address. - MFA setup completed. - W-116: Incorrect answers. MFA recovery answers are not correct, recovery failed. W-117: Incorrect pin. MFA recovery failed due to incorrect pin. W-118: Please fill in all the questionnaires. - W-119: Questions cannot be repeated. - W-120: Questions cannot be empty. - W-121: User cancelled the setup. MFA setup was cancelled by the user, no enhanced security is set up for this account. W-122: Incorrect combination of chain Id and RPC URL. Check RPC URL does not match with the specified chain Id. W-123: Invalid RPC URL! Check the RPC URL and provide the correct one for the blockchain. W-124: Failed to copy. Could not copy the selected item in the wallet UI. W-125: Failed to copy wallet address. The wallet address could not be copied to the local clipboard. W-126: Failed to get balance. Could not retrieve the balance for the current wallet address. It could be an intermittent error due to network issues. W-148: No valid wallet is associated for the given address. The specified address does not belong to a valid wallet. W-127: Invalid token Id. Check the token Id specified while manually adding a token asset through the wallet UI. W-128: Error occurred while setting up MFA. Please try again! Retry MFA Setup. W-129: Please enter a valid quantity. Check the number of tokens specified in the transaction. It should be less than or equal to the balance available. W-130: Please make the request again. For some unknown reason the request failed, try again. W-131: Something went wrong, please try again. Unknown error, try again. W-132: Please fill all values! All input values must be specified, they are not optional in this case. W-133: Failed to initialize one or more on-ramps. Transak encountered an error while initializing the on-ramp provider, try again. W-134: Could not get token. Login failure as the token is not available. W-136: Failed to add  to activities list. Due to some unknown reason, the activity tab was not updated for this current transaction. W-137: Could not verify credentials. Passwordless login failed as the OTP/email link credentials could not be verified successfully. W-138: Could not contact parent page causing login failure. Retry login. Redirect to the specified URL failed causing a failed login. Check auth settings. W-139: Could not log in, an unexpected error occurred. Login failed unexpectedly, try again and report error if it persists. W-140: Local or session storage doesn't work, falling back to in-memory storage. There is some unknown issue in the local or session storage of the browser, falling back to in-memory storage. Your changes may not be saved across browser sessions. W-141: Required params missing. Token validation error, expected input parameters are missing. W-142: Token already added. The token already exists in the wallet, cannot be added more than once. W-143: Token belongs to Ethereum Mainnet. You can use the Mainnet Token only when using the Mainnet App Client ID. Check the integration code. W-144: Invalid contract address. The specified contract address for the transaction is invalid, check again. W-145: You do not own this token. Token can be added to the wallet or transacted only if it is owned by the wallet address. W-146: Invalid token. Invalid JWT Token specified for accessing keys. W-147: Failed to fetch details. Token validation failed as details could not be fetched and verified."},{"location":"auth/integrate/mvx/","title":"Integrate MultiversX App","text":"<p>Integrate 'MultiversX' apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"auth/integrate/mvx/#prerequisites","title":"Prerequisites","text":"<ul> <li>Register the 'MultiversX' app and configure the Arcana Auth SDK usage settings for social login providers, manage app manage app chains and wallet user experience.</li> </ul> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p> MultiversX Shard Selection <p>MultiversX uses adaptive state sharding for horizontal scaling. Shards allow it to process far more transactions through parallelization, improving transaction throughput and efficiency. </p> <p>Choose your shard once when registering a MultiversX app on the Arcana Developer Dashboard. It cannot be changed later.</p> <p>By default, Arcana uses 'Shard 0' to deploy all app contracts and allocate wallet addresses for users. The benefit is that when addresses from the same shard interact with contracts on the same shard, latencies are much lower than in cross-shard interactions.</p>"},{"location":"auth/integrate/mvx/#1-install","title":"1. Install","text":"<p>Depending upon the app type, you may need to install one or more Arcana Auth SDK flavors and the integration steps may vary. </p>"},{"location":"auth/integrate/mvx/#2-integrate-app","title":"2. Integrate App","text":"<p>Select your 'MultiversX' app type and follow the integration instructions.</p> Web AppsMobile AppsCustom Auth Apps <p>  HTML/CSS/JS App  React/Next.js App  Wagmi App  WalletConnect App   RainbowKit App   Web3-React App  Unity App</p> <p>  Flutter Apps  React-Native Apps</p> <p>  Custom Auth</p>"},{"location":"auth/integrate/mvx/#whats-next","title":"What's Next?","text":"<p>Add code to onboard users. Use <code>AuthProvider</code>, the standard EIP-1193 Web3 provider to call support JSON/RPC functions and Web3 wallet operations. Learn more...</p>"},{"location":"auth/integrate/mvx/#see-also","title":"See also","text":"<p>'MultiversX' integration example: See <code>sample-auth-multiversx</code> submodule in SDK Example GitHub repository.</p> <ul> <li>MultiversX FAQ</li> </ul> <p>Try Demo App </p>"},{"location":"auth/integrate/near/","title":"Integrate Near App","text":"<p>Integrate 'Near' apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"auth/integrate/near/#prerequisites","title":"Prerequisites","text":"<ul> <li>Register the 'Near' app and configure Arcana Auth SDK SDK usage settings for social login providers, manage app manage app chains and wallet user experience.</li> </ul> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p>"},{"location":"auth/integrate/near/#1-install","title":"1. Install","text":"<p>Depending upon the app type, you may need to install one or more Arcana Auth SDK SDK flavors and the integration steps may vary. </p>"},{"location":"auth/integrate/near/#2-integrate-app","title":"2. Integrate App","text":"<p>Select your 'Near' app type and follow the integration instructions.</p> Web AppsMobile AppsCustom Auth Apps <p>  HTML/CSS/JS App  React/Next.js App  Wagmi App  WalletConnect App   RainbowKit App   Web3-React App  Unity App</p> <p>  Flutter Apps  React-Native Apps</p> <p>  Custom Auth</p>"},{"location":"auth/integrate/near/#whats-next","title":"What's Next?","text":"<p>Add code to onboard users. Use <code>AuthProvider</code>, the standard EIP-1193 Web3 provider to call support JSON/RPC functions and Web3 wallet operations. Learn more...</p>"},{"location":"auth/integrate/near/#see-also","title":"See also","text":"<p>'Near' integration example: See <code>sample-auth-near</code> submodule in SDK Example GitHub repository.</p> <ul> <li>Near FAQ</li> </ul> <p>Try Demo App </p>"},{"location":"auth/integrate/rainbow/","title":"Integrate Rainbow App","text":"<p>RainbowKit allows Web3 apps to connect to multiple Web3 wallets. It relies on Wagmi and Viem.</p> <p>Integrate 'RainbowKit' apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"auth/integrate/rainbow/#prerequisites","title":"Prerequisites","text":"<ul> <li>Register the 'RainbowKit' app and configure SDK usage settings for social login providers, manage app manage app chains and wallet user experience.</li> </ul> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p>"},{"location":"auth/integrate/rainbow/#steps","title":"Steps","text":""},{"location":"auth/integrate/rainbow/#1-install","title":"1. Install","text":"npmyarn <p>Wagmi 2.0</p> <pre><code>npm install --save @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>npm install --save @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre> <p>Wagmi 2.0</p> <pre><code>yarn add @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>yarn add @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre>"},{"location":"auth/integrate/rainbow/#2-create-authprovider-arcanaconnector","title":"2. Create <code>AuthProvider</code> &amp;  <code>ArcanaConnector</code>","text":"<pre><code>import { AuthProvider } from \"@arcana/auth\";\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\"\n\nconst auth = new AuthProvider('your-client-id');\n\nconst connector = new ArcanaConnector({ auth });\n</code></pre> <code>AuthProvider</code> Optional Parameters <p>Besides Client ID input parameter, you can optionally customize these settings in the <code>AuthProvider</code> constructor:</p> <p><code>position</code>:  wallet position within the app context - <code>left</code>|<code>right</code></p> <p><code>theme</code>: wallet theme - <code>light</code>|<code>dark</code></p> <p><code>connectOptions</code>: compact mode for the built-in plug-and-play login UI - <code>true</code>|<code>false</code></p> <pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> <p>See <code>AuthProvider</code> constructor parameters for details.</p> <p>Compact Mode</p> <p>While creating the <code>AuthProvider</code>, you can choose the compact mode (optional) for the plug-and-play login UI.</p>"},{"location":"auth/integrate/rainbow/#3-create-arcanarainbowconnector","title":"3. Create <code>ArcanaRainbowConnector</code>","text":"<p>Initialize the <code>connectorsForWallets</code> in the RainbowKit with the <code>ArcanaRainbowConnector</code>.</p> <pre><code>//This example uses Arcana Rainbow connector and MetaMask\n\nimport { connectorsForWallets } from \"@rainbow-me/rainbowkit\";\nimport { metaMaskWallet } from \"@rainbow-me/rainbowkit/wallets\";\nimport { getAuthProvider } from \"./getArcanaAuth\";\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\";\n\nimport { sequenceLogo } from \"./logo\";\n\nexport const ArcanaRainbowConnector = ({ chains }) =&gt; {\n  return {\n    id: \"arcana-auth\",\n    name: \"Login with Email/Social\",\n    iconUrl: sequenceLogo,\n    iconBackground: \"#101010\",\n    createConnector: () =&gt; {\n      const connector = new ArcanaConnector({\n        chains,\n        options: {\n          auth: getAuthProvider()\n        }\n      });\n      return {\n        connector\n      };\n    }\n  };\n};\n\nconst connectors = (chains) =&gt;\n  connectorsForWallets([\n    {\n      groupName: \"Recommended\",\n      wallets: [ArcanaRainbowConnector({ chains }), metaMaskWallet({ chains })]\n    }\n  ]);\n\nexport { connectors };\n</code></pre> <p>Use the  <code>ArcanaRainbowConnector</code> and set up <code>WagmiConfig</code>.</p> Wagmi 2.0Wagmi 1.0 <pre><code>// Note:  \n// This sample code is for \n// wagmi versions 1.x.x and auth-wagmi 2.0.0\n\nimport { configureChains, createConfig, WagmiConfig } from \"wagmi\";\nimport { polygon, mainnet, optimism, arbitrum } from \"wagmi/chains\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { RainbowKitProvider } from \"@rainbow-me/rainbowkit\";\nimport { connectors } from \"./wallet\";\nimport { useAccount, useConnect } from 'wagmi'\nimport { Connect } from \"./Connect\";\n\nconst { chains, publicClient } = configureChains(\n  [mainnet, polygon, optimism, arbitrum],\n  [publicProvider()]\n);\n\nconst wagmiEntity = createConfig({\n  connectors: connectors(chains),\n  autoConnect: true,\n  publicClient,\n});\n...\n</code></pre> <pre><code>// Note:  \n// This sample code is for \n// wagmi versions &lt;1.x.x and auth-wagmi &lt;2.0.0\n\nimport \"../styles/globals.css\";\nimport \"@rainbow-me/rainbowkit/styles.css\";\n\nimport { configureChains, createClient, WagmiConfig } from \"wagmi\";\nimport { polygon, mainnet } from \"wagmi/chains\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { RainbowKitProvider } from \"@rainbow-me/rainbowkit\";\nimport { connectors } from \"../utils/wallet\";\n\nconst { chains, provider } = configureChains(\n  [mainnet, polygon],\n  [publicProvider()]\n);\n\nconst wagmiEntity = createClient({\n  connectors: connectors(chains),\n  autoConnect: true,\n  provider,\n});\n...\n</code></pre> <p>Use the <code>WagmiConfig</code> to initialize the <code>RainbowKitProvider</code> components in the app.</p> Wagmi 2.0Wagmi 1.0 <pre><code>// Pass wagmi client configured with ArcanaRainbowKitConnector to the RainbowKit Context Provider\nexport default function App({ Component, pageProps }) {\n  return (\n    &lt;WagmiConfig config={wagmiEntity}&gt;\n      &lt;RainbowKitProvider chains={chains}&gt;\n        &lt;Component {...pageProps} /&gt;\n      &lt;/RainbowKitProvider&gt;\n    &lt;/WagmiConfig&gt;\n  );\n}\n</code></pre> <pre><code>// Pass wagmi client configured with ArcanaRainbowKitConnector to the RainbowKit Context Provider\nexport default function App({ Component, pageProps }) {\n  return (\n    &lt;WagmiConfig client={wagmiEntity}&gt;\n      &lt;RainbowKitProvider chains={chains}&gt;\n        &lt;Component {...pageProps} /&gt;\n      &lt;/RainbowKitProvider&gt;\n    &lt;/WagmiConfig&gt;\n  );\n}\n</code></pre> <p>The 'RainbowKit' Web3 app is now integrated with the Arcana Auth SDK.</p>"},{"location":"auth/integrate/rainbow/#whats-next","title":"What's Next?","text":"<p>Onboard users via the built-in plug-and-play login UI or a custom login UI.</p> <p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/integrate/rainbow/#see-also","title":"See also","text":"<p>'RainbowKit' integration example: See <code>`sample-auth-rainbowkit-viem</code>, <code>sample-auth-rainbowkit</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> <li> <p>Arcana Auth SDK Usage Guide</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth Wagmi SDK Quick Links</p> <ul> <li>Auth Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/integrate/react-nextjs/","title":"Integrate React/Next.js App","text":"<p>Integrate 'React/NextJS' apps withArcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"auth/integrate/react-nextjs/#prerequisites","title":"Prerequisites","text":"<ul> <li>Register the 'React/NextJS' app and configure SDK usage settings for social login providers, manage app manage app chains and wallet user experience.</li> </ul> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p>"},{"location":"auth/integrate/react-nextjs/#steps","title":"Steps","text":""},{"location":"auth/integrate/react-nextjs/#1-install","title":"1. Install","text":"npmyarn <pre><code>npm install --save @arcana/auth\n</code></pre> <pre><code>yarn add @arcana/auth\n</code></pre> npmyarn <pre><code>npm install --save @arcana/auth @arcana/auth-react\n</code></pre> <pre><code>yarn add @arcana/auth  @arcana/auth-react\n</code></pre>"},{"location":"auth/integrate/react-nextjs/#2-initialize-authprovider-providerauth","title":"2. Initialize <code>AuthProvider</code>, <code>ProviderAuth</code>","text":"<code>index.js</code><code>App.js</code> <pre><code>import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AuthProvider } from \"@arcana/auth\";\nimport { ProvideAuth } from \"@arcana/auth-react\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nconst provider = new AuthProvider(\n  \"xar_live_d7c88d9b033d100e4200d21a5c4897b896e60063\"\n);\n\nroot.render(\n  &lt;StrictMode&gt;\n    &lt;ProvideAuth provider={provider}&gt;\n      &lt;App /&gt;\n    &lt;/ProvideAuth&gt;\n  &lt;/StrictMode&gt;\n);\n</code></pre> <pre><code>import React from \"react\";\nimport { Auth } from \"@arcana/auth-react\";\n\nexport default function App() {\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;h1&gt;Sample Auth React App&lt;/h1&gt;\n      &lt;Auth /&gt;\n    &lt;/div&gt;\n  );\n</code></pre>"},{"location":"auth/integrate/react-nextjs/#step-4-useauth-hook","title":"Step 4: <code>useAuth</code> Hook","text":"<pre><code>import { useAuth } from \"@arcana/auth-react\";\n\nfunction App() {\n  const { loading, isLoggedIn, connect, user } = useAuth()\n\n  const onConnectClick = async () =&gt; {\n    try {\n      await connect(); // Built-in, plug &amp; play login UI\n    } catch (err) {\n      console.log({ err });\n      // Handle error\n    }\n  };\n\n  if (loading) {\n    return &lt;p&gt;Loading...&lt;/p&gt;;\n  }\n  if (!isLoggedIn) {\n    return (\n      &lt;button onClick={onConnectClick}&gt;\n        Login UI (Built-in)\n      &lt;/button&gt;\n    );\n  }\n}\n\nexport default App\n</code></pre>"},{"location":"auth/integrate/react-nextjs/#whats-next","title":"What's Next?","text":"<p>Onboard users via the built-in plug-and-play login UI or a custom login UI.</p> <p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/integrate/react-nextjs/#see-also","title":"See also","text":"<p>'React/NextJS' integration example: See <code>sample-auth-react</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> <li> <p>Arcana Auth SDK Usage Guide</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/integrate/solana/","title":"Integrate Solana App","text":"<p>Integrate 'Solana' apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"auth/integrate/solana/#prerequisites","title":"Prerequisites","text":"<ul> <li>Register the 'Solana' app and configure Arcana Auth SDK SDK usage settings for social login providers, manage app manage app chains and wallet user experience.</li> </ul> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p>"},{"location":"auth/integrate/solana/#steps","title":"Steps","text":"<p>Select your 'Solana' app type and follow the integration instructions. Solana apps will require to initialize and use Solana Provider in addition to the <code>AuthProvider</code>.</p>"},{"location":"auth/integrate/solana/#1-install","title":"1. Install","text":"<p>Depending upon the app type, you may need to install one or more Arcana Auth SDK SDK flavors and the integration steps may vary. </p>"},{"location":"auth/integrate/solana/#2-integrate-app","title":"2. Integrate App","text":"<p>Select your 'Solana' app type and follow the integration instructions.</p> Web AppsMobile AppsCustom Auth Apps <p>  HTML/CSS/JS App  React/Next.js App  Wagmi App  WalletConnect App   RainbowKit App   Web3-React App  Unity App</p> <p>  Flutter Apps  React-Native Apps</p> <p>  Custom Auth</p>"},{"location":"auth/integrate/solana/#3-initialize-solana-provider","title":"3. Initialize Solana Provider","text":"<p>Solana apps can use the <code>auth.provider</code> to make standard JSON RPC calls in the context of an authenticated user.</p> <pre><code>const provider = auth.provider;\n</code></pre> <p>Use the Solana provider for issuing Solana Web3 wallet operations in the context of an authenticated user. </p> <pre><code>const solanaP = auth.solana;\n</code></pre>"},{"location":"auth/integrate/solana/#whats-next","title":"What's Next?","text":"<p>Add code to onboard users. Use <code>AuthProvider</code>, the standard EIP-1193 Web3 provider to call support JSON/RPC functions and Web3 wallet operations. Learn more...</p>"},{"location":"auth/integrate/solana/#see-also","title":"See also","text":"<p>'Solana' integration example: See <code>sample-auth-solana</code> submodule in SDK Example GitHub repository.</p> <ul> <li>Solana FAQ</li> </ul> <p>Try Demo App </p>"},{"location":"auth/integrate/unity/","title":"Integrate Unity App","text":"<p>Integrate 'Unity' apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"auth/integrate/unity/#prerequisites","title":"Prerequisites","text":"<ul> <li>Register the 'Unity' app and configure SDK usage settings for social login providers, manage app manage app chains and wallet user experience.</li> </ul> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p>"},{"location":"auth/integrate/unity/#steps","title":"Steps","text":""},{"location":"auth/integrate/unity/#1-setup","title":"1. Setup","text":""},{"location":"auth/integrate/unity/#setup-unity","title":"Setup Unity","text":"<ul> <li> <p>Install NuGetForUnity.</p> </li> <li> <p>In the NuGet Toolbar at the top, click NuGet &gt; Manage NuGet packages. Manage NuGet Packages</p> </li> <li> <p>Install the following packages by STA: <code>Nethereum.Web3</code>, <code>WebsocketSharp.Core</code></p> </li> <li> <p>Use the Unity Editor Project Settings window to edit package settings for your project. Click Edit &gt; Project Settings &gt; Package Manager.</p> <ul> <li> <p>Edit Project Settings with URL https://npm-registry.arcana.network/ and set the scope to <code>com.cysharp.unitask, dev.voltstro</code> Edit Project Settings</p> </li> <li> <p>Add another new scoped registry with URL https://unitynuget-registry.azurewebsites.net and set the scope to <code>org.nuget</code>. Add Scoped Registry</p> </li> </ul> </li> <li> <p>In the NuGet window, use the NuGet Toolbar at the top, and click Window &gt; Package Manager &gt; Add Package by Name. Add Package by Name</p> </li> <li> <p>Add the following packages: <code>com.cysharp.unitask</code>, <code>`dev.voltstro.unitywebbrowser.engine.cef</code></p> <ul> <li> <p>Windows:  <code>dev.voltstro.unitywebbrowser.engine.cef.win.x64</code></p> </li> <li> <p>Linux: <code>dev.voltstro.unitywebbrowser.engine.cef.linux.x64</code></p> </li> <li> <p>MacOS: <code>dev.voltstro.unitywebbrowser.engine.cef.macos.x64</code></p> </li> </ul> </li> </ul> <p>See Unity Web Browser package list for details.</p> <ul> <li> <p>Download the Arcana Auth Unity SDK package: https://npm-registry.arcana.network/. Unzip the contents and copy them to the Assets folder of the Unity Project.</p> </li> <li> <p>Search for ArcanaSDK prefab in the 'Project Window' of the Unity Editor. Click Assets &gt; ArcanaSDK &gt; Prefabs &gt; ArcanaSDK. Drag this prefab into the project 'Hierarchy' and configure the prefab as shown here: Configure Arcana Prefab</p> </li> </ul>"},{"location":"auth/integrate/unity/#install-auth-sdk","title":"Install Auth SDK","text":"npmyarn <pre><code>npm install --save @arcana/auth\n</code></pre> <pre><code>yarn add @arcana/auth\n</code></pre>"},{"location":"auth/integrate/unity/#2-initialize-auth-sdk","title":"2. Initialize Auth SDK","text":"<pre><code>using ArcanaSDK;\n\nawait arcanaSDK.InitializeSDK(env, \"unique_clientID_for_registed_app\");\n</code></pre>"},{"location":"auth/integrate/unity/#whats-next","title":"What's Next?","text":"<p>After integrating an app with the Arcana Auth Unity SDK, developers can add code to onboard users and enable Web3 wallet operations for authenticated users to sign transactions.</p>"},{"location":"auth/integrate/unity/#see-also","title":"See also","text":"<p>'Unity' integration example: See <code>sample-auth-unity</code> submodule in SDK Example GitHub repository.</p> <p>Try Demo App </p>"},{"location":"auth/integrate/vanilla-html-css-js/","title":"Integrate HTML/CSS/JS App","text":"<p>Integrate 'HTML/CSS/JS' apps withArcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"auth/integrate/vanilla-html-css-js/#prerequisites","title":"Prerequisites","text":"<ul> <li>Register the 'HTML/CSS/JS' app and configure SDK usage settings for social login providers, manage app manage app chains and wallet user experience.</li> </ul> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p>"},{"location":"auth/integrate/vanilla-html-css-js/#steps","title":"Steps","text":""},{"location":"auth/integrate/vanilla-html-css-js/#1-install","title":"1. Install","text":"npmyarn <pre><code>npm install --save @arcana/auth\n</code></pre> <pre><code>yarn add @arcana/auth\n</code></pre>"},{"location":"auth/integrate/vanilla-html-css-js/#2-initialize-authprovider","title":"2. Initialize <code>AuthProvider</code>","text":"<pre><code>import { AuthProvider } from '@arcana/auth'\n</code></pre> <pre><code>const auth = new AuthProvider(\n  \"xar_test_445007f942xxxxxxxxxxxxxxxxxx484cAfd2\", // App client ID\n  { \n    alwaysVisible: false,     // default: true, wallet always visible\n    connectOptions: {\n      compact: true           // default: false, regular plug-and-play login UI\n    },\n    position: 'left',         // default: right\n    setWindowProvider: true,  // default: false, window.ethereum not set\n    theme: 'light',           // default: dark\n})\n</code></pre> Initialize First! <p>After creating the <code>AuthProvider</code>, wait until the <code>init</code> call is complete before invoking any of the other SDK functions.</p> <pre><code>try {\n  await auth.init()\n} catch (e) {\n  // Handle exception case\n}\n</code></pre> <code>AuthProvider</code> Optional Parameters <p>Besides Client ID input parameter, you can optionally customize these settings in the <code>AuthProvider</code> constructor:</p> <p><code>position</code>:  wallet position within the app context - <code>left</code>|<code>right</code></p> <p><code>theme</code>: wallet theme - <code>light</code>|<code>dark</code></p> <p><code>connectOptions</code>: compact mode for the built-in plug-and-play login UI - <code>true</code>|<code>false</code></p> <pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> <p>See <code>AuthProvider</code> constructor parameters for details.</p> <p>The 'HTML/CSS/JS' Web3 app is now integrated with the Arcana Auth SDK.</p>"},{"location":"auth/integrate/vanilla-html-css-js/#whats-next","title":"What's Next?","text":"<p>Onboard users via the built-in plug-and-play login UI or a custom login UI.</p> <p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/integrate/vanilla-html-css-js/#see-also","title":"See also","text":"<p>'HTML/CSS/JS' integration example: See <code>sample-auth-html-css-js</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> <li> <p>Arcana Auth SDK Usage Guide</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/integrate/vue/","title":"Integrate Vue App","text":"<p>Integrate 'Vue' apps withArcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"auth/integrate/vue/#prerequisites","title":"Prerequisites","text":"<ul> <li>Register the 'Vue' app and configure SDK usage settings for social login providers, manage app manage app chains and wallet user experience.</li> </ul> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p>"},{"location":"auth/integrate/vue/#steps","title":"Steps","text":""},{"location":"auth/integrate/vue/#1-install","title":"1. Install","text":"npmyarn <pre><code>npm install --save @arcana/auth\n</code></pre> <pre><code>yarn add @arcana/auth\n</code></pre>"},{"location":"auth/integrate/vue/#2-initialize-authprovider","title":"2. Initialize <code>AuthProvider</code>","text":"<pre><code>import { AuthProvider } from \"@arcana/auth\";\n\nlet authInstance;\n\n//Mainnet ClientId\nconst clientId = \"xar_live_d7c88d9b033d100e4200d21a5c4897b896e60063\";\n\nif (authInstance == null) {\n  authInstance = new AuthProvider(clientId);\n  await authInstance.init();\n}\n\n// Use authInstance for user onboarding, JSON/RPC and wallet ops\n</code></pre> <code>AuthProvider</code> Optional Parameters <p>Besides Client ID input parameter, you can optionally customize these settings in the <code>AuthProvider</code> constructor:</p> <p><code>position</code>:  wallet position within the app context - <code>left</code>|<code>right</code></p> <p><code>theme</code>: wallet theme - <code>light</code>|<code>dark</code></p> <p><code>connectOptions</code>: compact mode for the built-in plug-and-play login UI - <code>true</code>|<code>false</code></p> <pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> <p>See <code>AuthProvider</code> constructor parameters for details.</p> <p>The 'Vue' Web3 app is now integrated with the Arcana Auth SDK.</p>"},{"location":"auth/integrate/vue/#whats-next","title":"What's Next?","text":"<p>Onboard users via the built-in plug-and-play login UI or a custom login UI.</p> <p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/integrate/vue/#see-also","title":"See also","text":"<p>'Vue' integration example: See <code>sample-auth-vue</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> <li> <p>Arcana Auth SDK Usage Guide</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/integrate/wagmi/","title":"Integrate Wagmi App","text":"<p>Wagmi is a React Hooks library for Ethereum that simplifies connecting Web3 apps to multiple wallets and chains. </p> <p>Integrate 'Wagmi' apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"auth/integrate/wagmi/#prerequisites","title":"Prerequisites","text":"<ul> <li>Register the 'Wagmi' app and configure SDK usage settings for social login providers, manage app manage app chains and wallet user experience.</li> </ul> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p>"},{"location":"auth/integrate/wagmi/#steps","title":"Steps","text":""},{"location":"auth/integrate/wagmi/#1-install","title":"1. Install","text":"npmyarn <p>Wagmi 2.0</p> <pre><code>npm install --save @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>npm install --save @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre> <p>Wagmi 2.0</p> <pre><code>yarn add @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>yarn add @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre>"},{"location":"auth/integrate/wagmi/#2-create-authprovider-arcanaconnector","title":"2. Create <code>AuthProvider</code> &amp; <code>ArcanaConnector</code>","text":"<p>Specify the Client ID assigned to the registered app to create the <code>AuthProvider</code>. Then use the <code>AuthProvider</code> to create <code>ArcanaConnector</code>.</p> <pre><code>import { AuthProvider } from \"@arcana/auth\";\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\"\n\nconst auth = new AuthProvider('your-client-id');\n\nconst connector = new ArcanaConnector({ auth });\n</code></pre> <code>AuthProvider</code> Optional Parameters <p>Besides Client ID input parameter, you can optionally customize these settings in the <code>AuthProvider</code> constructor:</p> <p><code>position</code>:  wallet position within the app context - <code>left</code>|<code>right</code></p> <p><code>theme</code>: wallet theme - <code>light</code>|<code>dark</code></p> <p><code>connectOptions</code>: compact mode for the built-in plug-and-play login UI - <code>true</code>|<code>false</code></p> <pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> <p>See <code>AuthProvider</code> constructor parameters for details.</p> <p>Compact Mode</p> <p>While creating the <code>AuthProvider</code>, you can choose the compact mode (optional) for the plug-and-play login UI.</p>"},{"location":"auth/integrate/wagmi/#3-setup-wagmiconfig","title":"3. Setup <code>WagmiConfig</code>","text":"<p>Create Wagmi config and specify the <code>ArcanaConnector</code>. </p> Wagmi 2.0.0Wagmi 1.0.0 <pre><code>import { http, createConfig } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\nimport { coinbaseWallet, injected, walletConnect } from 'wagmi/connectors'\nimport { AuthProvider } from '@arcana/auth';\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\"\n\nlet auth: AuthProvider | null;\n\nif (!auth) {\n  auth = new AuthProvider(\n    \"xar_dev_c2fb7be163754e57d384e24257ea2c8d2a5dd31a\"\n  );\n}\n\nexport const connector = () =&gt; {\n  return new ArcanaConnector({auth,})\n};\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [\n    injected(),\n    coinbaseWallet({ appName: 'Create Wagmi' }),\n    walletConnect({ projectId: import.meta.env.VITE_WC_PROJECT_ID }),\n    connector(),\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n\ndeclare module 'wagmi' {\n  interface Register {\n    config: typeof config\n  }\n}\n</code></pre> <pre><code>// Note:  \n// This sample code is for \n// wagmi versions 1.x.y and auth-wagmi 2.a.b\nimport { configureChains, createConfig, WagmiConfig } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\";\nimport { polygon, polygonAmoy } from \"wagmi/chains\";\nimport { newAuthProvider } from \"./utils/newArcanaAuth\";\nimport { useAccount, useConnect, useDisconnect, useBalance } from 'wagmi'\nimport \"../styles/globals.css\";\n\nconst { chains, provider, webSocketProvider } = configureChains(\n  [mainnet, polygon, polygonAmoy],\n  [publicProvider()],\n  { targetQuorum: 1 }\n);\n\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: newAuthProvider(),\n      login: {\n        provider: \"google\",\n      },\n    },\n  });\n};\n\nconst { chains, publicClient } = configureChains(\n  [polygon, polygonAmoy],\n  [publicProvider()]\n);\n\nexport const wagmiEntity = createConfig({\n  autoConnect: true,\n  connectors: [connector(chains)],\n  publicClient,\n});\n...\n</code></pre> <p>The 'Wagmi' Web3 app is now integrated with the Arcana Auth SDK.</p>"},{"location":"auth/integrate/wagmi/#whats-next","title":"What's Next?","text":"<p>Onboard users via the built-in plug-and-play login UI or a custom login UI.</p> <p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/integrate/wagmi/#see-also","title":"See also","text":"<p>'Wagmi' integration example: See <code>sample-auth-wagmi-2`, `sample-auth-wagmi-viem`, `sample-auth-wagmi</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> <li> <p>Arcana Auth SDK Usage Guide</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth Wagmi SDK Quick Links</p> <ul> <li>Auth Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/integrate/walletconnect/","title":"Integrate WalletConnect App","text":"<p>WalletConnect allows Web3 app users to seamlessly switch between multiple connected wallets within a dApp. </p> <p>Integrate 'WalletConnect' apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"auth/integrate/walletconnect/#prerequisites","title":"Prerequisites","text":"<ul> <li>Register the 'WalletConnect' app and configure SDK usage settings for social login providers, manage app manage app chains and wallet user experience.</li> </ul> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p>"},{"location":"auth/integrate/walletconnect/#steps","title":"Steps","text":""},{"location":"auth/integrate/walletconnect/#1-install","title":"1. Install","text":"npmyarn <p>Wagmi 2.0</p> <pre><code>npm install --save @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>npm install --save @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre> <p>Wagmi 2.0</p> <pre><code>yarn add @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>yarn add @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre>"},{"location":"auth/integrate/walletconnect/#2-create-authprovider-arcanaconnector","title":"2. Create <code>AuthProvider</code> &amp; <code>ArcanaConnector</code>","text":"<code>ArcanaConnector.ts</code> <pre><code>// Set up Arcana Auth \n\nimport { AuthProvider } from \"@arcana/auth\";\n\nlet auth: AuthProvider | null;\n\nconst getAuthProvider = () =&gt; {\n  if (!auth) {\n    auth = new AuthProvider(\n      \"xar_test_b2dde12aad64eb35d72b2c80926338e178b1fa3f\"\n    );\n  }\n  return auth;\n};\n\nexport { getAuthProvider };\n</code></pre> Initialize First! <p>After creating the <code>AuthProvider</code>, wait until the <code>init</code> call is complete before invoking any of the other SDK functions.</p> <pre><code>try {\n  await auth.init()\n} catch (e) {\n  // Handle exception case\n}\n</code></pre> <code>wagmi.ts</code> <pre><code>//This example uses Arcana Wallet connector and Coinbase Wallet\n\nimport { http, createConfig } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\nimport { coinbaseWallet, injected, walletConnect } from 'wagmi/connectors'\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\";\nimport { getAuthProvider } from './arcanaConnector';\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [\n    injected(),\n    coinbaseWallet({ appName: 'Create Wagmi' }),\n    walletConnect({\n      projectId: '3fcc6bba6f1de962d911bb5b5c3dba68', //WalletConnect ProjectID\n    }),\n    ArcanaConnector(\n      {\n        auth: getAuthProvider(),\n      }\n    )\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n\ndeclare module 'wagmi' {\n  interface Register {\n    config: typeof config\n  }\n}\n</code></pre> <code>AuthProvider</code> Optional Parameters <p>Besides Client ID input parameter, you can optionally customize these settings in the <code>AuthProvider</code> constructor:</p> <p><code>position</code>:  wallet position within the app context - <code>left</code>|<code>right</code></p> <p><code>theme</code>: wallet theme - <code>light</code>|<code>dark</code></p> <p><code>connectOptions</code>: compact mode for the built-in plug-and-play login UI - <code>true</code>|<code>false</code></p> <pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> <p>See <code>AuthProvider</code> constructor parameters for details.</p>"},{"location":"auth/integrate/walletconnect/#3-set-up-wagmiprovider","title":"3. Set up <code>WagmiProvider</code>","text":"<p>Create Wagmi config and specify the <code>ArcanaConnector</code>. </p> <code>main.ts</code> <pre><code>//Use \"`auth-wagmi` version &gt; v2.0.0\"\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { Buffer } from 'buffer'\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { WagmiProvider } from 'wagmi'\nimport App from './App.tsx'\nimport { config } from './wagmi.ts'\n\nimport './index.css'\n\nglobalThis.Buffer = Buffer\n\nconst queryClient = new QueryClient()\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  &lt;React.StrictMode&gt;\n    &lt;WagmiProvider config={config}&gt;\n      &lt;QueryClientProvider client={queryClient}&gt;\n        &lt;App /&gt;\n      &lt;/QueryClientProvider&gt;\n    &lt;/WagmiProvider&gt;\n  &lt;/React.StrictMode&gt;,\n)\n</code></pre> <p>The 'WalletConnect' Web3 app is now integrated with the Arcana Auth SDK.</p>"},{"location":"auth/integrate/walletconnect/#whats-next","title":"What's Next?","text":"<p>Onboard users via the built-in plug-and-play login UI or a custom login UI.</p> <p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/integrate/walletconnect/#see-also","title":"See also","text":"<p>'WalletConnect' integration example: See <code>sample-auth-walletconnect</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> <li> <p>Arcana Auth SDK Usage Guide</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth Wagmi SDK Quick Links</p> <ul> <li>Auth Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/integrate/web3-react/","title":"Integrate Web3-React App","text":"<p>Web3-React framework allows Connectors for various Web3 wallets.</p> <p>Integrate 'Web3-React' apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"auth/integrate/web3-react/#prerequisites","title":"Prerequisites","text":"<ul> <li>Register the Wa'Web3-React'gmi app and configure SDK usage settings for social login providers, manage app manage app chains and wallet user experience.</li> </ul> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p>"},{"location":"auth/integrate/web3-react/#steps","title":"Steps","text":""},{"location":"auth/integrate/web3-react/#1-install","title":"1. Install","text":"npmyarn <p>Wagmi 2.0</p> <pre><code>npm install --save @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>npm install --save @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre> <p>Wagmi 2.0</p> <pre><code>yarn add @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>yarn add @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre>"},{"location":"auth/integrate/web3-react/#2-create-authprovider-and-arcanaconnector","title":"2. Create <code>AuthProvider</code> and <code>ArcanaConnector</code>","text":"<pre><code>import { initializeConnector } from \"@web3-react/core\";\nimport { ArcanaConnector } from \"@arcana/auth-web3-react\";\nimport { AuthProvider } from \"@arcana/auth\";\nimport { URLS } from \"../chains\";\n\nconst auth = new AuthProvider(\n  \"xar_test_b2ddexxxxxxxxxxxxxxxxxxxx8b1fa3f\"  //App client ID via Dashboard\n);\nexport const [arcanaConnect, hooks] = initializeConnector&lt;ArcanaConnector&gt;(\n  (actions) =&gt;\n    new ArcanaConnector(auth, {\n      actions,\n    })\n);\n...\n</code></pre>"},{"location":"auth/integrate/web3-react/#3-arcanaconnectcard-component","title":"3. <code>ArcanaConnectCard</code> Component","text":"<p>In the Web3-React app, use the <code>ArcanaConnector</code> and React hooks to connect <code>ArcanaConnector</code> with the Web3-React ecosystem via <code>ArcanaConnectCard</code>.</p> <pre><code>import { useEffect, useState } from \"react\";\n\nimport { MAINNET_CHAINS } from \"../../chains\";\nimport { hooks, arcanaConnect } from \"../../connectors/arcanaWallet\";\nimport { Card } from \"../Card\";\n\nconst CHAIN_IDS = Object.keys(MAINNET_CHAINS).map(Number);\n\nconst {\n  useChainId,\n  useAccounts,\n  useIsActivating,\n  useIsActive,\n  useProvider,\n  useENSNames,\n} = hooks;\n\nexport default function ArcanaConnectCard() {\n  const chainId = useChainId();\n  const accounts = useAccounts();\n  const isActivating = useIsActivating();\n\n  const isActive = useIsActive();\n\n  const provider = useProvider();\n  const ENSNames = useENSNames(provider);\n\n  const [error, setError] = useState(undefined);\n\n  // attempt to connect eagerly on mount\n  useEffect(() =&gt; {\n    arcanaConnect.connectEagerly().catch((error) =&gt; {\n      console.debug(\"Failed to connect eagerly to arcanaConnect\", error);\n    });\n  }, []);\n\n  return (\n    &lt;Card\n      connector={arcanaConnect}\n      activeChainId={chainId}\n      chainIds={CHAIN_IDS}\n      isActivating={isActivating}\n      isActive={isActive}\n      error={error}\n      setError={setError}\n      accounts={accounts}\n      provider={provider}\n      ENSNames={ENSNames}\n    /&gt;\n  );\n}\n</code></pre> <p>Now, you are all set to onboard users in the Web3-React app using the plug-and-play login UI and enable Arcana wallet for the authenticated users.</p> pages/index.tsx<pre><code>import ArcanaConnectCard from \"../components/connectorCards/ArcanaConnectCard\";\nimport CoinbaseWalletCard from \"../components/connectorCards/CoinbaseWalletCard\";\nimport GnosisSafeCard from \"../components/connectorCards/GnosisSafeCard\";\nimport MetaMaskCard from \"../components/connectorCards/MetaMaskCard\";\nimport NetworkCard from \"../components/connectorCards/NetworkCard\";\nimport WalletConnectCard from \"../components/connectorCards/WalletConnectCard\";\nimport WalletConnectV2Card from \"../components/connectorCards/WalletConnectV2Card\";\nimport ProviderExample from \"../components/ProviderExample\";\n\nexport default function Home() {\n  return (\n      &lt;&gt;\n      &lt;ProviderExample /&gt;\n      &lt;div&gt;\n        &lt;MetaMaskCard /&gt;\n        &lt;WalletConnectV2Card /&gt;\n        &lt;WalletConnectCard /&gt;\n        &lt;CoinbaseWalletCard /&gt;\n        &lt;NetworkCard /&gt;\n        &lt;GnosisSafeCard /&gt;\n        &lt;ArcanaConnectCard /&gt;\n      &lt;/div&gt;\n      );\n      &lt;/&gt;\n}\n</code></pre> <p>The 'Web3-React' Web3 app is now integrated with the Arcana Auth SDK.</p>"},{"location":"auth/integrate/web3-react/#whats-next","title":"What's Next?","text":"<p>Onboard users via the built-in plug-and-play login UI or a custom login UI.</p> <p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/integrate/web3-react/#see-also","title":"See also","text":"<p>'Web3-React' integration example: See <code>sample-auth-web3-react</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> <li> <p>Arcana Auth SDK Usage Guide</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth Wagmi SDK Quick Links</p> <ul> <li>Auth Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/introduction/auth-architecture/","title":"Architecture: Auth","text":"<p>Arcana Auth SDK allows Web3 app developers to onboard app users at scale using social and passwordless login. Authenticated users can instantly access the embedded, non-custodial Arcana wallet from within the app's context. Developers can whitelist app operations and enable gasless transactions through the Arcana wallet or third-party wallets.</p> <p>Here is a high-level overview of the technical architecture and components that power the Arcana Auth SDK.</p>"},{"location":"auth/introduction/auth-architecture/#auth-components","title":"Auth Components","text":"<ul> <li>Arcana Developer Dashboard</li> <li>Arcana Gateway</li> <li>Arcana Auth SDK</li> <li>Asynchronous Distributed Key Generation (ADKG)</li> <li>Arcana Auth protocol (Back-end Subsystem)</li> </ul> Auth Components"},{"location":"auth/introduction/auth-architecture/#arcana-developer-dashboard","title":"Arcana Developer Dashboard","text":"<p>Arcana Developer Dashboard is the user interface offered to Web3 app developers for registering an app and configuring the authentication providers and gasless transaction usage settings as per the app requirements. </p>"},{"location":"auth/introduction/auth-architecture/#arcana-gateway","title":"Arcana Gateway","text":"<p>The Gateway is one of the key back-end components that works with the Arcana Developer Dashboard as well as the SDK integrated with the app. It is responsible for storing and managing SDK usage configuration details for various apps and manages developer accounts, app usage and billing, etc. </p> <p>All transactions initiated by the Arcana wallet are processed via the Gateway. It also handles gasless transactions for the Arcana wallet.</p>"},{"location":"auth/introduction/auth-architecture/#arcana-auth-sdk","title":"Arcana Auth SDK","text":"<p>The Arcana Auth SDK integrates with the app and enables user onboarding through social login providers, IAM providers, and passwordless login. It also enables Web3 operations through the embedded Arcana wallet.</p>"},{"location":"auth/introduction/auth-architecture/#asynchronous-distributed-key-generation-adkg","title":"Asynchronous Distributed Key Generation (ADKG)","text":"<p>A core back-end component that generates and manages key shares securely. It works with the SDK integrated with the app to securely dispense key shares. Some of the nodes running ADKG logic are owned by trusted third-party validators. In the future, we plan to make this component fully decentralized.</p>"},{"location":"auth/introduction/auth-architecture/#arcana-auth-protocol-back-end-subsystem","title":"Arcana Auth protocol (Back-end Subsystem)","text":"<p>This refers to a bunch of entities in the back-end that implement the core system logic and algorithms on blockchain using Arcana smart contracts.</p> <p>See Arcana Technical White paper for details.</p>"},{"location":"auth/introduction/use-cases/","title":"Arcana Auth Use Cases","text":"<p>The Arcana Auth SDK allows developers to supercharge their Web3 apps with plug-and-play user authentication. Also, authenticated app users can instantly access the in-app, self-custodial Arcana wallet to securely sign blockchain transactions without having to install any browser extension or manage keys.</p> <p>Web3 developers can integrate apps with the Arcana Auth SDK to:</p> <ul> <li>Authenticate and onboard users with social login</li> <li>Automatically enable in-app wallet for authenticated users to sign blockchain transactions</li> <li>Monitor app usage</li> </ul>"},{"location":"auth/introduction/use-cases/#user-authentication","title":"User Authentication","text":"<ul> <li> <p>Plug-and-Play Auth: Onboard users with a single line of code. Call <code>connect</code> method to bring up plug-and-play login UI that displays the configured Web2 social login providers, IAM providers and passwordless login options.</p> </li> <li> <p>Build-your-own-Auth-UI: Create your own login UX and call <code>loginWithSocial</code> method to enable authentication via popular Web2 social login providers, <code>loginWithBearer</code> for IAM providers. Use <code>loginWithLink</code> (deprecated), <code>loginWithOTPStart</code>, and <code>loginWithOTPComplete</code> methods for onboarding users via the passwordless option.</p> </li> <li> <p>Customize Onboarding: Choose which providers/login options are visible to the user at the time of logging into the Web3 application.</p> </li> </ul>"},{"location":"auth/introduction/use-cases/#sign-blockchain-transactions","title":"Sign Blockchain Transactions","text":"<ul> <li> <p>Accessible &amp; Secure Wallet: Enable authenticated app users to sign blockchain transactions without having to learn the Web3 nuances or expose them to tedious key management hoops. At the same time, provide a secure wallet that works only in the context of an app for an authenticated user.</p> </li> <li> <p>Customize Wallet Usage Experience: Control the Arcana wallet visibility by choosing whether it should be always visible in the context of a Web3 application or whether it shows up only when a blockchain transaction is triggered.</p> </li> <li> <p>Wallet Branding: Allows Web3 application developers to customize the Arcana wallet theme.</p> </li> <li> <p>No Browser Extension Deployment: Arcana Auth SDK allows quick wallet onboarding for users without any prior need to generate Web3 keys or install any wallet or browser extension to onboard Web3 apps.</p> </li> <li> <p>Web3 Wallet Operations: Enable typical wallet functions in the application for authenticated users:</p> <ul> <li>Sign blockchain transactions</li> <li>Send Transaction</li> <li>Send/Receive native, custom tokens</li> <li>Send/Receive NFTs</li> <li>Browse NFTs, view NFT details</li> <li>Add supported networks</li> <li>Switch networks</li> <li>Monitor transaction activity</li> <li>JSON-RPC method support</li> <li>Buy crypto via fiat/on-ramp providers</li> </ul> </li> </ul>"},{"location":"auth/introduction/use-cases/#monitor-app-usage","title":"Monitor App Usage","text":"<ul> <li> <p>Register Apps: Developers can register and configure the Arcana Auth SDK usage and wallet user experience by using the Arcana Developer Dashboard as per their app requirements.</p> </li> <li> <p>Monitor App Usage: Developers can manage and monitor application usage in terms of Monthly Active Users (MAU). They can also configure how apps are deployed on the Arcana Testnet and Mainnet. Billing is done only for Arcana Mainnet usage. Usage across all apps deployed on Mainnet can be tracked by the developers.</p> </li> </ul>"},{"location":"auth/introduction/use-cases/#secure-with-mfa","title":"Secure with MFA","text":"<p>Gaming, DeFi and other Web3 apps that deal with user's crypto assets, NFTs can further secure user data by utilizing the MFA feature. A user can set up various recovery methods for their wallet to enhance security. Whenever they try to log in from a new device they will have to provide one of the two in order to login. The Arcana Auth SDK works across devices and browsers.</p>"},{"location":"auth/introduction/why-auth-sdk/","title":"Why Auth SDK?","text":"<p>At Arcana, our mission is to build an ecosystem of components that enables developers to build Web3 applications quickly, securely, and with complete data privacy and ownership for application users.</p> <p>This is totally unlike Web2, where user data is owned by the applications and corporations. Web2 users have no control over who sees or accesses their data.</p>"},{"location":"auth/introduction/why-auth-sdk/#privacy-preserving-applications","title":"Privacy-Preserving Applications","text":"<p>If you are building Web3 apps that require complete data privacy, and security, the Arcana SDKs does the heavy lifting for you to onboard users using popular authentication providers and passwordless options. It allows authenticated users to sign blockchain transactions, manage tokens, and more without having to bother about the Web3 secret and key management complexities.</p> <p>At Arcana, we take security, privacy, and ownership seriously. We are actively working towards tracking and plugging in any vulnerabilities in our solution.</p> <p>Take a quick look at the overview of the architecture and key components of the {{ no such element: dict object['product_name'] }} and see Arcana Network Technical White Paper v1.0 for implementation details.</p>"},{"location":"auth/introduction/why-auth-sdk/#build-web3-apps-faster","title":"Build Web3 Apps Faster","text":"<p>As a Web3 app developer, you can focus on core application logic while delegating essential tasks related to end-user onboarding, signing blockchain transactions, and managing the security and privacy of user access to the {{ no such element: dict object['product_name'] }} product.</p>"},{"location":"auth/introduction/why-auth-sdk/#1-onboard-app-users-effortlessly","title":"1. Onboard App Users Effortlessly","text":"<p>Developers can plug in the popular Web2 sign-up/login mechanisms in the Web3 apps and lower the barrier to entry for Web3 users. </p> <p>To onboard users in a Web3 app, the Arcana Auth SDK allows developers to select and configure user authentication providers for the app. Developers can choose the default, built-in plug-and-play user authentication UI via <code>connect</code> function of the Arcana Auth SDK. Or, they can customize and build a custom user authentication UI, add a few lines of code to call <code>loginWithSocial</code>, <code>loginWithLink</code>(deprecated), <code>loginWithOTPStart</code> and <code>loginWithOTPComplete</code> functions to onboard users.</p> <p>Read more about the plug-and-play feature, and how to onboard users via the built-in, plug-and-play login UI or custom login UI.</p> <p>Before you can integrate an app with the Arcana Auth SDK, developers must use the Arcana Developer Dashboard and configure onboarding options and user experience for signing blockchain transactions. Learn about authentication providers, and how to configure authentication providers using the Arcana Developer Dashboard.</p>"},{"location":"auth/introduction/why-auth-sdk/#2-sign-blockchain-transactions-securely","title":"2. Sign blockchain transactions securely","text":"<p>Allow authenticated Web3 application users to securely sign blockchain operations without bothering about managing secrets and keys. No centralized authority manages user keys in the {{ no such element: dict object['product_name'] }} DKG subsystem. Use the embedded, non-custodial Arcana wallet provided by the Arcana Auth SDK to let the authenticated users review and sign blockchain transactions. </p> <p>Read more about the Arcana wallet features and how to transact using the Arcana wallet. Check out the Arcana wallet User Guide to learn more about various Web3 wallet operations that can be accessed by the application users.</p>"},{"location":"auth/introduction/why-auth-sdk/#flexibility-choice","title":"Flexibility &amp; Choice","text":"<p>Tailor the user experience for your Web3 applications as per your use case and target audience. Learn more about the [[use-cases|{{ no such element: dict object['product_name'] }} Use Cases]].</p>"},{"location":"auth/introduction/why-auth-sdk/#see-also","title":"See Also","text":"<ul> <li>Social Login Demo App</li> <li>Arcana Auth SDK Usage Guide</li> <li>Auth SDK Reference</li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul>"},{"location":"auth/mobile/flutter-get-started/","title":"Get Started: Flutter Apps","text":"<p>'Flutter' Web3 apps can onboard users via social login by integrating with the Arcana Auth Flutter SDK!</p>"},{"location":"auth/mobile/flutter-get-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Flutter v3.15.0 or higher</li> </ul>"},{"location":"auth/mobile/flutter-get-started/#1-register-configure","title":"1. Register &amp; Configure","text":"<ul> <li>App must be registered via the Arcana Developer Dashboard: https://dashboard.arcana.network </li> <li>Optionally configure auth settings such as social login,  wallet user experience, etc.</li> </ul>"},{"location":"auth/mobile/flutter-get-started/#2-install-sdk","title":"2. Install SDK","text":"<p>The Arcana Auth Flutter SDK is available at 'Pub.dev' as a Flutter plugin package called <code>arcana_auth_flutter</code>. </p> <p>Add the following line to the dependencies section in your app's <code>pubspec.yaml</code> file:</p> pubspec.yaml<pre><code>dependencies:\n  flutter:       # Required for every Flutter project\n    sdk: flutter # Required for every Flutter project\n  flutter_localizations: # Required to enable localization\n    sdk: flutter         # Required to enable localization\n  arcana_auth_flutter: ^0.0.6 \n</code></pre> <p>Use latest Arcana Auth Flutter SDK</p> <p>Use latest Arcana Auth Flutter SDK release v0.0.6 available at pub.dev.</p>"},{"location":"auth/mobile/flutter-get-started/#3-integrate","title":"3. Integrate","text":"<p>Once installed, integrate the app with the Arcana Auth Flutter SDK. Create an <code>AuthProvider</code> instance and specify the unique client ID assigned to the registered app.</p> <pre><code>import 'package:arcana_sdk/arcana_sdk.dart';\n\nfinal auth = AuthProvider(clientId:\"xar_xxxx_...\");\nauth.init(context: context);\n</code></pre> <p>Next, add code to onboard users and allow authenticated users to sign blockchain transactions using Arcana wallet.</p>"},{"location":"auth/mobile/flutter-get-started/#onboard-users","title":"Onboard Users","text":"<p>Add code to onboard users through one of the configured social login providers or via OTP login option. </p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p> LoginUser InfoWallet VisibilityCache <p>Social Login</p> <pre><code>auth.loginWithSocial(\"google\").then((_) =&gt; {\n// On login Success\n}).catchError(...);\n</code></pre> <p>OTP Login</p> <pre><code>auth.loginWithOTP(\"${email_id}\").then((_) =&gt; {\n// On login Success\n}).catchError(...);\n</code></pre> <p>Logout</p> <p>Call the logout method in response to a user's choice to log out. The built-in Arcana wallet UI has a Logout option in the user profile tab.</p> <pre><code>auth.logout().then((_) =&gt; {\n// On logout\n});\n</code></pre> <p>Get User Address</p> <pre><code>auth.getAccount().then((account) =&gt; ...);\n</code></pre> <p>Get User Details</p> <pre><code>auth.getUserInfo().then((UserInfo info) =&gt; ...);\n</code></pre> <p>Show/Hide Wallet UI</p> <p>Developers can choose to show or hide the wallet as per the app requirements. </p> <pre><code>auth.showWallet();\n</code></pre> <pre><code>auth.hideWallet();\n</code></pre> <p>Check Wallet Visibility</p> <p>To determine in the Flutter app if the Arcana wallet is visible in the app's context, get the visibility status:</p> <pre><code>var isVisible = auth.isVisible();\n</code></pre> <p>Clear Cache</p> <p>Flutter apps can use <code>clearCache</code> to clear the Webview cache:</p> <pre><code>auth.clearCache();\n</code></pre>"},{"location":"auth/mobile/flutter-get-started/#sign-transactions","title":"Sign Transactions","text":"<p>The <code>AuthProvider</code> supports the JSON-RPC requests for the following Web3 operations:</p> EIP-1193 RequestSendTransaction <pre><code>auth.request(method: \"...\", params: [...]).then(() =&gt; ...);\n</code></pre> <pre><code>auth.sendTransaction({ to: \"\", value: \"\" }).then((hash) =&gt; ...);\n</code></pre>"},{"location":"auth/mobile/flutter-get-started/#4-deploy","title":"4. Deploy","text":"<p>That's all! </p> <p>The 'Flutter' app is ready to onboard users and allow them to sign blockchain transactions.</p>"},{"location":"auth/mobile/flutter-get-started/#see-also","title":"See also","text":"<ul> <li>'Flutter' integration example: See <code>sample-auth-flutter</code> submodule in SDK Example GitHub repository.</li> </ul> <p>Arcana Auth Flutter SDK Quick Links</p> <ul> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul>"},{"location":"auth/mobile/react-native-get-started/","title":"Get Started: React-Native Apps","text":"<p>'React-Native' Web3 apps can onboard users via social login by integrating with the Arcana Auth React-Native SDK!</p>"},{"location":"auth/mobile/react-native-get-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>React-Native v0.71.8 or higher</li> </ul>"},{"location":"auth/mobile/react-native-get-started/#1-register-configure","title":"1. Register &amp; Configure","text":"<ul> <li>App must be registered via the Arcana Developer Dashboard: https://dashboard.arcana.network </li> <li>Optionally configure auth settings such as social login,  wallet user experience, etc.</li> </ul>"},{"location":"auth/mobile/react-native-get-started/#2-install-sdk","title":"2. Install SDK","text":"<p>For 'React-Native' Web3 apps, install the <code>auth-react-native</code> package.</p> <pre><code>npm i @arcana/auth-react-native\n(cd ios &amp;&amp; pod install)\n</code></pre> <p>Note: You are not required to manually link this module, as it supports React Native auto-linking.</p> <p>Use latest SDKs</p> <p>Use the latest Arcana Auth React-Native SDK release v0.0.4 available at npm.</p>"},{"location":"auth/mobile/react-native-get-started/#3-integrate","title":"3. Integrate","text":"<p>Use the unique client ID assigned to the app during registration to integrate with the SDK.</p> <pre><code>import React, { useState } from \"react\";\nimport { Button, View } from \"react-native\";\nimport Auth from \"@arcana/auth-react-native\";\n\nexport default function App() {\n  const authRef = React.useRef(null);\n\n  return (\n    &lt;View &gt;\n      &lt;Auth clientId=\"xar_test_xxx\" theme=\"light\" ref={authRef} /&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre> <pre><code>&lt;Auth clientId=\"xar_test_xxx\" theme=\"dark\" /&gt;\n</code></pre>"},{"location":"auth/mobile/react-native-get-started/#onboard-users","title":"Onboard Users","text":"<p>Call <code>Auth</code> functions and onboard users through the configured authentication providers.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p> LoginUser InfoEvent Handling <p>Google Login*</p> <pre><code>// For logging in\nconst loginWithGoogle = () =&gt; {\n  if(authRef !== null){\n    authRef.current.loginWithSocial('google').then(() =&gt; {\n      // logged in\n    }).catch(err =&gt; {\n      // already logged in\n      // or error during login\n    }) \n  }\n}\n</code></pre> <p>Logout</p> <p>Add code to provide user log out option via the <code>logout</code> method or let authenticated users log out using the wallet UI logout option in the 'User Profile' tab.</p> <pre><code>// Logout User from session\nconst logout = () =&gt; {\n  if(authRef !== null){\n    authRef.current.logout().then(() =&gt; {\n      // on logout\n    });\n  }\n};\n</code></pre> <p>Show/Hide Wallet</p> <p>Once the user logs into the app, they can instantly access the Arcana wallet. Developers can choose to show and hide the wallet as required by the app.</p> <pre><code>// For showing wallet\nconst showWallet = () =&gt; {\n  if(authRef !== null){\n    authRef.current.showWallet();\n  }\n}\n\n// For hiding wallet\nconst hideWallet = () =&gt; {\n  if(authRef !== null){\n    authRef.current.hideWallet();\n  }\n}\n</code></pre> <pre><code>// For getting logged in user info\nconst getUserInfo = async () =&gt; {\n  if(authRef !== null){\n    return authRef.current.getUserInfo();\n  }\n};\n</code></pre> <pre><code>// For getting current account\nconst getAccount = async () =&gt; {\n  if(authRef !== null){\n    return await authRef.current.getAccount();\n  }\n};\n</code></pre> <pre><code>return (\n    &lt;View &gt;\n      &lt;Button\n        title={\"Get User Info\"}\n        onPress={() =&gt;\n          getUserInfo()\n        }\n      /&gt;\n      &lt;Button\n        title={\"Send Transaction\"}\n        onPress={() =&gt;\n          sendTransaction({ to: '', value: '', data: '' })\n        }\n      /&gt;\n        &lt;Button\n        title={\"Get Account\"}\n        onPress={() =&gt;\n          getAccount()\n        }\n      /&gt;\n\n        &lt;Button\n        title={\"Send Request\"}\n        onPress={() =&gt;{\n          sendRequest({ method:\"\", params:[] })\n        }}\n      /&gt;\n      &lt;Button\n        title={\"log out\"}\n        onPress={() =&gt; logout()}\n      /&gt;\n      &lt;Auth\n          clientId=\"xar_test_....\"\n          theme=\"dark\"\n          ref={authRef}\n      /&gt;\n    &lt;/View&gt;\n  );\n</code></pre>"},{"location":"auth/mobile/react-native-get-started/#sign-transactions","title":"Sign Transactions","text":"<p>Use <code>authRef</code> EIP-1193 provider to call JSON-RPC functions and Web3 wallet operations.</p> <pre><code>// For sending transaction\nconst sendTransaction = async data =&gt; {\n  if(authRef !== null){\n    return await authRef.current.sendTransaction(data);\n  }\n};\n\n// For getting current account balance\nconst getBalance = async () =&gt; {\n  if(authRef !== null){\n    return await authRef.current.getBalance();\n  }\n};\n\n// EIP 1193 request method\nconst request = async (method, params) =&gt; {\n  if(authRef !== null){\n    return await authRef.current.request({ method, params });\n  }\n};\n</code></pre>"},{"location":"auth/mobile/react-native-get-started/#4-deploy","title":"4.  Deploy","text":"<p>That's all! </p> <p>The 'React-Native' app is ready to onboard users and allow them to sign blockchain transactions.</p>"},{"location":"auth/mobile/react-native-get-started/#see-also","title":"See also","text":"<ul> <li>'React-Native' integration example: See <code>sample-auth-react-native</code> submodule in SDK Example GitHub repository.</li> </ul> <p>Arcana Auth React-Native SDK Quick Links</p> <ul> <li>Release notes</li> <li>Changelog</li> <li>Download auth-react-native</li> </ul>"},{"location":"auth/onboard/mvx/","title":"MultiversX App: Onboard Users","text":"<p>Learn how to onboard users through the configured social login providers in a 'MultiversX' app. </p>"},{"location":"auth/onboard/mvx/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the 'MultiversX' app and configure SDK usage settings for social login providers, manage MultiversX chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages for 'MultiversX'.</p> </li> <li> <p>Integrate 'MultiversX' app and obtain an <code>AuthProvider</code> for blockchain transactions.</p> </li> </ul> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p> MultiversX Shard Selection <p>MultiversX uses adaptive state sharding for horizontal scaling. Shards allow it to process far more transactions through parallelization, improving transaction throughput and efficiency. </p> <p>Choose your shard once when registering a MultiversX app on the Arcana Developer Dashboard. It cannot be changed later.</p> <p>By default, Arcana uses 'Shard 0' to deploy all app contracts and allocate wallet addresses for users. The benefit is that when addresses from the same shard interact with contracts on the same shard, latencies are much lower than in cross-shard interactions.</p>"},{"location":"auth/onboard/mvx/#onboard-users","title":"Onboard Users","text":"User Onboarding Considerations <ol> <li> <p>Log in Options: What options are offered by the app to the onboard users via social login? Configure the required social login providers via the dashboard.</p> </li> <li> <p>Built-in or Custom Login UI: Does the Web3 app have a custom login UI or do they need to use the built-in, plug-and-play login UI modal offered by the Arcana Auth SDK? Choose the appropriate onboarding functions of the <code>AuthProvider</code>.</p> </li> <li> <p>Session Management: Does the authenticated user stay logged in if they accidentally close the browser tab? If yes, what is the acceptable Web3 app security window for the session? After how long should the session expire and a user re-login is necessitated for security? Configure the session management settings via the dashboard.</p> </li> <li> <p>Reconnect: Does the Web3 app allow users to stay connected or require re-authentication after a certain time has elapsed? Use <code>isConnected</code>,  <code>canReconnect</code> and <code>reconnect</code> functions of the <code>AuthProvider</code>.</p> </li> </ol> Built-in Login UICustom Login UI <p>  Wagmi Apps  RainbowKit Apps   WalletConnect Apps   Web3-React Apps  React/Next.js Apps  Vanilla HTML/CSS/JS App  Vue App  Flutter Apps  React-Native Apps</p> <p>  Wagmi Apps  RainbowKit Apps   WalletConnect Apps   Web3-React Apps  React/Next.js Apps  Vanilla HTML/CSS/JS App  Vue App  Flutter Apps  React-Native Apps</p>"},{"location":"auth/onboard/mvx/#advanced","title":"Advanced","text":"Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p> Global vs. App Specific Keys <p>Apps using app-specific keys must use a custom login UI that allows users to input the OTP. In this case, the <code>isCompleteRequired</code> boolean returns <code>true</code> after initiating login with OTP.</p> <p>Apps using global keys are not required to use a custom login UI. A built-in login UI is automatically displayed for the user for OTP. Users must enter the OTP received via email in this UI.</p> MFA Enabled / Disabled <p>During passwordless login via OTP, apps configured for MFA and those using overlays must hide it to enable OTP input. Use the <code>isMFARequired</code> callback in the <code>loginWithOTPComplete</code> method to hide the overlay.</p> Reconnect Users <p>Use <code>canReconnect</code> and <code>reconnect</code> methods of <code>AuthProvider</code> within a 30-min window of the user-logout action. Allow users to automatically reconnect to the app without re-authentication. </p> <p>See <code>canReconnect</code> and <code>reconnect</code> for details.</p> Apps Using Custom Auth <p>Web3 apps that use custom user authentication solutions and require authenticated users to sign blockchain transactions can also integrate with the Arcana Auth SDK. These apps can skip the social onboarding feature and use <code>loginWithCustomProvider</code> function of the <code>AuthProvider</code> to assign keys securely. Learn more...</p>"},{"location":"auth/onboard/mvx/#whats-next","title":"What's Next?","text":"<p>Use the EIP-1193 provider offered by the SDK to call JSON/RPC functions and other supported Web3 wallet operations on MultiversX in the authenticated user's context.</p>"},{"location":"auth/onboard/mvx/#see-also","title":"See Also","text":"<p>'MultiversX' integration example: See <code>sample-auth-mvx</code> submodule in SDK Example GitHub repository.</p> <ul> <li>MultiversX FAQ</li> </ul> <p>Try Demo App </p>"},{"location":"auth/onboard/near/","title":"Near App: Onboard Users","text":"<p>Learn how to onboard users through the configured social login providers in a 'Near' app. </p>"},{"location":"auth/onboard/near/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the 'Near' app and configure SDK usage settings for social login providers, manage Near chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages for 'Near'.</p> </li> <li> <p>Integrate 'Near' app and create <code>AuthProvider</code>, <code>ArcanaConnector</code> as per the app type.</p> </li> </ul> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p>"},{"location":"auth/onboard/near/#onboard-users","title":"Onboard Users","text":"User Onboarding Considerations <ol> <li> <p>Log in Options: What options are offered by the app to the onboard users via social login? Configure the required social login providers via the dashboard.</p> </li> <li> <p>Built-in or Custom Login UI: Does the Web3 app have a custom login UI or do they need to use the built-in, plug-and-play login UI modal offered by the Arcana Auth SDK? Choose the appropriate onboarding functions of the <code>AuthProvider</code>.</p> </li> <li> <p>Session Management: Does the authenticated user stay logged in if they accidentally close the browser tab? If yes, what is the acceptable Web3 app security window for the session? After how long should the session expire and a user re-login is necessitated for security? Configure the session management settings via the dashboard.</p> </li> <li> <p>Reconnect: Does the Web3 app allow users to stay connected or require re-authentication after a certain time has elapsed? Use <code>isConnected</code>,  <code>canReconnect</code> and <code>reconnect</code> functions of the <code>AuthProvider</code>.</p> </li> </ol> Built-in Login UICustom Login UI <p>  Wagmi Apps  RainbowKit Apps   WalletConnect Apps   Web3-React Apps  React/Next.js Apps  Vanilla HTML/CSS/JS App  Vue App  Flutter Apps  React-Native Apps</p> <p>  Wagmi Apps  RainbowKit Apps   WalletConnect Apps   Web3-React Apps  React/Next.js Apps  Vanilla HTML/CSS/JS App  Vue App  Flutter Apps  React-Native Apps</p>"},{"location":"auth/onboard/near/#advanced","title":"Advanced","text":"Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p> Global vs. App Specific Keys <p>Apps using app-specific keys must use a custom login UI that allows users to input the OTP. In this case, the <code>isCompleteRequired</code> boolean returns <code>true</code> after initiating login with OTP.</p> <p>Apps using global keys are not required to use a custom login UI. A built-in login UI is automatically displayed for the user for OTP. Users must enter the OTP received via email in this UI.</p> MFA Enabled / Disabled <p>During passwordless login via OTP, apps configured for MFA and those using overlays must hide it to enable OTP input. Use the <code>isMFARequired</code> callback in the <code>loginWithOTPComplete</code> method to hide the overlay.</p> Reconnect Users <p>Use <code>canReconnect</code> and <code>reconnect</code> methods of <code>AuthProvider</code> within a 30-min window of the user-logout action. Allow users to automatically reconnect to the app without re-authentication. </p> <p>See <code>canReconnect</code> and <code>reconnect</code> for details.</p> Apps Using Custom Auth <p>Web3 apps that use custom user authentication solutions and require authenticated users to sign blockchain transactions can also integrate with the Arcana Auth SDK. These apps can skip the social onboarding feature and use <code>loginWithCustomProvider</code> function of the <code>AuthProvider</code> to assign keys securely. Learn more...</p>"},{"location":"auth/onboard/near/#whats-next","title":"What's Next?","text":"<p>Use the EIP-1193 provider offered by the SDK to call JSON/RPC functions and other supported Web3 wallet operations on Near in the authenticated user's context.</p>"},{"location":"auth/onboard/near/#see-also","title":"See also","text":"<p>'Near' integration example: See <code>sample-auth-near</code> submodule in SDK Example GitHub repository.</p> <ul> <li>Near FAQ</li> </ul> <p>Try Demo App </p>"},{"location":"auth/onboard/solana/","title":"Solana App: Onboard Users","text":"<p>Learn how to onboard users through the configured social login providers in a 'Solana' app. </p>"},{"location":"auth/onboard/solana/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the 'Solana' app and configure SDK usage settings for social login providers, manage Solana chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages for 'Solana'.</p> </li> <li> <p>Integrate 'Solana' app and create <code>AuthProvider</code>, <code>ArcanaConnector</code> as per the app type.</p> </li> </ul> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p>"},{"location":"auth/onboard/solana/#onboard-users","title":"Onboard Users","text":"User Onboarding Considerations <ol> <li> <p>Log in Options: What options are offered by the app to the onboard users via social login? Configure the required social login providers via the dashboard.</p> </li> <li> <p>Built-in or Custom Login UI: Does the Web3 app have a custom login UI or do they need to use the built-in, plug-and-play login UI modal offered by the Arcana Auth SDK? Choose the appropriate onboarding functions of the <code>AuthProvider</code>.</p> </li> <li> <p>Session Management: Does the authenticated user stay logged in if they accidentally close the browser tab? If yes, what is the acceptable Web3 app security window for the session? After how long should the session expire and a user re-login is necessitated for security? Configure the session management settings via the dashboard.</p> </li> <li> <p>Reconnect: Does the Web3 app allow users to stay connected or require re-authentication after a certain time has elapsed? Use <code>isConnected</code>,  <code>canReconnect</code> and <code>reconnect</code> functions of the <code>AuthProvider</code>.</p> </li> </ol> Built-in Login UICustom Login UI <p>  Wagmi Apps  RainbowKit Apps   WalletConnect Apps   Web3-React Apps  React/Next.js Apps  Vanilla HTML/CSS/JS App  Vue App  Flutter Apps  React-Native Apps</p> <p>  Wagmi Apps  RainbowKit Apps   WalletConnect Apps   Web3-React Apps  React/Next.js Apps  Vanilla HTML/CSS/JS App  Vue App  Flutter Apps  React-Native Apps</p>"},{"location":"auth/onboard/solana/#advanced","title":"Advanced","text":"Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p> Global vs. App Specific Keys <p>Apps using app-specific keys must use a custom login UI that allows users to input the OTP. In this case, the <code>isCompleteRequired</code> boolean returns <code>true</code> after initiating login with OTP.</p> <p>Apps using global keys are not required to use a custom login UI. A built-in login UI is automatically displayed for the user for OTP. Users must enter the OTP received via email in this UI.</p> MFA Enabled / Disabled <p>During passwordless login via OTP, apps configured for MFA and those using overlays must hide it to enable OTP input. Use the <code>isMFARequired</code> callback in the <code>loginWithOTPComplete</code> method to hide the overlay.</p> Reconnect Users <p>Use <code>canReconnect</code> and <code>reconnect</code> methods of <code>AuthProvider</code> within a 30-min window of the user-logout action. Allow users to automatically reconnect to the app without re-authentication. </p> <p>See <code>canReconnect</code> and <code>reconnect</code> for details.</p> Apps Using Custom Auth <p>Web3 apps that use custom user authentication solutions and require authenticated users to sign blockchain transactions can also integrate with the Arcana Auth SDK. These apps can skip the social onboarding feature and use <code>loginWithCustomProvider</code> function of the <code>AuthProvider</code> to assign keys securely. Learn more...</p>"},{"location":"auth/onboard/solana/#whats-next","title":"What's Next?","text":"<p>Use the EIP-1193 provider offered by the SDK to call JSON/RPC functions and other supported Web3 wallet operations for Solana in the authenticated user's context.</p>"},{"location":"auth/onboard/solana/#see-also","title":"See also","text":"<p>'Solana' integration example: See <code>sample-auth-solana</code> submodule in SDK Example GitHub repository.</p> <ul> <li>Solana FAQ</li> </ul> <p>Try Demo App </p>"},{"location":"auth/onboard/unity/","title":"Unity App: Onboard Users","text":"<p>Learn how to onboard users via social login in a Web3 Unity gaming app integrated with the Arcana Auth Unity SDK and allow authenticated users to access the Arcana wallet within the app context.</p>"},{"location":"auth/onboard/unity/#prerequisites","title":"Prerequisites","text":"<ul> <li>The Unity Web3 gaming App must be integrated with the Arcana Auth Unity SDK.</li> </ul>"},{"location":"auth/onboard/unity/#onboarding-users","title":"Onboarding Users","text":"<p>Follow these steps to onboard users in a Unity Web3 gaming app with the Arcana Auth Unity SDK and allow authenticated users to access the Arcana wallet.</p> <p>Call <code>LoginWithSocial</code> or <code>LoginWithOTP</code> to onboard the user. Choose one of the supported user onboarding options such as Google, Steam, etc.</p> <pre><code>// After initializing the SDK\n\nif (loginMethod == LoginMethod.Passwordless)\n  arcanaSDK.LoginWithOTP(email);\nelse\n  arcanaSDK.LoginWithSocial(loginMethod);\n</code></pre> <p>That is all. </p> <p>The Unity Web3 gaming app can now onboard users via the configured social login providers.</p>"},{"location":"auth/onboard/unity/#whats-next","title":"What's Next?","text":"<p>After adding code to onboard users in a Unity Web3 gaming app, developers can add code to enable Web3 wallet operations for authenticated users to sign transactions.</p>"},{"location":"auth/onboard/unity/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Unity Quick Start Guide</li> </ul>"},{"location":"auth/onboard/passkey-auth/passkey-login/","title":"Login Users via Passkeys","text":"<p>In this guide, you will learn how a Web3 app integrated with the Arcana Auth SDK can let users set up passkeys as an alternative login option.</p>"},{"location":"auth/onboard/passkey-auth/passkey-login/#prerequisites","title":"Prerequisites","text":"<ul> <li>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</li> <li>The app must be registered using the Arcana Developer Dashboard. A unique Client ID is assigned after app registration. It is required for integrating the app with the Arcana Auth SDK.</li> <li>Configure passkeys settings in the  Arcana Developer Dashboard.</li> <li>Follow the instructions as per the app type and integrate the app with the Arcana Auth SDK.</li> </ul>"},{"location":"auth/onboard/passkey-auth/passkey-login/#steps","title":"Steps","text":"<p>Follow these steps to enable passkeys as an alternative login for users in a Web3 app integrated with the Arcana Auth SDK.</p>"},{"location":"auth/onboard/passkey-auth/passkey-login/#1-authenticate-user","title":"1. Authenticate User","text":"<p>Add code to onboard users via social login or passwordless options. Use <code>loginWithSocial</code> or <code>loginWithOTP</code> to onboard users for their first login without passkeys.</p>"},{"location":"auth/onboard/passkey-auth/passkey-login/#2-link-passkeys","title":"2. Link Passkeys","text":"<p>In the authenticated user's context, check if the browser supports logging in via passkey through the <code>IsPasskeyLoginSupported</code> function. If the app browser supports passkeys, call <code>linkPasskey</code> function in the authenticated user's context to bind the passkey with the app. </p> <pre><code>import { AuthProvider } from \"@arcana/auth\"\nconst auth = new AuthProvider(\"...\")\n\nwindow.onload = () =&gt; {\n  await auth.init()\n}\n\nif auth.isPasskeyLoginSupported(){\n    console.log(\"Passkey login is supported by the device/browser.\")\n    // The device or browser running the app supports Passkey Login.\n\n    // Add code to allow non-passkey authenticated user to set up passkey\n\n    ...\n}\n</code></pre> <p>The <code>linkPasskey</code> function invokes the device/browser specific passkey functionality. User will be prompted to create a passkey if none exist on the device. Or a list of available passkeys will be displayed for the user to choose from. Then the selected passkey can be linked or bound to the app for future login attempts. </p> <pre><code>import { AuthProvider } from \"@arcana/auth\"\nconst auth = new AuthProvider(\"...\")\n\nwindow.onload = () =&gt; {\n  await auth.init()\n}\n// First login / signup\n// Display custom login UI with non-passkey login options\n\n...\n\n// Allow user to click log in via one of the options\n\nif !auth.isLoggedIn(){\n  // Onboard user via non-passkey option\n  await auth.loginWithSocial({{ no such element: dict object['social_provider'] }})\n\n  // Check if the device/browser support passkey login\n  if auth.isPasskeyLoginSupported(){\n\n    // Enable authenticated user to link a passkey with the app\n\n    // Post login function\n    await auth.linkPasskey();\n  }\n}\n</code></pre> <p>After passkeys are set for the app, the <code>getMyPasskeys</code> can be called in the authenticated user's context to list all the user passkeys linked with the app on the device/browser.</p> <pre><code>import { AuthProvider } from \"@arcana/auth\";\nconst auth = new AuthProvider(\"...\");\n\nwindow.onload = () =&gt; {\n  await auth.init();\n}\n\nif !auth.isLoggedIn(){\n  // Onboard user via non-passkey option\n  await auth.loginWithSocial({{ no such element: dict object['social_provider'] }});\n\n  const userInfo = auth.getUser();\n  console.log(\"userInfo.name\", userInfo.name);\n\n  // Check if the device/browser support passkey login\n  if auth.isPasskeyLoginSupported(){\n\n    // Enable authenticated user to link a passkey with the app\n\n    // Post login function\n    await auth.linkPasskey();\n\n    // Post login function\n    const passkeys = await auth.getMyPasskeys();\n    console.log({ passkeys });\n  }\n\n  ...\n\n}\n</code></pre>"},{"location":"auth/onboard/passkey-auth/passkey-login/#enable-passkey-login","title":"Enable Passkey Login","text":"<p>Once passkeys are set up by the user, enable a 'login with passkey' option in the custom login UI of the app. When a user chooses this option to log in, call <code>loginWithPasskey</code>. This will bring up the device specific UI to display a list of passkeys and let the user select one to onboard the app.</p> <pre><code>import { AuthProvider } from \"@arcana/auth\"\nconst auth = new AuthProvider(\"...\")\n\nwindow.onload = () =&gt; {\n  await auth.init()\n}\n\n...\n\n// Display custom login UI with non-passkey login options\n\n...\n\n// Allow user to click log in via one of the options\n\nif !auth.isLoggedIn(){\n  // Onboard user via non-passkey option\n  await auth.loginWithSocial({{ no such element: dict object['social_provider'] }});\n\n  const userInfo = auth.getUser();\n  console.log(\"userInfo.name\", userInfo.name);\n\n  // Check if the device/browser support passkey login\n  if auth.isPasskeyLoginSupported(){\n\n    // Enable authenticated user to link a passkey with the app\n\n    // Post login function\n    await auth.linkPasskey();\n\n    // Post login function\n    const passkeys = await auth.getMyPasskeys();\n    console.log({ passkeys });\n  }\n}\n\n// Allow user to choose and log out after passkey linking is done\n\n// Display custom login UI with all onboarding options including passkeys\n\n// User clicks 'login with passkey' option in the UI\n\nif !auth.isLoggedIn(){\n  // Pre login function\n  await auth.loginWithPasskey();\n  ...\n}\n\n...\n</code></pre> <p>Developers can also let user view the passkeys linked with the app or website and unlink them, if required.</p>"},{"location":"auth/onboard/passkey-auth/passkey-login/#list-passkeys","title":"List Passkeys","text":"<p>In the authenticated user's context, call <code>getMyPasskeys</code> to list all the user passkeys associated with the app.</p> <pre><code>import { AuthProvider } from \"@arcana/auth\";\nconst auth = new AuthProvider(\"...\");\n\nwindow.onload = () =&gt; {\n  await auth.init();\n}\n\nif !auth.isLoggedIn(){\n  // Onboard user via non-passkey option\n  await auth.loginWithSocial({{ no such element: dict object['social_provider'] }});\n\n  const userInfo = auth.getUser();\n  console.log(\"userInfo.name\", userInfo.name);\n\n  // Check if the device/browser support passkey login\n  if auth.isPasskeyLoginSupported(){\n\n    // Enable authenticated user to link a passkey with the app\n\n    // Post login function\n    await auth.linkPasskey();\n\n    // Post login function\n    const passkeys = await auth.getMyPasskeys();\n    console.log({ passkeys });\n  }\n\n  ...\n\n}\n</code></pre>"},{"location":"auth/onboard/passkey-auth/passkey-login/#unlink-passkeys","title":"Unlink Passkeys","text":"<p>Apps can allow users to unlink the passkeys associated with an app. </p> <p>To do this, call <code>getMyPasskeys</code>in the authenticated user's context. This will list all the passkeys associated with the app. Let the user select a passkey. Specify the id of the selected passkey and call <code>unlinkPasskey(id)</code>. This will ensure that on subsequent login attempts, user cannot onboard the app with the unlinked passkey.</p> <pre><code>import { AuthProvider } from \"@arcana/auth\"\nconst auth = new AuthProvider(\"...\")\n\nwindow.onload = () =&gt; {\n  await auth.init()\n}\n\n...\n\n// First login / signup\n// Display custom login UI with non-passkey login options\n\n...\n\n// Allow user to click log in via one of the options\n\nif !auth.isLoggedIn(){\n  // Onboard user via non-passkey option\n  await auth.loginWithSocial({{ no such element: dict object['social_provider'] }});\n\n  const userInfo = auth.getUser();\n  console.log(\"userInfo.name\", userInfo.name);\n\n  // Check if the device/browser support passkey login\n  if auth.isPasskeyLoginSupported(){\n\n    // Enable authenticated user to link a passkey with the app\n\n    // Post login function\n    await auth.linkPasskey();\n\n    // Post login function\n    const passkeys = await auth.getMyPasskeys();\n    console.log({ passkeys });\n  }\n}\n\n// Allow user to choose and log out after passkey linking is done\n\n// Display custom login UI with all onboarding options including passkeys\n\n// User clicks 'login with passkey' option in the UI\n\n// Pre login function\nawait auth.loginWithPasskey();\n\n...\n\nif !auth.isLoggedIn(){\n\n  // Allow user to select passkey and unlink\n\n  // Post login function\n  const passkeys = await auth.getMyPasskeys();\n  console.log({ passkeys });\n\n  // User selects passkey n via device/browser passkey UI\n\n  if (passkeys[n]){\n    // Post login function\n    await auth.unlinkPasskey(passkey[n]);\n  }\n\n}\n</code></pre> <p>That is all. </p> <p>Your dApp is all set for onboarding users via the passkeys option.</p>"},{"location":"auth/onboard/passkey-auth/passkey-login/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/passkey-auth/passkey-login/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Configure Social Providers</li> <li>Arcana Auth SDK Errors</li> <li>Arcana Auth SDK Usage Guide</li> <li>Auth SDK Reference</li> </ul>"},{"location":"auth/onboard/passkey-auth/passkey-signup/","title":"Login Users via Passkeys","text":"<p>In this guide, you will learn how a Web3 app integrated with the Arcana Auth SDK let users  sign-up and login into the app via passkeys as the only app onboarding.</p>"},{"location":"auth/onboard/passkey-auth/passkey-signup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</li> <li>The app must be registered using the Arcana Developer Dashboard. A unique Client ID is assigned after app registration. It is required for integrating the app with the Arcana Auth SDK.</li> <li>Configure passkeys settings in the  Arcana Developer Dashboard.</li> <li>Follow the instructions as per the app type and integrate the app with the Arcana Auth SDK.</li> </ul>"},{"location":"auth/onboard/passkey-auth/passkey-signup/#steps","title":"Steps","text":"<p>Follow these steps to enable sign-up &amp; login via passkeys in a Web3 app that is integrated with the Arcana Auth SDK.</p> <p>### 1. Register Passkey</p> <p>Add code to sign-up and create new user account via <code>registerWithPasskey()</code>. This will let the user create a new passkey and link it with the app in one shot. The newly created user will be assigned a blockchain wallet address as well. Once user has created the passkeys, enable the <code>Login with Passkey</code> option in the app UI.</p> <p>### 2. Enable Passkey Login</p> <p>Once passkeys are set up by the user, enable a 'login with passkey' option in the custom login UI of the app. When a user chooses this option to log in, call <code>loginWithPasskey</code>. This will bring up the device specific UI to display a list of passkeys linked with the app and let the user select one to onboard the app.</p> <pre><code>import { AuthProvider } from \"@arcana/auth\"\nconst auth = new AuthProvider(\"...\")\n\nwindow.onload = () =&gt; {\n  await auth.init()\n}\n\n...\n\n// Display custom login UI with non-passkey login options\n\n...\n\n// Allow user to click log in via one of the options\n\nif !auth.isLoggedIn(){\n  // Onboard user via non-passkey option\n  await auth.loginWithSocial({{ no such element: dict object['social_provider'] }});\n\n  const userInfo = auth.getUser();\n  console.log(\"userInfo.name\", userInfo.name);\n\n  // Check if the device/browser support passkey login\n  if auth.isPasskeyLoginSupported(){\n\n    // Enable authenticated user to link a passkey with the app\n\n    // Post login function\n    await auth.linkPasskey();\n\n    // Post login function\n    const passkeys = await auth.getMyPasskeys();\n    console.log({ passkeys });\n  }\n}\n\n// Allow user to choose and log out after passkey linking is done\n\n// Display custom login UI with all onboarding options including passkeys\n\n// User clicks 'login with passkey' option in the UI\n\nif !auth.isLoggedIn(){\n  // Pre login function\n  await auth.loginWithPasskey();\n  ...\n}\n\n...\n</code></pre> <p>Developers can also let user view the passkeys linked with the app or website and unlink them, if required.</p>"},{"location":"auth/onboard/passkey-auth/passkey-signup/#list-passkeys","title":"List Passkeys","text":"<p>In the authenticated user's context, call <code>getMyPasskeys</code> to list all the user passkeys associated with the app.</p> <pre><code>import { AuthProvider } from \"@arcana/auth\";\nconst auth = new AuthProvider(\"...\");\n\nwindow.onload = () =&gt; {\n  await auth.init();\n}\n\nif !auth.isLoggedIn(){\n  // Onboard user via non-passkey option\n  await auth.loginWithSocial({{ no such element: dict object['social_provider'] }});\n\n  const userInfo = auth.getUser();\n  console.log(\"userInfo.name\", userInfo.name);\n\n  // Check if the device/browser support passkey login\n  if auth.isPasskeyLoginSupported(){\n\n    // Enable authenticated user to link a passkey with the app\n\n    // Post login function\n    await auth.linkPasskey();\n\n    // Post login function\n    const passkeys = await auth.getMyPasskeys();\n    console.log({ passkeys });\n  }\n\n  ...\n\n}\n</code></pre>"},{"location":"auth/onboard/passkey-auth/passkey-signup/#unlink-passkeys","title":"Unlink Passkeys","text":"<p>Apps can allow users to unlink the passkeys associated with an app. </p> <p>To do this, call <code>getMyPasskeys</code>in the authenticated user's context. This will list all the passkeys associated with the app. Let the user select a passkey. Specify the id of the selected passkey and call <code>unlinkPasskey(id)</code>. This will ensure that on subsequent login attempts, user cannot onboard the app with the unlinked passkey.</p> <pre><code>import { AuthProvider } from \"@arcana/auth\"\nconst auth = new AuthProvider(\"...\")\n\nwindow.onload = () =&gt; {\n  await auth.init()\n}\n\n...\n\n// First login / signup\n// Display custom login UI with non-passkey login options\n\n...\n\n// Allow user to click log in via one of the options\n\nif !auth.isLoggedIn(){\n  // Onboard user via non-passkey option\n  await auth.loginWithSocial({{ no such element: dict object['social_provider'] }});\n\n  const userInfo = auth.getUser();\n  console.log(\"userInfo.name\", userInfo.name);\n\n  // Check if the device/browser support passkey login\n  if auth.isPasskeyLoginSupported(){\n\n    // Enable authenticated user to link a passkey with the app\n\n    // Post login function\n    await auth.linkPasskey();\n\n    // Post login function\n    const passkeys = await auth.getMyPasskeys();\n    console.log({ passkeys });\n  }\n}\n\n// Allow user to choose and log out after passkey linking is done\n\n// Display custom login UI with all onboarding options including passkeys\n\n// User clicks 'login with passkey' option in the UI\n\n// Pre login function\nawait auth.loginWithPasskey();\n\n...\n\nif !auth.isLoggedIn(){\n\n  // Allow user to select passkey and unlink\n\n  // Post login function\n  const passkeys = await auth.getMyPasskeys();\n  console.log({ passkeys });\n\n  // User selects passkey n via device/browser passkey UI\n\n  if (passkeys[n]){\n    // Post login function\n    await auth.unlinkPasskey(passkey[n]);\n  }\n\n}\n</code></pre> <p>That is all. </p> <p>Your dApp is all set for letting users sign-in and login via passkeys.</p>"},{"location":"auth/onboard/passkey-auth/passkey-signup/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/passkey-auth/passkey-signup/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Configure Social Providers</li> <li>Arcana Auth SDK Errors</li> <li>Arcana Auth SDK Usage Guide</li> <li>Auth SDK Reference</li> </ul>"},{"location":"auth/onboard/rainbow/rainbow-custom-ui/","title":"Custom Login UI","text":"<p>Onboard users in a 'RainbowKit' app integrated with the Arcana Auth SDK through a custom login UI.</p> Plug-and-Play Login UI <p>You can onboard users in a 'RainbowKit' app faster through the built-in, plug-and-play login UI instead of choosing to build a custom login UI. Learn more...</p>"},{"location":"auth/onboard/rainbow/rainbow-custom-ui/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the Wagmi app and configure SDK usage settings for social login providers, manage app chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages for 'RainbowKit'.</p> </li> <li> <p>Integrate 'RainbowKit' app and create <code>AuthProvider</code>, <code>ArcanaConnector</code>.</p> </li> </ul>"},{"location":"auth/onboard/rainbow/rainbow-custom-ui/#steps","title":"Steps","text":""},{"location":"auth/onboard/rainbow/rainbow-custom-ui/#1-configure-arcanaconnector","title":"1. Configure <code>ArcanaConnector</code>","text":"<p><code>ArcanaConnector</code> is created earlier as part of SDK integration. When using a custom login UI to onboard users, configure <code>ArcanaConnector</code> differently.</p> <p>Add code in the custom UI for onboarding via social login and passwordless options by using the <code>setLogin</code> function. </p> <p>Enable Authentication Provider</p> <pre><code>import { AuthProvider } from \"@arcana/auth\";\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\";\nimport { polygon, polygonAmoy } from \"wagmi/chains\";\nimport { configureChains, createClient, Chain } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\n\n/* Using Custom UI for user login via Google */\nconst auth = new AuthProvider(`${arcana_client_id}`) // Singleton\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: auth,        \n      login:  {\n          provider: 'google', //See 'Custom Login UI' section in the documentation for other supported providers.\n        } // Optional, specify here during ArcanaConnector instantiation or in the setLogin function\n    },\n  });\n};\n\n// Custom UI Alternative \n// Use setLogin function after creating the connector.\n\n/*\nconst auth = new AuthProvider(`${arcana_client_id}`) // Singleton\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: auth             \n    },\n  });\n};\n\nconnector.setLogin({\n  provider: 'google'\n})\n*/\n\n...\n</code></pre> <p>Enable Passwordless Login</p> <pre><code>import { AuthProvider } from \"@arcana/auth\";\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\";\nimport { polygon, polygonAmoy } from \"wagmi/chains\";\nimport { configureChains, createClient, Chain } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\n\n/* Using Custom UI for Passwordless user login */\nconst auth = new AuthProvider(`${arcana_client_id}`) // Singleton\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: auth,        \n      login:  {\n          provider: 'passwordless', \n          email: 'abc@example.com' //optional\n        } // Optional, specify login details here or during ArcanaConnector instantiation or in the setLogin function\n    },\n  });\n};\n\n// Custom UI Alternative \n// Use setLogin function after creating the connector.\n\n/*\nconst auth = new AuthProvider(`${arcana_client_id}`) // Singleton\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: auth             \n    },\n  });\n};\n\nconnector.setLogin({\n  provider: 'passwordless',\n  email: 'abc@example.com' //optional\n})\n*/\n\n...\n</code></pre> <p>Single Provider Optimization</p> <p>When using a single social login provider, specify it when creating ArcanaConnector to optimize onboarding. There's no need to use setLogin later in the custom login UI code.</p> <p>For multiple social login providers, create ArcanaConnector without specifying a provider. Use the setLogin function later based on the user's choice.</p>"},{"location":"auth/onboard/rainbow/rainbow-custom-ui/#2-set-up-wagmiconfig","title":"2. Set up <code>WagmiConfig</code>","text":"<p>Use the <code>ArcanaConnector</code> and set up Wagmi config.</p> Wagmi 2.0Wagmi 1.0 <pre><code>// Note:  \n// This sample code is for \n// wagmi versions 1.x.x and auth-wagmi 2.0.0\n\nimport { configureChains, createConfig, WagmiConfig } from \"wagmi\";\nimport { polygon, mainnet, optimism, arbitrum } from \"wagmi/chains\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { RainbowKitProvider } from \"@rainbow-me/rainbowkit\";\nimport { connectors } from \"./wallet\";\nimport { useAccount, useConnect } from 'wagmi'\nimport { Connect } from \"./Connect\";\n\nconst { chains, publicClient } = configureChains(\n  [mainnet, polygon, optimism, arbitrum],\n  [publicProvider()]\n);\n\nconst wagmiEntity = createConfig({\n  connectors: connectors(chains),\n  autoConnect: true,\n  publicClient,\n});\n...\n</code></pre> <pre><code>// Note:  \n// This sample code is for \n// wagmi versions &lt;1.x.x and auth-wagmi &lt;2.0.0\n\nimport \"../styles/globals.css\";\nimport \"@rainbow-me/rainbowkit/styles.css\";\n\nimport { configureChains, createClient, WagmiConfig } from \"wagmi\";\nimport { polygon, mainnet } from \"wagmi/chains\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { RainbowKitProvider } from \"@rainbow-me/rainbowkit\";\nimport { connectors } from \"../utils/wallet\";\n\nconst { chains, provider } = configureChains(\n  [mainnet, polygon],\n  [publicProvider()]\n);\n\nconst wagmiEntity = createClient({\n  connectors: connectors(chains),\n  autoConnect: true,\n  provider,\n});\n...\n</code></pre>"},{"location":"auth/onboard/rainbow/rainbow-custom-ui/#3-initialize-rainbowkit-app-components","title":"3. Initialize RainbowKit App Components","text":"Wagmi 2.0Wagmi 1.0 <pre><code>// Pass wagmi client configured with ArcanaRainbowKitConnector to the RainbowKit Context Provider\nexport default function App({ Component, pageProps }) {\n  return (\n    &lt;WagmiConfig config={wagmiEntity}&gt;\n      &lt;RainbowKitProvider chains={chains}&gt;\n        &lt;Component {...pageProps} /&gt;\n      &lt;/RainbowKitProvider&gt;\n    &lt;/WagmiConfig&gt;\n  );\n}\n</code></pre> <pre><code>// Pass wagmi client configured with ArcanaRainbowKitConnector to the RainbowKit Context Provider\nexport default function App({ Component, pageProps }) {\n  return (\n    &lt;WagmiConfig client={wagmiEntity}&gt;\n      &lt;RainbowKitProvider chains={chains}&gt;\n        &lt;Component {...pageProps} /&gt;\n      &lt;/RainbowKitProvider&gt;\n    &lt;/WagmiConfig&gt;\n  );\n}\n</code></pre>"},{"location":"auth/onboard/rainbow/rainbow-custom-ui/#whats-next","title":"What's Next?","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/onboard/rainbow/rainbow-custom-ui/#see-also","title":"See also","text":"<ul> <li>Arcana Auth SDK Errors</li> <li>Arcana Auth SDK Usage Guide</li> <li>Auth SDK Reference</li> <li>Auth Wagmi SDK Reference</li> </ul>"},{"location":"auth/onboard/rainbow/rainbow-pnp-ui/","title":"Plug-and-Play Login UI","text":"<p>Use the built-in, plug-and-play login UI modal to quickly onboard users in a 'RainbowKit' app integrated with the Arcana Auth Wagmi SDK. </p> Custom Login UI <p>You can onboard users through a custom login UI instead of the built-in plug-and-play one. See how to use custom login UI and onboard users in a 'RainbowKit' app.</p>"},{"location":"auth/onboard/rainbow/rainbow-pnp-ui/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the Wagmi app and configure SDK usage settings for social login providers, manage app chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages for 'RainbowKit'.</p> </li> <li> <p>Integrate 'RainbowKit' app and create <code>AuthProvider</code>, <code>ArcanaConnector</code>.</p> </li> </ul>"},{"location":"auth/onboard/rainbow/rainbow-pnp-ui/#steps","title":"Steps","text":""},{"location":"auth/onboard/rainbow/rainbow-pnp-ui/#1-setup-wagmiconfig","title":"1. Setup <code>WagmiConfig</code>","text":"<p>Use the <code>ArcanaConnector</code> created during app integration to set up Wagmi config.</p> Wagmi 2.0Wagmi 1.0 <pre><code>//\n// For apps using Wagmi versions v2.a.b and auth-wagmi v3.x.y\n//\n\nimport { http, createConfig } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\nimport { coinbaseWallet, injected, walletConnect } from 'wagmi/connectors'\nimport { AuthProvider } from '@arcana/auth'\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\"\n\nlet auth: AuthProvider | null;\n\nif (!auth) {\n  auth = new AuthProvider(\n    \"Your-app-Client-ID\"\n  );\n}\n\nconst connector = new ArcanaConnector({ auth });\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [\n    injected(),\n    coinbaseWallet({ appName: 'Create Wagmi' }),\n    walletConnect({ projectId: import.meta.env.VITE_WC_PROJECT_ID }),\n    connector(),\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n\ndeclare module 'wagmi' {\n  interface Register {\n    config: typeof config\n  }\n}\n...\n</code></pre> <pre><code>//   \n// For apps using Wagmi versions v1.x.y and auth-wagmi v2.a.b\n//\n\nimport { configureChains, createConfig, WagmiConfig } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { polygon, polygonAmoy } from \"wagmi/chains\";\nimport { useAccount, useConnect, useDisconnect, useBalance } from 'wagmi'\nimport \"../styles/globals.css\";\nimport { AuthProvider } from '@arcana/auth'\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\"\n\nlet auth: AuthProvider | null;\n\nif (!auth) {\n  auth = new AuthProvider(\n    \"Your-app-Client-ID\"\n  );\n}\n\nconst { chains, provider, webSocketProvider } = configureChains(\n  [mainnet, polygon, polygonAmoy],\n  [publicProvider()],\n  { targetQuorum: 1 }\n);\n\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: auth,\n    },\n  });\n};\n\nconst { chains, publicClient } = configureChains(\n  [polygon, polygonAmoy],\n  [publicProvider()]\n);\n\nexport const wagmiEntity = createConfig({\n  autoConnect: true,\n  connectors: [connector(chains)],\n  publicClient,\n});\n...\n</code></pre>"},{"location":"auth/onboard/rainbow/rainbow-pnp-ui/#2-initialize-rainbowkitprovider","title":"2. Initialize <code>RainbowKitProvider</code>","text":"<p>Specify Wagmi config to initialize <code>WagmiConfig</code> component in the app before using the <code>RainbowKitProvider</code> component.</p> Wagmi 2.0Wagmi 1.0 <pre><code>// Pass wagmi client configured with ArcanaRainbowKitConnector to the RainbowKit Context Provider\nexport default function App({ Component, pageProps }) {\n  return (\n    &lt;WagmiConfig config={wagmiEntity}&gt;\n      &lt;RainbowKitProvider chains={chains}&gt;\n        &lt;Component {...pageProps} /&gt;\n      &lt;/RainbowKitProvider&gt;\n    &lt;/WagmiConfig&gt;\n  );\n}\n</code></pre> <pre><code>// Pass wagmi client configured with ArcanaRainbowKitConnector to the RainbowKit Context Provider\nexport default function App({ Component, pageProps }) {\n  return (\n    &lt;WagmiConfig client={wagmiEntity}&gt;\n      &lt;RainbowKitProvider chains={chains}&gt;\n        &lt;Component {...pageProps} /&gt;\n      &lt;/RainbowKitProvider&gt;\n    &lt;/WagmiConfig&gt;\n  );\n}\n</code></pre>"},{"location":"auth/onboard/rainbow/rainbow-pnp-ui/#whats-next","title":"What's Next?","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/onboard/rainbow/rainbow-pnp-ui/#see-also","title":"See also","text":"<p>'RainbowKit' integration example: See <code>`sample-auth-rainbowkit-viem</code>, <code>sample-auth-rainbowkit</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth Wagmi SDK Quick Links</p> <ul> <li>Auth Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/onboard/react-nextjs/use-plug-play-auth/","title":"Plug-and-Play Login UI","text":"<p>Use the built-in, plug-and-play login UI modal to quickly onboard users in a 'React/Next.js' app integrated with the Arcana Auth Wagmi SDK. </p> Custom Login UI <p>You can onboard users through a custom login UI instead of the built-in plug-and-play one. See how to use custom login UI and onboard users in a 'React/Next.js' app.</p>"},{"location":"auth/onboard/react-nextjs/use-plug-play-auth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the Wagmi app and configure SDK usage settings for social login providers, manage app chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages for 'React/Next.js'.</p> </li> <li> <p>Integrate 'React/Next.js' app, create and initialize the <code>AuthProvider</code>.</p> </li> </ul>"},{"location":"auth/onboard/react-nextjs/use-plug-play-auth/#steps","title":"Steps","text":"<code>index.js</code><code>App.js</code> <pre><code>import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AuthProvider } from \"@arcana/auth\";\nimport { ProvideAuth } from \"@arcana/auth-react\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nconst provider = new AuthProvider(\n  \"xar_live_d7c88d9b033d100e4200d21a5c4897b896e60063\",\n  {\n    network: \"mainnet\",\n    theme: \"light\",\n    connectOptions: {\n      compact: true,\n    },\n    chainConfig: {\n      chainId: \"80001\"\n    }\n  }\n); //See SDK Reference Guide for optional parameters\n\nroot.render(\n  &lt;StrictMode&gt;\n    &lt;ProvideAuth provider={provider}&gt;\n      &lt;App /&gt;\n    &lt;/ProvideAuth&gt;\n  &lt;/StrictMode&gt;\n);\n</code></pre> <pre><code>import { Auth } from \"@arcana/auth-react\";\n\n// Use &lt;Auth/&gt; to use the built-in, plug &amp; play login UI\nfunction App() {\n  const [theme, setTheme] = React.useState(\"light\");\n  return (\n    &lt;div&gt;\n      &lt;Auth theme={theme} /&gt;\n    &lt;/div&gt;\n)}\n\nexport default App;\n</code></pre> <pre><code>import { useAuth } from \"@arcana/auth-react\";\n\nfunction App() {\n  const { loading, isLoggedIn, connect, user } = useAuth()\n\n  const onConnectClick = async () =&gt; {\n    try {\n      await connect(); // Built-in, plug &amp; play login UI\n    } catch (err) {\n      console.log({ err });\n      // Handle error\n    }\n  };\n\n  if (loading) {\n    return &lt;p&gt;Loading...&lt;/p&gt;;\n  }\n  if (!isLoggedIn) {\n    return (\n      &lt;button onClick={onConnectClick}&gt;\n        Login UI (Built-in)\n      &lt;/button&gt;\n    );\n  }\n}\n\nexport default App\n</code></pre> <p>The figure below shows the built-in login UI plug-and-play pop-up authentication screen for a test app.</p> Plug-and-play Login UI Compact Mode <p>While creating the <code>AuthProvider</code>, use <code>connectoOptions</code> to optionally choose the compact mode for the plug-and-play login UI.</p> <p><pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> Login UI Options </p> <p>No plug-and-play support for Firebase authentication.</p> <p>The plug and play feature of the Arcana Auth SDK does not support social login via Firebase. Developers must build a custom login UI and add code to onboard users. For details, see onboarding users via Firebase and custom login UI</p> <p>No plug-and-play support for Telegram authentication.</p> <p>The plug and play feature of the Arcana Auth SDK does not support social login via Telegram. Developers must build a custom login UI and add code to onboard users. For details, see [[{{ no such element: dict object['telegram_custom_ui_tag'] }}|onboarding users via Telegram and custom login UI]].</p>"},{"location":"auth/onboard/react-nextjs/use-plug-play-auth/#whats-next","title":"What's Next?","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/onboard/react-nextjs/use-plug-play-auth/#see-also","title":"See also","text":"<p>'React/Next.js' integration example: See <code>sample-auth-react`,`sample-auth-nextjs</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth Wagmi SDK Quick Links</p> <ul> <li>Auth Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/onboard/react-nextjs/custom-ui/","title":"Custom Login UI","text":"<p>Enable Passwordless Auth </p> <p>Social Login Providers  </p> <p>IAM Providers </p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-pwdless-auth/","title":"Build Passwordless Auth","text":"<p>Learn how React/Next.js app can use custom login UI and allow users to onboard via passwordless login option.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-pwdless-auth/#prerequisites","title":"Prerequisites","text":"<ul> <li>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</li> <li>The app must be registered using the Arcana Developer Dashboard and a unique Client ID must be already assigned to it. This Client ID is essential for integrating the app with the Arcana Auth SDK</li> <li>Follow the instructions to integrate the React app with the Arcana Auth SDK and initialize the <code>AuthProvider</code> instance.</li> </ul> <p>No Setup Required for Passwordless</p> <p>Passwordless login does not require any configuration setup through the Arcana Developer Dashboard. When prompted, app users must supply an email ID to receive the OTP for logging into the app. On receiving the OTP in email, user must provide the same in the app to authenticate and access the in-app Arcana wallet to sign transactions.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-pwdless-auth/#steps","title":"Steps","text":"<p><code>useAuth() hook</code></p> <p>Use <code>loginWithLink</code> (deprecated) <code>loginWithOTPStart</code> and <code>loginWithOTPComplete</code> through the <code>useAuth</code> hook offered by the Arcana Auth React SDK and trigger passwordless login to onboard the users. </p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-pwdless-auth/#login-with-link","title":"Login with link","text":"<pre><code>await auth.loginWithLink(`${email}`)\n</code></pre> <p>Deprecated</p> <p><code>loginWithLink</code> is deprecated.</p> <p>Use <code>loginWithOTPStart</code>, <code>loginWithOTPComplete</code> for passwordless login with OTP. The OTP will be received via email supplied in <code>loginWithOTPStart</code> call.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-pwdless-auth/#login-with-otp","title":"Login with OTP","text":"<pre><code>try {\nconst loginState = await auth.loginWithOTPStart(\"john.doe@somemail.com\");\nawait loginState.begin()\nif(loginState.isCompleteRequired) {\n  // App is using default app-specific keys\n  // App must ask the user to input a 6-digit code received in mail\n  var userInput = prompt(\"Please enter a 6-digit code:\", \"111111\");\n\n  // Validate if the input is a 6-digit code\n  if (userInput !== null &amp;&amp; \n      userInput.length === 6 &amp;&amp; \n      !isNaN(userInput)) {\n    const complete = await auth.loginWithOTPComplete(\n      userInput, \n      onMFARequired() =&gt; {\n      //Hide overlay, if used in the app\n    });\n    console.log(\"complete:\",complete);\n  } else {\n    console.log(\"Invalid input. Please enter a valid 6-digit code.\");\n  } \n} else {\n  // App is using global keys, built-in OTP input UI is displayed by the SDK\n  // App is not required to add code for OTP input\n}\n} catch (e) {\nconsole.log(e);\n}\n</code></pre> Global vs. App Specific Keys <p>Apps using app-specific keys must use a custom login UI that allows users to input the OTP. In this case, the <code>isCompleteRequired</code> boolean returns <code>true</code> after initiating login with OTP.</p> <p>Apps using global keys are not required to use a custom login UI. A built-in login UI is automatically displayed for the user for OTP. Users must enter the OTP received via email in this UI.</p> MFA Enabled / Disabled <p>During passwordless login via OTP, apps configured for MFA and those using overlays must hide it to enable OTP input. Use the <code>isMFARequired</code> callback in the <code>loginWithOTPComplete</code> method to hide the overlay.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-pwdless-auth/#whats-next","title":"What's Next?","text":"<p>Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-pwdless-auth/#see-also","title":"See also","text":"<p>React/Next.js integration example: See <code>sample-auth-react`,`sample-auth-nextjs</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> <li> <p>Arcana Auth SDK Usage Guide</p> </li> <li> <p>Arcana Auth React SDK Reference</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth React SDK Quick Links</p> <ul> <li>Arcana Auth React SDK Reference Guide</li> <li>Auth SDK Reference</li> <li>Arcana Auth SDK Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-idm/","title":"IAM Provider: Custom Login UI","text":"<p>Developers can choose to not use the plug-and-play login UI and instead build a custom login UI to onboard users.</p> <p>In this case, developers must build custom login UI themselves after configuring the IAM Providers in the Arcana Developer Dashboard. This custom login UI must call appropriate user onboarding functions offered by the Arcana Auth SDK for every configured IAM provider.</p> <p>Cognito </p> <p>Firebase </p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-idm/cognito-oauth/","title":"User Login with Cognito","text":"<p>In this guide, you will learn how a React/Next.js app integrated with the Arcana Auth SDK and  Arcana Auth React SDK can onboard users with a custom login UI through Cognito authentication.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-idm/cognito-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Cognito as the authentication provider.</p> </li> <li> <p>Use the instructions and integrate the React app with the Arcana Auth SDK and the Arcana Auth React SDK before adding code to onboard users.</p> </li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-idm/cognito-oauth/#steps","title":"Steps","text":"<p>Using Cognito to onboard users in a React/Next.js app requires a single line of code.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-idm/cognito-oauth/#step-1-use-loginwithsocial","title":"Step 1: Use <code>loginWithSocial</code>","text":"App.js<pre><code>import { useAuth } from \"@arcana/auth-react\";\n\nfunction App() {\n  const { loading, isLoggedIn, loginWithSocial } = useAuth()\n\n  // custom login UI\n  const onConnectClick = async () =&gt; {\n    try {\n      await loginWithSocial('aws'); \n    } catch (err) {\n      console.log({ err });\n      // Handle error\n    }\n  };\n\n  if (loading) {\n    return &lt;p&gt;Loading...&lt;/p&gt;;\n  }\n  if (!isLoggedIn) {\n    return (\n      &lt;button onClick={onConnectClick}&gt;\n        Connect with Cognito\n      &lt;/button&gt;\n    );\n  }\n}\n\nexport default App\n</code></pre> <p>That is all. </p> <p>The React/Next.js app is all set for onboarding users via Cognito.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-idm/cognito-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-idm/cognito-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types.</li> <li>Arcana Auth React SDK Reference Guide</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-idm/firebase-login/","title":"User Login with Firebase","text":"<p>In this guide, you will learn how a React/Next.js app integrated with the Arcana Auth SDK and Firebase SDK can onboard users via custom login UI and Firebase as the authentication provider.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-idm/firebase-login/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the  Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Firebase as the authentication provider.</p> </li> <li> <p>Install the Firebase SDK and integrate the app as explained in the Firebase documentation for iOS apps, Android apps and web apps. Use Firebase authentication as per the Web3 app type, mobile or web app. Once a user is authenticated by Firebase, the developer must obtain the token and user identifier and provide it as input to the <code>loginWithBearer</code> function of the Arcana Auth SDK for onboarding users to Web3.</p> </li> <li> <p>Install the Arcana Auth SDK and integrate the app with the Arcana Auth SDK by using the appropriate integration method as per the app type. After that follow the steps listed below and add code to onboard users to Web3 and enable them to sign blockchain transactions.</p> </li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-idm/firebase-login/#steps","title":"Steps","text":"<p>Using Firebase to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-idm/firebase-login/#call-loginwithbearer-function","title":"Call <code>loginWithBearer</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with both the Firebase SDK as well as the Arcana Auth SDK, before adding code to onboard users via Firebase.</p> App.vue<pre><code>import { initializeApp } from 'firebase/app'\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth'\nimport { AuthProvider, BearerAuthentication } from '@arcana/auth'\n\nconst config = {\n  apiKey: \"AIzaSyBddysLWM9CcpNEVLbUz52YwyQL_uytQX0\", // Obtain this after registering app at Firebase console\n  authDomain: \"arc4n4-docx.firebaseapp.com\", // Project ID Domain setting in the Firebase console\n  projectId: \"some-projectid-example-arc4n4-docx\",\n  storageBucket: \"some-storage-arc4n4-docx.appspot.com\",\n  messagingSenderId: \"2xxxx318486297382\",\n  appId: \"4:3184ddddddd7382:web:8b639axxxxxxxx39f85fe7\",\n  measurementId: \"G-EGccccccLDR\"\n};\n\nconst firebaseApp = initializeApp(config)\nconst firebaseAuth = getAuth(firebaseApp)\n\n//Create Arcana Auth Provider\n// Get client ID 'xar_live_xxxxxx' from Arcana Developer Dashboard\n\nconst auth = new AuthProvider(\"xar_live_123940ytyoxxxxxxx343o404\",{\n  network: \"mainnet\", //change it to testnet or mainnet\n}) \nexport default {\n  name: 'App',\n  data: () =&gt; ({\n    email: '',\n    password: ''\n  }),\n  mounted () {\n    AP.init().then((k) =&gt; console.log(k)).catch(e =&gt; console.error(e)) //Initialize the Auth Provider\n  },\n  methods: {\n    async ultimate (upm) {\n        if (await AP.isLoggedIn()) {\n          window.alert('Already logged in')\n          return\n        }\n        await auth.loginWithBearer(BearerAuthentication.firebase, {\n        uid: upm.user.uid,\n        token: upm.user.accessToken\n        })\n    },\n    async login () { //Sign in existing Firebase users\n        const data = await signInWithEmailAndPassword(firebaseAuth, this.email, this.password)\n        console.log('Data:', data)\n        return this.ultimate(data)\n    },\n    async register () {  //Sign up new users with Firebase Auth\n        const data = await createUserWithEmailAndPassword(firebaseAuth, this.email, this.password)\n        console.log('Data:', data)\n        return this.ultimate(data)\n    }  \n  }\n}\n\n...\n</code></pre> <p>Refer to the Sample Firebase Vue app integration example to see how the <code>loginWithBearer</code> function is used.</p> <p>After onboarding users, developers can add code to access the other Arcana Auth SDK functions in the app. See Arcana Auth SDK Usage Guide for details.</p> <p>That is all. </p> <p>Your app is all set for authenticating users via Firebase. Authenticated users can instantly access the Arcana wallet to sign blockchain transactions.</p> No Aggregate Login with Firebase  <p>The aggregate login feature does not work for third-party IAM providers such as Firebase.</p> <p>If a user has the same email ID registered with say a social login provider and with Firebase, logging into an app using Firebase will create a new unique user account even if the user uses the same email as the one used with a social login provider or via the passwordless option. What this means is that the wallet address for the same user will be different when Firebase is used to log in and subsequently a social login provider or passwordless login is used by the same user having the same email ID.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-idm/firebase-login/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-idm/firebase-login/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handing authentication errors</li> <li>Get Firebase User token</li> <li>Using Firebase Auth</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/","title":"Social Login Providers: Custom Login UI","text":"<p>Developers can choose to not use the plug-and-play login UI and instead build a custom login UI to onboard users. </p> <p>In this case, developers must build custom login UI themselves after configuring the social login providers in the Arcana Developer Dashboard. This custom login UI must call appropriate user onboarding functions offered by the Arcana Auth SDK for configured social login providers.</p> <p>Apple </p> <p>Discord </p> <p>GitHub </p> <p>Google </p> <p>Steam </p> <p>Telegram </p> <p>Twitch </p> <p>Twitter </p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/apple-oauth/","title":"User Login with Apple","text":"<p>In this guide, you will learn how a React/Next.js app integrated with the Arcana Auth SDK and  Arcana Auth React SDK can onboard users with a custom login UI through Apple authentication.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/apple-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Apple as the authentication provider.</p> </li> <li> <p>Use the instructions and integrate the React app with the Arcana Auth SDK and the Arcana Auth React SDK before adding code to onboard users.</p> </li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/apple-oauth/#steps","title":"Steps","text":"<p>Using Apple to onboard users in a React/Next.js app requires a single line of code.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/apple-oauth/#step-1-use-loginwithsocial","title":"Step 1: Use <code>loginWithSocial</code>","text":"App.js<pre><code>import { useAuth } from \"@arcana/auth-react\";\n\nfunction App() {\n  const { loading, isLoggedIn, loginWithSocial } = useAuth()\n\n  // custom login UI\n  const onConnectClick = async () =&gt; {\n    try {\n      await loginWithSocial('apple'); \n    } catch (err) {\n      console.log({ err });\n      // Handle error\n    }\n  };\n\n  if (loading) {\n    return &lt;p&gt;Loading...&lt;/p&gt;;\n  }\n  if (!isLoggedIn) {\n    return (\n      &lt;button onClick={onConnectClick}&gt;\n        Connect with Apple\n      &lt;/button&gt;\n    );\n  }\n}\n\nexport default App\n</code></pre> <p>That is all. </p> <p>The React/Next.js app is all set for onboarding users via Apple.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/apple-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/apple-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types.</li> <li>Arcana Auth React SDK Reference Guide</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/discord-oauth/","title":"User Login with Discord","text":"<p>In this guide, you will learn how a React/Next.js app integrated with the Arcana Auth SDK and  Arcana Auth React SDK can onboard users with a custom login UI through Discord authentication.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/discord-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Discord as the authentication provider.</p> </li> <li> <p>Use the instructions and integrate the React app with the Arcana Auth SDK and the Arcana Auth React SDK before adding code to onboard users.</p> </li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/discord-oauth/#steps","title":"Steps","text":"<p>Using Discord to onboard users in a React/Next.js app requires a single line of code.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/discord-oauth/#step-1-use-loginwithsocial","title":"Step 1: Use <code>loginWithSocial</code>","text":"App.js<pre><code>import { useAuth } from \"@arcana/auth-react\";\n\nfunction App() {\n  const { loading, isLoggedIn, loginWithSocial } = useAuth()\n\n  // custom login UI\n  const onConnectClick = async () =&gt; {\n    try {\n      await loginWithSocial('discord'); \n    } catch (err) {\n      console.log({ err });\n      // Handle error\n    }\n  };\n\n  if (loading) {\n    return &lt;p&gt;Loading...&lt;/p&gt;;\n  }\n  if (!isLoggedIn) {\n    return (\n      &lt;button onClick={onConnectClick}&gt;\n        Connect with Discord\n      &lt;/button&gt;\n    );\n  }\n}\n\nexport default App\n</code></pre> <p>That is all. </p> <p>The React/Next.js app is all set for onboarding users via Discord.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/discord-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/discord-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types.</li> <li>Arcana Auth React SDK Reference Guide</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/github-oauth/","title":"User Login with GitHub","text":"<p>In this guide, you will learn how a React/Next.js app integrated with the Arcana Auth SDK and  Arcana Auth React SDK can onboard users with a custom login UI through GitHub authentication.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/github-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure GitHub as the authentication provider.</p> </li> <li> <p>Use the instructions and integrate the React app with the Arcana Auth SDK and the Arcana Auth React SDK before adding code to onboard users.</p> </li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/github-oauth/#steps","title":"Steps","text":"<p>Using GitHub to onboard users in a React/Next.js app requires a single line of code.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/github-oauth/#step-1-use-loginwithsocial","title":"Step 1: Use <code>loginWithSocial</code>","text":"App.js<pre><code>import { useAuth } from \"@arcana/auth-react\";\n\nfunction App() {\n  const { loading, isLoggedIn, loginWithSocial } = useAuth()\n\n  // custom login UI\n  const onConnectClick = async () =&gt; {\n    try {\n      await loginWithSocial('github'); \n    } catch (err) {\n      console.log({ err });\n      // Handle error\n    }\n  };\n\n  if (loading) {\n    return &lt;p&gt;Loading...&lt;/p&gt;;\n  }\n  if (!isLoggedIn) {\n    return (\n      &lt;button onClick={onConnectClick}&gt;\n        Connect with GitHub\n      &lt;/button&gt;\n    );\n  }\n}\n\nexport default App\n</code></pre> <p>That is all. </p> <p>The React/Next.js app is all set for onboarding users via GitHub.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/github-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/github-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types.</li> <li>Arcana Auth React SDK Reference Guide</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/google-oauth/","title":"User Login with Google","text":"<p>In this guide, you will learn how a React/Next.js app integrated with the Arcana Auth SDK and  Arcana Auth React SDK can onboard users with a custom login UI through Google authentication.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/google-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Google as the authentication provider.</p> </li> <li> <p>Use the instructions and integrate the React app with the Arcana Auth SDK and the Arcana Auth React SDK before adding code to onboard users.</p> </li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/google-oauth/#steps","title":"Steps","text":"<p>Using Google to onboard users in a React/Next.js app requires a single line of code.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/google-oauth/#step-1-use-loginwithsocial","title":"Step 1: Use <code>loginWithSocial</code>","text":"App.js<pre><code>import { useAuth } from \"@arcana/auth-react\";\n\nfunction App() {\n  const { loading, isLoggedIn, loginWithSocial } = useAuth()\n\n  // custom login UI\n  const onConnectClick = async () =&gt; {\n    try {\n      await loginWithSocial('google'); \n    } catch (err) {\n      console.log({ err });\n      // Handle error\n    }\n  };\n\n  if (loading) {\n    return &lt;p&gt;Loading...&lt;/p&gt;;\n  }\n  if (!isLoggedIn) {\n    return (\n      &lt;button onClick={onConnectClick}&gt;\n        Connect with Google\n      &lt;/button&gt;\n    );\n  }\n}\n\nexport default App\n</code></pre> <p>That is all. </p> <p>The React/Next.js app is all set for onboarding users via Google.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/google-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/google-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types.</li> <li>Arcana Auth React SDK Reference Guide</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/steam-oauth/","title":"User Login with Steam","text":"<p>In this guide, you will learn how a React/Next.js app integrated with the Arcana Auth SDK and  Arcana Auth React SDK can onboard users with a custom login UI through Steam authentication.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/steam-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Steam as the authentication provider.</p> </li> <li> <p>Use the instructions and integrate the React app with the Arcana Auth SDK and the Arcana Auth React SDK before adding code to onboard users.</p> </li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/steam-oauth/#steps","title":"Steps","text":"<p>Using Steam to onboard users in a React/Next.js app requires a single line of code.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/steam-oauth/#step-1-use-loginwithsocial","title":"Step 1: Use <code>loginWithSocial</code>","text":"App.js<pre><code>import { useAuth } from \"@arcana/auth-react\";\n\nfunction App() {\n  const { loading, isLoggedIn, loginWithSocial } = useAuth()\n\n  // custom login UI\n  const onConnectClick = async () =&gt; {\n    try {\n      await loginWithSocial('steam'); \n    } catch (err) {\n      console.log({ err });\n      // Handle error\n    }\n  };\n\n  if (loading) {\n    return &lt;p&gt;Loading...&lt;/p&gt;;\n  }\n  if (!isLoggedIn) {\n    return (\n      &lt;button onClick={onConnectClick}&gt;\n        Connect with Steam\n      &lt;/button&gt;\n    );\n  }\n}\n\nexport default App\n</code></pre> <p>That is all. </p> <p>The React/Next.js app is all set for onboarding users via Steam.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/steam-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/steam-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types.</li> <li>Arcana Auth React SDK Reference Guide</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/telegram-oauth/","title":"User Login with Telegram","text":"<p>In this guide, you will learn how a React/Next.js app integrated with the Arcana Auth SDK and  Arcana Auth React SDK can onboard users with a custom login UI through Telegram authentication.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/telegram-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Telegram as the authentication provider.</p> </li> <li> <p>Use the instructions and integrate the React app with the Arcana Auth SDK and the Arcana Auth React SDK before adding code to onboard users.</p> </li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/telegram-oauth/#steps","title":"Steps","text":"<p>Using Telegram to onboard users in a React/Next.js app requires a single line of code.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/telegram-oauth/#step-1-use-loginwithsocial","title":"Step 1: Use <code>loginWithSocial</code>","text":"App.js<pre><code>import { useAuth } from \"@arcana/auth-react\";\n\nfunction App() {\n  const { loading, isLoggedIn, loginWithSocial } = useAuth()\n\n  // custom login UI\n  const onConnectClick = async () =&gt; {\n    try {\n      await loginWithSocial('telegram'); \n    } catch (err) {\n      console.log({ err });\n      // Handle error\n    }\n  };\n\n  if (loading) {\n    return &lt;p&gt;Loading...&lt;/p&gt;;\n  }\n  if (!isLoggedIn) {\n    return (\n      &lt;button onClick={onConnectClick}&gt;\n        Connect with Telegram\n      &lt;/button&gt;\n    );\n  }\n}\n\nexport default App\n</code></pre> <p>That is all. </p> <p>The React/Next.js app is all set for onboarding users via Telegram.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/telegram-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/telegram-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types.</li> <li>Arcana Auth React SDK Reference Guide</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/twitch-oauth/","title":"User Login with Twitch","text":"<p>In this guide, you will learn how a React/Next.js app integrated with the Arcana Auth SDK and  Arcana Auth React SDK can onboard users with a custom login UI through Twitch authentication.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/twitch-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Twitch as the authentication provider.</p> </li> <li> <p>Use the instructions and integrate the React app with the Arcana Auth SDK and the Arcana Auth React SDK before adding code to onboard users.</p> </li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/twitch-oauth/#steps","title":"Steps","text":"<p>Using Twitch to onboard users in a React/Next.js app requires a single line of code.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/twitch-oauth/#step-1-use-loginwithsocial","title":"Step 1: Use <code>loginWithSocial</code>","text":"App.js<pre><code>import { useAuth } from \"@arcana/auth-react\";\n\nfunction App() {\n  const { loading, isLoggedIn, loginWithSocial } = useAuth()\n\n  // custom login UI\n  const onConnectClick = async () =&gt; {\n    try {\n      await loginWithSocial('twitch'); \n    } catch (err) {\n      console.log({ err });\n      // Handle error\n    }\n  };\n\n  if (loading) {\n    return &lt;p&gt;Loading...&lt;/p&gt;;\n  }\n  if (!isLoggedIn) {\n    return (\n      &lt;button onClick={onConnectClick}&gt;\n        Connect with Twitch\n      &lt;/button&gt;\n    );\n  }\n}\n\nexport default App\n</code></pre> <p>That is all. </p> <p>The React/Next.js app is all set for onboarding users via Twitch.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/twitch-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/twitch-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types.</li> <li>Arcana Auth React SDK Reference Guide</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/twitter-oauth/","title":"User Login with Twitter","text":"<p>In this guide, you will learn how a React/Next.js app integrated with the Arcana Auth SDK and  Arcana Auth React SDK can onboard users with a custom login UI through Twitter authentication.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/twitter-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Twitter as the authentication provider.</p> </li> <li> <p>Use the instructions and integrate the React app with the Arcana Auth SDK and the Arcana Auth React SDK before adding code to onboard users.</p> </li> </ul>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/twitter-oauth/#steps","title":"Steps","text":"<p>Using Twitter to onboard users in a React/Next.js app requires a single line of code.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/twitter-oauth/#step-1-use-loginwithsocial","title":"Step 1: Use <code>loginWithSocial</code>","text":"App.js<pre><code>import { useAuth } from \"@arcana/auth-react\";\n\nfunction App() {\n  const { loading, isLoggedIn, loginWithSocial } = useAuth()\n\n  // custom login UI\n  const onConnectClick = async () =&gt; {\n    try {\n      await loginWithSocial('twitter'); \n    } catch (err) {\n      console.log({ err });\n      // Handle error\n    }\n  };\n\n  if (loading) {\n    return &lt;p&gt;Loading...&lt;/p&gt;;\n  }\n  if (!isLoggedIn) {\n    return (\n      &lt;button onClick={onConnectClick}&gt;\n        Connect with Twitter\n      &lt;/button&gt;\n    );\n  }\n}\n\nexport default App\n</code></pre> <p>That is all. </p> <p>The React/Next.js app is all set for onboarding users via Twitter.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/twitter-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/react-nextjs/custom-ui/build-social/twitter-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types.</li> <li>Arcana Auth React SDK Reference Guide</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vanilla/use-plug-play-auth/","title":"Plug-and-Play Login UI","text":"<p>Use the built-in, plug-and-play login UI modal to quickly onboard users in a 'Vanilla HTML/CSS/JS' app integrated with the Arcana Auth Wagmi SDK. </p> Custom Login UI <p>You can onboard users through a custom login UI instead of the built-in plug-and-play one. See how to use custom login UI and onboard users in a 'Vanilla HTML/CSS/JS' app.</p>"},{"location":"auth/onboard/vanilla/use-plug-play-auth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the app that uses <code>wagmi</code> and configure the SDK usage settings for social login providers, manage app chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages for 'Vanilla HTML/CSS/JS'.</p> </li> <li> <p>Integrate 'Vanilla HTML/CSS/JS' app, create and initialize the <code>AuthProvider</code>.</p> </li> </ul>"},{"location":"auth/onboard/vanilla/use-plug-play-auth/#steps","title":"Steps","text":""},{"location":"auth/onboard/vanilla/use-plug-play-auth/#1-connect","title":"1. <code>connect</code>","text":"<p>Use the <code>connect()</code> function to bring up the plug-and-play pop-up modal in the app context and display the available options for user onboarding. Only those options are displayed that were earlier configured by the developer using the Arcana Developer Dashboard. The passwordless login option is enabled by default.</p> <pre><code>await auth.connect();\n</code></pre> Plug-and-Play Login UI Compact Mode <p>While creating the <code>AuthProvider</code>, use <code>connectoOptions</code> to optionally choose the compact mode for the plug-and-play login UI.</p> <p><pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> Login UI Options </p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use..</p> <p>No plug-and-play support for Firebase authentication.</p> <p>The plug and play feature of the Arcana Auth SDK does not support social login via Firebase. Developers must build a custom login UI and add code to onboard users. For details, see onboarding users via Firebase and custom login UI</p> <p>No plug-and-play support for Telegram authentication.</p> <p>The plug and play feature of the Arcana Auth SDK does not support social login via Telegram. Developers must build a custom login UI and add code to onboard users. For details, see [[{{ no such element: dict object['telegram_custom_ui_tag'] }}|onboarding users via Telegram and custom login UI]].</p>"},{"location":"auth/onboard/vanilla/use-plug-play-auth/#whats-next","title":"What's Next?","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/onboard/vanilla/use-plug-play-auth/#see-also","title":"See also","text":"<p>'Vanilla HTML/CSS/JS' integration example: See <code>sample-auth-html-css-js</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/onboard/vanilla/custom-ui/","title":"Custom Login UI","text":"<p>Passwordless Auth </p> <p>Social Providers  </p> <p> IAM Providers </p> <p>Refer to the Auth Examples for sample applications that use custom login UI to onboard users.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-pwdless-auth/","title":"Build Custom Passwordless Auth","text":"<p>In this guide, you will learn how to integrate 'Vanilla HTML/CSS/JS' app with the Arcana Auth SDK and then onboard users through custom login UI and passwordless login option.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-pwdless-auth/#prerequisites","title":"Prerequisites","text":"<ul> <li>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</li> <li>The app must be registered using the Arcana Developer Dashboard. A unique Client ID is assigned after app registration. It is required for integrating the app with the Arcana Auth SDK</li> <li>Follow the instructions as per the app type and integrate the app with the Arcana Auth SDK.</li> </ul> <p>Configuring App</p> <p>Unlike other user onboarding options that require enabling authentication providers, passwordless login can be enabled without any configuration setup using the Arcana Developer Dashboard.</p> <p>Developers can optionally choose to modify the default settings for branding and the Arcana wallet settings in the Arcana Developer Dashboard.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-pwdless-auth/#steps","title":"Steps","text":"<p>Follow these steps for enabling passwordless login in a Web3 app that is integrated with the Arcana Auth SDK.</p> <p>After integrating the app, add the code to onboard users in a passwordless manner using the SDK method listed below. </p> <p>App users must supply an email ID to receive the OTP for logging into the app. An OTP is sent to the specified email ID. When the user provides the same OTP in the app context, authentication is complete and a wallet address is assigned to the user.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-pwdless-auth/#login-with-link","title":"Login with link","text":"<pre><code>await auth.loginWithLink(`${email}`)\n</code></pre> <p>Deprecated</p> <p><code>loginWithLink</code> is deprecated.</p> <p>Use <code>loginWithOTPStart</code>, <code>loginWithOTPComplete</code> for passwordless login with OTP. The OTP will be received via email supplied in <code>loginWithOTPStart</code> call.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-pwdless-auth/#login-with-otp","title":"Login with OTP","text":"<pre><code>try {\nconst loginState = await auth.loginWithOTPStart(\"john.doe@somemail.com\");\nawait loginState.begin()\nif(loginState.isCompleteRequired) {\n  // App is using default app-specific keys\n  // App must ask the user to input a 6-digit code received in mail\n  var userInput = prompt(\"Please enter a 6-digit code:\", \"111111\");\n\n  // Validate if the input is a 6-digit code\n  if (userInput !== null &amp;&amp; \n      userInput.length === 6 &amp;&amp; \n      !isNaN(userInput)) {\n    const complete = await auth.loginWithOTPComplete(\n      userInput, \n      onMFARequired() =&gt; {\n      //Hide overlay, if used in the app\n    });\n    console.log(\"complete:\",complete);\n  } else {\n    console.log(\"Invalid input. Please enter a valid 6-digit code.\");\n  } \n} else {\n  // App is using global keys, built-in OTP input UI is displayed by the SDK\n  // App is not required to add code for OTP input\n}\n} catch (e) {\nconsole.log(e);\n}\n</code></pre> Global vs. App Specific Keys <p>Apps using app-specific keys must use a custom login UI that allows users to input the OTP. In this case, the <code>isCompleteRequired</code> boolean returns <code>true</code> after initiating login with OTP.</p> <p>Apps using global keys are not required to use a custom login UI. A built-in login UI is automatically displayed for the user for OTP. Users must enter the OTP received via email in this UI.</p> MFA Enabled / Disabled <p>During passwordless login via OTP, apps configured for MFA and those using overlays must hide it to enable OTP input. Use the <code>isMFARequired</code> callback in the <code>loginWithOTPComplete</code> method to hide the overlay.</p> <p>Check if the user has logged in successfully:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>Log out the dApp user when requested:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>Your dApp is all set for onboarding users via the passwordless login option.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-pwdless-auth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-pwdless-auth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Configure Social Providers</li> <li>Arcana Auth SDK Errors</li> <li>Arcana Auth SDK Usage Guide</li> <li>Auth SDK Reference</li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-idm/","title":"IAM Providers: Custom Login UI","text":"<p>Developers can choose to not use Arcana's  plug-and-play login UI for third-party IAM providers and instead build a custom login UI to onboard users.</p> <p>In this case, developers must build the custom login UI themselves after configuring the IAM providers in the Arcana Developer Dashboard . This custom login UI must call appropriate user onboarding functions offered by the Arcana Auth SDK for the third-party IAM providers.</p> <p>Cognito </p> <p>Firebase </p>"},{"location":"auth/onboard/vanilla/custom-ui/build-idm/cognito-oauth/","title":"User Login with AWS Cognito","text":"<p>In this guide, you will learn how a Vanilla HTML/CSS/JS app integrated with the Arcana Auth SDK can onboard users via custom login UI and AWS Cognito as the authentication provider.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-idm/cognito-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure AWS Cognito as the authentication provider.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-idm/cognito-oauth/#steps","title":"Steps","text":"<p>Using AWS Cognito to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-idm/cognito-oauth/#call-loginwithsocial-function","title":"Call <code>loginWithSocial</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via AWS Cognito.</p> <pre><code>await auth.loginWithSocial('aws')\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>After onboarding users, developers can add code to access the other Arcana Auth SDK functions in the app. See Arcana Auth SDK Usage Guide for details.</p> <p>Add code in the application to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>Your app is all set for authenticating users via AWS Cognito. Authenticated users can instantly access the Arcana wallet to sign blockchain transactions.</p> Apps using IAM Providers <p>Apps usually use Arcana Auth SDK for user onboarding and blockchain transaction signing. Authentication providers must be set up in the Arcana Developer Dashboard before integrating with the SDK.</p> <p>Some apps might use third-party IAM providers like AWS Cognito for authentication but still use Arcana Auth SDK to access Arcana wallet. The setup is different since third-party IAM providers support authentication verifiers like Google directly.</p> <p>Developers only need to set up the IAM provider in the Arcana Developer Dashboard. They don't need to configure authentication verifiers that work directly with the IAM providers. Use the IAM provider's console, like Cognito Developer Console, to set up authentication verifiers like Google, not the Arcana Developer Dashboard.</p> No Aggregate Login with Cognito  <p>The aggregate login feature does not work for the third-party IAM providers such as Cognito.</p> <p>If a user has the same email ID registered with say a social login provider and with Cognito, logging into an app using Cognito will create a new unique user account even if the user uses the same email as the one used with a social login provider or via the passwordless option. What this means is that the wallet address for the same user will be different when Cognito is used to log in and subsequently a social login provider or passwordless login is used by the same user having the same email ID.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-idm/cognito-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-idm/cognito-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handing authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-idm/firebase-login/","title":"User Login with Firebase","text":"<p>In this guide, you will learn how a Vanilla HTML/CSS/JS app integrated with the Arcana Auth SDK and Firebase SDK can onboard users via custom login UI and Firebase as the authentication provider.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-idm/firebase-login/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the  Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Firebase as the authentication provider.</p> </li> <li> <p>Install the Firebase SDK and integrate the app as explained in the Firebase documentation for iOS apps, Android apps and web apps. Use Firebase authentication as per the Web3 app type, mobile or web app. Once a user is authenticated by Firebase, the developer must obtain the token and user identifier and provide it as input to the <code>loginWithBearer</code> function of the Arcana Auth SDK for onboarding users to Web3.</p> </li> <li> <p>Install the Arcana Auth SDK and integrate the app with the Arcana Auth SDK by using the appropriate integration method as per the app type. After that follow the steps listed below and add code to onboard users to Web3 and enable them to sign blockchain transactions.</p> </li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-idm/firebase-login/#steps","title":"Steps","text":"<p>Using Firebase to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-idm/firebase-login/#call-loginwithbearer-function","title":"Call <code>loginWithBearer</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with both the Firebase SDK as well as the Arcana Auth SDK, before adding code to onboard users via Firebase.</p> App.vue<pre><code>import { initializeApp } from 'firebase/app'\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth'\nimport { AuthProvider, BearerAuthentication } from '@arcana/auth'\n\nconst config = {\n  apiKey: \"AIzaSyBddysLWM9CcpNEVLbUz52YwyQL_uytQX0\", // Obtain this after registering app at Firebase console\n  authDomain: \"arc4n4-docx.firebaseapp.com\", // Project ID Domain setting in the Firebase console\n  projectId: \"some-projectid-example-arc4n4-docx\",\n  storageBucket: \"some-storage-arc4n4-docx.appspot.com\",\n  messagingSenderId: \"2xxxx318486297382\",\n  appId: \"4:3184ddddddd7382:web:8b639axxxxxxxx39f85fe7\",\n  measurementId: \"G-EGccccccLDR\"\n};\n\nconst firebaseApp = initializeApp(config)\nconst firebaseAuth = getAuth(firebaseApp)\n\n//Create Arcana Auth Provider\n// Get client ID 'xar_live_xxxxxx' from Arcana Developer Dashboard\n\nconst auth = new AuthProvider(\"xar_live_123940ytyoxxxxxxx343o404\",{\n  network: \"mainnet\", //change it to testnet or mainnet\n}) \nexport default {\n  name: 'App',\n  data: () =&gt; ({\n    email: '',\n    password: ''\n  }),\n  mounted () {\n    AP.init().then((k) =&gt; console.log(k)).catch(e =&gt; console.error(e)) //Initialize the Auth Provider\n  },\n  methods: {\n    async ultimate (upm) {\n        if (await AP.isLoggedIn()) {\n          window.alert('Already logged in')\n          return\n        }\n        await auth.loginWithBearer(BearerAuthentication.firebase, {\n        uid: upm.user.uid,\n        token: upm.user.accessToken\n        })\n    },\n    async login () { //Sign in existing Firebase users\n        const data = await signInWithEmailAndPassword(firebaseAuth, this.email, this.password)\n        console.log('Data:', data)\n        return this.ultimate(data)\n    },\n    async register () {  //Sign up new users with Firebase Auth\n        const data = await createUserWithEmailAndPassword(firebaseAuth, this.email, this.password)\n        console.log('Data:', data)\n        return this.ultimate(data)\n    }  \n  }\n}\n\n...\n</code></pre> <p>Refer to the Sample Firebase Vue app integration example to see how the <code>loginWithBearer</code> function is used.</p> <p>After onboarding users, developers can add code to access the other Arcana Auth SDK functions in the app. See Arcana Auth SDK Usage Guide for details.</p> <p>That is all. </p> <p>Your app is all set for authenticating users via Firebase. Authenticated users can instantly access the Arcana wallet to sign blockchain transactions.</p> No Aggregate Login with Firebase  <p>The aggregate login feature does not work for third-party IAM providers such as Firebase.</p> <p>If a user has the same email ID registered with say a social login provider and with Firebase, logging into an app using Firebase will create a new unique user account even if the user uses the same email as the one used with a social login provider or via the passwordless option. What this means is that the wallet address for the same user will be different when Firebase is used to log in and subsequently a social login provider or passwordless login is used by the same user having the same email ID.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-idm/firebase-login/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-idm/firebase-login/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handing authentication errors</li> <li>Get Firebase User token</li> <li>Using Firebase Auth</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/","title":"Social Login Providers: Custom Login UI","text":"<p>Developers can choose to not use the plug-and-play login UI and instead build a custom login UI to onboard users. </p> <p>In this case, developers must build custom login UI themselves after configuring the social login providers in the Arcana Developer Dashboard. This custom login UI must call appropriate user onboarding functions offered by the Arcana Auth SDK for every configured social login provider.</p> <p>Apple </p> <p>Discord </p> <p>GitHub </p> <p>Google </p> <p>Steam </p> <p>Telegram </p> <p>Twitch </p> <p>Twitter </p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/apple-oauth/","title":"User Login with Apple","text":"<p>In this guide, you will learn how a 'Vanilla HTML/CSS/JS' app integrated with the Arcana Auth SDK can onboard users via custom login UI and Apple as the authentication provider.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/apple-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the  Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Follow the instructions to configure Apple as the authentication provider.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/apple-oauth/#steps","title":"Steps","text":"<p>Using Apple to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/apple-oauth/#step-1-call-loginwithsocial-function","title":"Step 1: Call <code>loginWithSocial</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via Apple.</p> <pre><code>await auth.loginWithSocial('apple')\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>Add code in the app to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all </p> <p>The Web3 app is all set for onboarding users via Apple. </p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/apple-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/apple-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/discord-oauth/","title":"User Login with Discord","text":"<p>In this guide, you will learn how a Vanilla HTML/CSS/JS app integrated with the Arcana Auth SDK can onboard users via custom login UI and Discord as the authentication provider.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/discord-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Discord as the authentication provider.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/discord-oauth/#steps","title":"Steps","text":"<p>Using Discord to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/discord-oauth/#step-1-call-loginwithsocial-function","title":"Step 1: Call <code>loginWithSocial</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via Discord.</p> <pre><code>await auth.loginWithSocial('discord')\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>Add code in the app to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>The Web3 app is all set for onboarding users via Discord.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/discord-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/discord-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/github-oauth/","title":"User Login with GitHub","text":"<p>In this guide, you will learn how a Vanilla HTML/CSS/JS app integrated with the Arcana Auth SDK can onboard users via custom login UI and GitHub as the authentication provider.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/github-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure GitHub as the authentication provider.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/github-oauth/#steps","title":"Steps","text":"<p>Using GitHub to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/github-oauth/#step-1-call-loginwithsocial-function","title":"Step 1: Call <code>loginWithSocial</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via GitHub.</p> <pre><code>await auth.loginWithSocial('github')\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>Add code in the app to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>The Web3 app is all set for onboarding users via GitHub. </p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/github-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/github-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/google-oauth/","title":"User Login with Google","text":"<p>In this guide, you will learn how a 'Vanilla HTML/CSS/JS' app integrated with the Arcana Auth SDK can onboard users via custom login UI and Google as the authentication provider.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/google-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the  Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Google as the authentication provider.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/google-oauth/#steps","title":"Steps","text":"<p>Using Google to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/google-oauth/#step-1-call-loginwithsocial-function","title":"Step 1: Call <code>loginWithSocial</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via Google.</p> <pre><code>await auth.loginWithSocial('google')\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>Add code in the app to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>The Web3 app is all set for onboarding users via Google. </p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/google-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/google-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/steam-oauth/","title":"User Login with Steam OAuth","text":"<p>In this guide, you will learn how a 'Vanilla HTML/CSS/JS' app integrated with the Arcana Auth SDK can onboard users via custom login UI and Steam as the authentication provider.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/steam-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to obtain Steam API key and set it up in the dashboard for user authentication.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/steam-oauth/#steps","title":"Steps","text":"<p>Using Steam to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/steam-oauth/#step-1-call-loginwithsocial-function","title":"Step 1: Call <code>loginWithSocial</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via Steam OAuth.</p> <pre><code>await auth.loginWithSocial('steam')\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>After onboarding users, developers can add code to access the other Arcana Auth SDK functions in the app. See Arcana Auth SDK Usage Guide for details.</p> <p>Add code in the application to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>Your app is all set for authenticating users via Steam OAuth. Authenticated users can instantly access the Arcana wallet to sign blockchain transactions.</p> <p>No Aggregate Login with Steam OAuth </p> <p>The aggregate login feature does not work for the Steam OAuth login mechanism.</p> <p>When a user has the same email registered with a social login provider and Steam OAuth, logging in with Steam makes a new unique account. Even if the user later logs in with the same email through a social login provider or passwordless, it creates a different wallet address for the same user.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/steam-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/steam-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handing authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/telegram-oauth/","title":"User Login with Telegram","text":"<p>In this guide, you will learn how a 'Vanilla HTML/CSS/JS' app integrated with the Arcana Auth SDK can onboard users via custom login UI and Telegram as the social authentication provider.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/telegram-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Follow the instructions to configure Telegram as the authentication provider.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/telegram-oauth/#steps","title":"Steps","text":"<p>Using Telegram to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/telegram-oauth/#step-1-call-loginwithbearer-function","title":"Step 1: Call <code>loginWithBearer</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via Telegram.</p> index.jsredirect.js <pre><code>window.onload = () =&gt; {\n    const btn = document.getElementById(\"telegram-login\");\n    btn.onclick = () =&gt; {\n        const url = new URL(\"/auth\", \"https://oauth.telegram.org\");\n        url.searchParams.append(\"bot_id\", \"7097916610\");\n        url.searchParams.append(\"scope\", \"profile\");\n        url.searchParams.append(\"origin\", \"https://zcnk5z-5000.csb.app\");\n        url.searchParams.append(\"return_to\", \"https://zcnk5z-5000.csb.app/redirect\");\n        setTimeout(() =&gt; (window.location.href = url.toString()), 50);\n    };\n};\n</code></pre> <pre><code>const { AuthProvider } = window.arcana.auth;\n\nwindow.onload = async () =&gt; {\n    const auth = new AuthProvider( //Use ClientID to create AuthProvider\n        \"xar_dev_92ecc87db08e4c13b1fcd9b37ca9bf54fa874355\"\n    );\n    await auth.init();  //Initialize the Auth Provider\n    const u = new URL(window.location.href);\n    if (u.hash) {\n        const p = new URLSearchParams(u.hash.substring(1));\n        const t = p.get(\"tgAuthResult\");\n        if (t) {\n            cleanURL();\n            //Initiate social login, must set app domain in Telegram bot for successful login\n            await auth.loginWithBearer(\"telegram\", { token: t }); \n        }\n    }\n};\n\nfunction cleanURL() {\n    const cleanUrl = window.location.origin + window.location.pathname;\n    window.history.replaceState(null, \"\", cleanUrl);\n}\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>Add code in the app to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>The Web3 app is all set for onboarding users via Telegram.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/telegram-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/telegram-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/twitch-oauth/","title":"User Login with Twitch","text":"<p>In this guide, you will learn how a 'Vanilla HTML/CSS/JS' app integrated with the Arcana Auth SDK can onboard users via custom login UI and Twitch as the authentication provider.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/twitch-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Twitch as the authentication provider.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/twitch-oauth/#steps","title":"Steps","text":"<p>Using Twitch to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/twitch-oauth/#step-1-call-loginwithsocial-function","title":"Step 1: Call <code>loginWithSocial</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via Twitch.</p> <pre><code>await auth.loginWithSocial('twitch')\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>Add code in the app to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>The Web3 app is all set for onboarding users via Twitch. </p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/twitch-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/twitch-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/twitter-oauth/","title":"User Login with Twitter","text":"<p>In this guide, you will learn how a 'Vanilla HTML/CSS/JS' app integrated with the Arcana Auth SDK can onboard users via custom login UI and Twitter as the authentication provider.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/twitter-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Twitter as the authentication provider.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/twitter-oauth/#steps","title":"Steps","text":"<p>Using Twitter to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/twitter-oauth/#step-1-call-loginwithsocial-function","title":"Step 1: Call <code>loginWithSocial</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via Twitter.</p> <pre><code>await auth.loginWithSocial('twitter')\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>Add code in the application to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>The Web3 app is all set for onboarding users via Twitter. </p> <p>No Aggregate Login with Twitter OAuth </p> <p>The aggregate login feature does not work for the Steam OAuth login mechanism.</p> <p>When a user has the same email registered with a social login provider and Steam OAuth, logging in with Steam makes a new unique account. Even if the user later logs in with the same email through a social login provider or passwordless, it creates a different wallet address for the same user.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/twitter-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vanilla/custom-ui/build-social/twitter-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vue/use-plug-play-auth/","title":"Plug-and-Play Login UI","text":"<p>Use the built-in, plug-and-play login UI modal to quickly onboard users in a 'Vue' app integrated with the Arcana Auth Wagmi SDK. </p> Custom Login UI <p>You can onboard users through a custom login UI instead of the built-in plug-and-play one. See how to use custom login UI and onboard users in a 'Vue' app.</p>"},{"location":"auth/onboard/vue/use-plug-play-auth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the app that uses <code>wagmi</code> and configure the SDK usage settings for social login providers, manage app chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages for 'Vue'.</p> </li> <li> <p>Integrate 'Vue' app, create and initialize the <code>AuthProvider</code>.</p> </li> </ul>"},{"location":"auth/onboard/vue/use-plug-play-auth/#steps","title":"Steps","text":""},{"location":"auth/onboard/vue/use-plug-play-auth/#1-connect","title":"1. <code>connect</code>","text":"<p>Use the <code>connect()</code> function to bring up the plug-and-play pop-up modal in the app context and display the available options for user onboarding. Only those options are displayed that were earlier configured by the developer using the Arcana Developer Dashboard. The passwordless login option is enabled by default.</p> <pre><code>await auth.connect();\n</code></pre> Plug-and-Play Login UI Compact Mode <p>While creating the <code>AuthProvider</code>, use <code>connectoOptions</code> to optionally choose the compact mode for the plug-and-play login UI.</p> <p><pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> Login UI Options </p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use..</p> <p>No plug-and-play support for Firebase authentication.</p> <p>The plug and play feature of the Arcana Auth SDK does not support social login via Firebase. Developers must build a custom login UI and add code to onboard users. For details, see onboarding users via Firebase and custom login UI</p> <p>No plug-and-play support for Telegram authentication.</p> <p>The plug and play feature of the Arcana Auth SDK does not support social login via Telegram. Developers must build a custom login UI and add code to onboard users. For details, see [[{{ no such element: dict object['telegram_custom_ui_tag'] }}|onboarding users via Telegram and custom login UI]].</p>"},{"location":"auth/onboard/vue/use-plug-play-auth/#whats-next","title":"What's Next?","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/onboard/vue/use-plug-play-auth/#see-also","title":"See also","text":"<p>'Vue' integration example: See <code>sample-auth-vue</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/onboard/vue/custom-ui/","title":"Custom Login UI","text":"<p>Passwordless Auth </p> <p>Social Login Provider  </p> <p>IAM Provider </p>"},{"location":"auth/onboard/vue/custom-ui/build-pwdless-auth/","title":"Build Custom Passwordless Auth","text":"<p>In this guide, you will learn how to integrate Vue app with the Arcana Auth SDK and then onboard users through custom login UI and passwordless login option.</p>"},{"location":"auth/onboard/vue/custom-ui/build-pwdless-auth/#prerequisites","title":"Prerequisites","text":"<ul> <li>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</li> <li>The app must be registered using the Arcana Developer Dashboard. A unique Client ID is assigned after app registration. It is required for integrating the app with the Arcana Auth SDK</li> <li>Follow the instructions as per the app type and integrate the app with the Arcana Auth SDK.</li> </ul> <p>Configuring App</p> <p>Unlike other user onboarding options that require enabling authentication providers, passwordless login can be enabled without any configuration setup using the Arcana Developer Dashboard.</p> <p>Developers can optionally choose to modify the default settings for branding and the Arcana wallet settings in the Arcana Developer Dashboard.</p>"},{"location":"auth/onboard/vue/custom-ui/build-pwdless-auth/#steps","title":"Steps","text":"<p>Follow these steps for enabling passwordless login in a Web3 app that is integrated with the Arcana Auth SDK.</p> <p>After integrating the app, add the code to onboard users in a passwordless manner using the SDK method listed below. </p> <p>App users must supply an email ID to receive the OTP for logging into the app. An OTP is sent to the specified email ID. When the user provides the same OTP in the app context, authentication is complete and a wallet address is assigned to the user.</p>"},{"location":"auth/onboard/vue/custom-ui/build-pwdless-auth/#login-with-link","title":"Login with link","text":"<pre><code>await auth.loginWithLink(`${email}`)\n</code></pre> <p>Deprecated</p> <p><code>loginWithLink</code> is deprecated.</p> <p>Use <code>loginWithOTPStart</code>, <code>loginWithOTPComplete</code> for passwordless login with OTP. The OTP will be received via email supplied in <code>loginWithOTPStart</code> call.</p>"},{"location":"auth/onboard/vue/custom-ui/build-pwdless-auth/#login-with-otp","title":"Login with OTP","text":"<pre><code>try {\nconst loginState = await auth.loginWithOTPStart(\"john.doe@somemail.com\");\nawait loginState.begin()\nif(loginState.isCompleteRequired) {\n  // App is using default app-specific keys\n  // App must ask the user to input a 6-digit code received in mail\n  var userInput = prompt(\"Please enter a 6-digit code:\", \"111111\");\n\n  // Validate if the input is a 6-digit code\n  if (userInput !== null &amp;&amp; \n      userInput.length === 6 &amp;&amp; \n      !isNaN(userInput)) {\n    const complete = await auth.loginWithOTPComplete(\n      userInput, \n      onMFARequired() =&gt; {\n      //Hide overlay, if used in the app\n    });\n    console.log(\"complete:\",complete);\n  } else {\n    console.log(\"Invalid input. Please enter a valid 6-digit code.\");\n  } \n} else {\n  // App is using global keys, built-in OTP input UI is displayed by the SDK\n  // App is not required to add code for OTP input\n}\n} catch (e) {\nconsole.log(e);\n}\n</code></pre> Global vs. App Specific Keys <p>Apps using app-specific keys must use a custom login UI that allows users to input the OTP. In this case, the <code>isCompleteRequired</code> boolean returns <code>true</code> after initiating login with OTP.</p> <p>Apps using global keys are not required to use a custom login UI. A built-in login UI is automatically displayed for the user for OTP. Users must enter the OTP received via email in this UI.</p> MFA Enabled / Disabled <p>During passwordless login via OTP, apps configured for MFA and those using overlays must hide it to enable OTP input. Use the <code>isMFARequired</code> callback in the <code>loginWithOTPComplete</code> method to hide the overlay.</p> <p>Check if the user has logged in successfully:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>Log out the dApp user when requested:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>Your dApp is all set for onboarding users via the passwordless login option.</p>"},{"location":"auth/onboard/vue/custom-ui/build-pwdless-auth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vue/custom-ui/build-pwdless-auth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Configure Social Providers</li> <li>Arcana Auth SDK Errors</li> <li>Arcana Auth SDK Usage Guide</li> <li>Auth SDK Reference</li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-idm/","title":"IAM Providers: Custom Login UI","text":"<p>Developers can choose to not use Arcana's  plug-and-play login UI for third-party IAM providers and instead build a custom login UI to onboard users.</p> <p>In this case, developers must build the custom login UI themselves after configuring the IAM providers in the Arcana Developer Dashboard. This custom login UI must call appropriate user onboarding functions offered by the Arcana Auth SDK for the third-party IAM providers.</p> <p>Cognito </p> <p>Firebase </p>"},{"location":"auth/onboard/vue/custom-ui/build-idm/cognito-oauth/","title":"User Login with AWS Cognito","text":"<p>In this guide, you will learn how a Vue app integrated with the Arcana Auth SDK can onboard users via custom login UI and AWS Cognito as the authentication provider.</p>"},{"location":"auth/onboard/vue/custom-ui/build-idm/cognito-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure AWS Cognito as the authentication provider.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-idm/cognito-oauth/#steps","title":"Steps","text":"<p>Using AWS Cognito to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vue/custom-ui/build-idm/cognito-oauth/#call-loginwithsocial-function","title":"Call <code>loginWithSocial</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via AWS Cognito.</p> <pre><code>await auth.loginWithSocial('aws')\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>After onboarding users, developers can add code to access the other Arcana Auth SDK functions in the app. See Arcana Auth SDK Usage Guide for details.</p> <p>Add code in the application to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>Your app is all set for authenticating users via AWS Cognito. Authenticated users can instantly access the Arcana wallet to sign blockchain transactions.</p> Apps using IAM Providers <p>Apps usually use Arcana Auth SDK for user onboarding and blockchain transaction signing. Authentication providers must be set up in the Arcana Developer Dashboard before integrating with the SDK.</p> <p>Some apps might use third-party IAM providers like AWS Cognito for authentication but still use Arcana Auth SDK to access Arcana wallet. The setup is different since third-party IAM providers support authentication verifiers like Google directly.</p> <p>Developers only need to set up the IAM provider in the Arcana Developer Dashboard. They don't need to configure authentication verifiers that work directly with the IAM providers. Use the IAM provider's console, like Cognito Developer Console, to set up authentication verifiers like Google, not the Arcana Developer Dashboard.</p> No Aggregate Login with Cognito  <p>The aggregate login feature does not work for the third-party IAM providers such as Cognito.</p> <p>If a user has the same email ID registered with say a social login provider and with Cognito, logging into an app using Cognito will create a new unique user account even if the user uses the same email as the one used with a social login provider or via the passwordless option. What this means is that the wallet address for the same user will be different when Cognito is used to log in and subsequently a social login provider or passwordless login is used by the same user having the same email ID.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vue/custom-ui/build-idm/cognito-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vue/custom-ui/build-idm/cognito-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handing authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-idm/firebase-login/","title":"User Login with Firebase","text":"<p>In this guide, you will learn how a Vue app integrated with the Arcana Auth SDK and Firebase SDK can onboard users via custom login UI and Firebase as the authentication provider.</p>"},{"location":"auth/onboard/vue/custom-ui/build-idm/firebase-login/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the  Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Firebase as the authentication provider.</p> </li> <li> <p>Install the Firebase SDK and integrate the app as explained in the Firebase documentation for iOS apps, Android apps and web apps. Use Firebase authentication as per the Web3 app type, mobile or web app. Once a user is authenticated by Firebase, the developer must obtain the token and user identifier and provide it as input to the <code>loginWithBearer</code> function of the Arcana Auth SDK for onboarding users to Web3.</p> </li> <li> <p>Install the Arcana Auth SDK and integrate the app with the Arcana Auth SDK by using the appropriate integration method as per the app type. After that follow the steps listed below and add code to onboard users to Web3 and enable them to sign blockchain transactions.</p> </li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-idm/firebase-login/#steps","title":"Steps","text":"<p>Using Firebase to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vue/custom-ui/build-idm/firebase-login/#call-loginwithbearer-function","title":"Call <code>loginWithBearer</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with both the Firebase SDK as well as the Arcana Auth SDK, before adding code to onboard users via Firebase.</p> App.vue<pre><code>import { initializeApp } from 'firebase/app'\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth'\nimport { AuthProvider, BearerAuthentication } from '@arcana/auth'\n\nconst config = {\n  apiKey: \"AIzaSyBddysLWM9CcpNEVLbUz52YwyQL_uytQX0\", // Obtain this after registering app at Firebase console\n  authDomain: \"arc4n4-docx.firebaseapp.com\", // Project ID Domain setting in the Firebase console\n  projectId: \"some-projectid-example-arc4n4-docx\",\n  storageBucket: \"some-storage-arc4n4-docx.appspot.com\",\n  messagingSenderId: \"2xxxx318486297382\",\n  appId: \"4:3184ddddddd7382:web:8b639axxxxxxxx39f85fe7\",\n  measurementId: \"G-EGccccccLDR\"\n};\n\nconst firebaseApp = initializeApp(config)\nconst firebaseAuth = getAuth(firebaseApp)\n\n//Create Arcana Auth Provider\n// Get client ID 'xar_live_xxxxxx' from Arcana Developer Dashboard\n\nconst auth = new AuthProvider(\"xar_live_123940ytyoxxxxxxx343o404\",{\n  network: \"mainnet\", //change it to testnet or mainnet\n}) \nexport default {\n  name: 'App',\n  data: () =&gt; ({\n    email: '',\n    password: ''\n  }),\n  mounted () {\n    AP.init().then((k) =&gt; console.log(k)).catch(e =&gt; console.error(e)) //Initialize the Auth Provider\n  },\n  methods: {\n    async ultimate (upm) {\n        if (await AP.isLoggedIn()) {\n          window.alert('Already logged in')\n          return\n        }\n        await auth.loginWithBearer(BearerAuthentication.firebase, {\n        uid: upm.user.uid,\n        token: upm.user.accessToken\n        })\n    },\n    async login () { //Sign in existing Firebase users\n        const data = await signInWithEmailAndPassword(firebaseAuth, this.email, this.password)\n        console.log('Data:', data)\n        return this.ultimate(data)\n    },\n    async register () {  //Sign up new users with Firebase Auth\n        const data = await createUserWithEmailAndPassword(firebaseAuth, this.email, this.password)\n        console.log('Data:', data)\n        return this.ultimate(data)\n    }  \n  }\n}\n\n...\n</code></pre> <p>Refer to the Sample Firebase Vue app integration example to see how the <code>loginWithBearer</code> function is used.</p> <p>After onboarding users, developers can add code to access the other Arcana Auth SDK functions in the app. See Arcana Auth SDK Usage Guide for details.</p> <p>That is all. </p> <p>Your app is all set for authenticating users via Firebase. Authenticated users can instantly access the Arcana wallet to sign blockchain transactions.</p> No Aggregate Login with Firebase  <p>The aggregate login feature does not work for third-party IAM providers such as Firebase.</p> <p>If a user has the same email ID registered with say a social login provider and with Firebase, logging into an app using Firebase will create a new unique user account even if the user uses the same email as the one used with a social login provider or via the passwordless option. What this means is that the wallet address for the same user will be different when Firebase is used to log in and subsequently a social login provider or passwordless login is used by the same user having the same email ID.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vue/custom-ui/build-idm/firebase-login/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vue/custom-ui/build-idm/firebase-login/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handing authentication errors</li> <li>Get Firebase User token</li> <li>Using Firebase Auth</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-social/","title":"Social Login Providers: Custom Login UI","text":"<p>Developers can choose to not use the plug-and-play login UI and instead build a custom login UI to onboard users. </p> <p>In this case, developers must build custom login UI themselves after configuring the social login providers in the Arcana Developer Dashboard. This custom login UI must call appropriate user onboarding functions offered by the Arcana Auth SDK for every configured social login provider.</p> <p>Apple </p> <p>Discord </p> <p>GitHub </p> <p>Google </p> <p>Steam </p> <p>Telegram </p> <p>Twitch </p> <p>Twitter </p>"},{"location":"auth/onboard/vue/custom-ui/build-social/apple-oauth/","title":"User Login with Apple","text":"<p>In this guide, you will learn how a Vue app integrated with the Arcana Auth SDK can onboard users via custom login UI and Apple as the authentication provider.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/apple-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the  Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Follow the instructions to configure Apple as the authentication provider.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-social/apple-oauth/#steps","title":"Steps","text":"<p>Using Apple to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/apple-oauth/#step-1-call-loginwithsocial-function","title":"Step 1: Call <code>loginWithSocial</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via Apple.</p> <pre><code>await auth.loginWithSocial('apple')\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>Add code in the app to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all </p> <p>The Web3 app is all set for onboarding users via Apple. </p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/apple-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/apple-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-social/discord-oauth/","title":"User Login with Discord","text":"<p>In this guide, you will learn how a Vue app integrated with the Arcana Auth SDK can onboard users via custom login UI and Discord as the authentication provider.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/discord-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Discord as the authentication provider.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-social/discord-oauth/#steps","title":"Steps","text":"<p>Using Discord to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/discord-oauth/#step-1-call-loginwithsocial-function","title":"Step 1: Call <code>loginWithSocial</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via Discord.</p> <pre><code>await auth.loginWithSocial('discord')\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>Add code in the app to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>The Web3 app is all set for onboarding users via Discord.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/discord-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/discord-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-social/github-oauth/","title":"User Login with GitHub","text":"<p>In this guide, you will learn how a Vue app integrated with the Arcana Auth SDK can onboard users via custom login UI and GitHub as the authentication provider.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/github-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure GitHub as the authentication provider.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-social/github-oauth/#steps","title":"Steps","text":"<p>Using GitHub to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/github-oauth/#step-1-call-loginwithsocial-function","title":"Step 1: Call <code>loginWithSocial</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via GitHub.</p> <pre><code>await auth.loginWithSocial('github')\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>Add code in the app to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>The Web3 app is all set for onboarding users via GitHub. </p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/github-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/github-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-social/google-oauth/","title":"User Login with Google","text":"<p>In this guide, you will learn how a Vue app integrated with the Arcana Auth SDK can onboard users via custom login UI and Google as the authentication provider.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/google-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the  Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Google as the authentication provider.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-social/google-oauth/#steps","title":"Steps","text":"<p>Using Google to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/google-oauth/#step-1-call-loginwithsocial-function","title":"Step 1: Call <code>loginWithSocial</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via Google.</p> <pre><code>await auth.loginWithSocial('google')\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>Add code in the app to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>The Web3 app is all set for onboarding users via Google. </p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/google-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/google-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-social/steam-oauth/","title":"User Login with Steam OAuth","text":"<p>In this guide, you will learn how a Vue app integrated with the Arcana Auth SDK can onboard users via custom login UI and Steam as the authentication provider.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/steam-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to obtain Steam API key and set it up in the dashboard for user authentication.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-social/steam-oauth/#steps","title":"Steps","text":"<p>Using Steam to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/steam-oauth/#step-1-call-loginwithsocial-function","title":"Step 1: Call <code>loginWithSocial</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via Steam OAuth.</p> <pre><code>await auth.loginWithSocial('steam')\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>After onboarding users, developers can add code to access the other Arcana Auth SDK functions in the app. See Arcana Auth SDK Usage Guide for details.</p> <p>Add code in the application to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>Your app is all set for authenticating users via Steam OAuth. Authenticated users can instantly access the Arcana wallet to sign blockchain transactions.</p> <p>No Aggregate Login with Steam OAuth </p> <p>The aggregate login feature does not work for the Steam OAuth login mechanism.</p> <p>When a user has the same email registered with a social login provider and Steam OAuth, logging in with Steam makes a new unique account. Even if the user later logs in with the same email through a social login provider or passwordless, it creates a different wallet address for the same user.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/steam-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/steam-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handing authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-social/telegram-oauth/","title":"User Login with Telegram","text":"<p>In this guide, you will learn how a Vue app integrated with the Arcana Auth SDK can onboard users via custom login UI and Telegram as the social authentication provider.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/telegram-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Follow the instructions to configure Telegram as the authentication provider.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-social/telegram-oauth/#steps","title":"Steps","text":"<p>Using Telegram to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/telegram-oauth/#step-1-call-loginwithbearer-function","title":"Step 1: Call <code>loginWithBearer</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via Telegram.</p> index.jsredirect.js <pre><code>window.onload = () =&gt; {\n    const btn = document.getElementById(\"telegram-login\");\n    btn.onclick = () =&gt; {\n        const url = new URL(\"/auth\", \"https://oauth.telegram.org\");\n        url.searchParams.append(\"bot_id\", \"7097916610\");\n        url.searchParams.append(\"scope\", \"profile\");\n        url.searchParams.append(\"origin\", \"https://zcnk5z-5000.csb.app\");\n        url.searchParams.append(\"return_to\", \"https://zcnk5z-5000.csb.app/redirect\");\n        setTimeout(() =&gt; (window.location.href = url.toString()), 50);\n    };\n};\n</code></pre> <pre><code>const { AuthProvider } = window.arcana.auth;\n\nwindow.onload = async () =&gt; {\n    const auth = new AuthProvider( //Use ClientID to create AuthProvider\n        \"xar_dev_92ecc87db08e4c13b1fcd9b37ca9bf54fa874355\"\n    );\n    await auth.init();  //Initialize the Auth Provider\n    const u = new URL(window.location.href);\n    if (u.hash) {\n        const p = new URLSearchParams(u.hash.substring(1));\n        const t = p.get(\"tgAuthResult\");\n        if (t) {\n            cleanURL();\n            //Initiate social login, must set app domain in Telegram bot for successful login\n            await auth.loginWithBearer(\"telegram\", { token: t }); \n        }\n    }\n};\n\nfunction cleanURL() {\n    const cleanUrl = window.location.origin + window.location.pathname;\n    window.history.replaceState(null, \"\", cleanUrl);\n}\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>Add code in the app to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>The Web3 app is all set for onboarding users via Telegram.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/telegram-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/telegram-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-social/twitch-oauth/","title":"User Login with Twitch","text":"<p>In this guide, you will learn how a Vue app integrated with the Arcana Auth SDK can onboard users via custom login UI and Twitch as the authentication provider.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/twitch-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Twitch as the authentication provider.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-social/twitch-oauth/#steps","title":"Steps","text":"<p>Using Twitch to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/twitch-oauth/#step-1-call-loginwithsocial-function","title":"Step 1: Call <code>loginWithSocial</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via Twitch.</p> <pre><code>await auth.loginWithSocial('twitch')\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>Add code in the app to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>The Web3 app is all set for onboarding users via Twitch. </p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/twitch-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/twitch-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-social/twitter-oauth/","title":"User Login with Twitter","text":"<p>In this guide, you will learn how a Vue app integrated with the Arcana Auth SDK can onboard users via custom login UI and Twitter as the authentication provider.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/twitter-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>Use the Arcana Developer Dashboard to register the app and obtain a unique Client ID required for integrating the app with the Arcana Auth SDK.</p> </li> <li> <p>Carefully follow the instructions to configure Twitter as the authentication provider.</p> </li> <li> <p>Use the appropriate integration method as per the app type and integrate the app with the Arcana Auth SDK before accessing the user onboarding function of the Arcana Auth SDK.</p> </li> </ul>"},{"location":"auth/onboard/vue/custom-ui/build-social/twitter-oauth/#steps","title":"Steps","text":"<p>Using Twitter to onboard users in a Web3 app that is integrated with the Arcana Auth SDK requires a single line of code.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/twitter-oauth/#step-1-call-loginwithsocial-function","title":"Step 1: Call <code>loginWithSocial</code> function","text":"<p>Make sure that all the prerequisites listed above are met. The app should be successfully registered, configured, and integrated with the Arcana Auth SDK, before adding code to onboard users via Twitter.</p> <pre><code>await auth.loginWithSocial('twitter')\n</code></pre> <p>Check if a user is logged in:</p> <pre><code>const connected = await auth.isLoggedIn()\n</code></pre> <p>Add code in the application to log out an authenticated user:</p> <pre><code>await auth.logout()\n</code></pre> <p>That is all. </p> <p>The Web3 app is all set for onboarding users via Twitter. </p> <p>No Aggregate Login with Twitter OAuth </p> <p>The aggregate login feature does not work for the Steam OAuth login mechanism.</p> <p>When a user has the same email registered with a social login provider and Steam OAuth, logging in with Steam makes a new unique account. Even if the user later logs in with the same email through a social login provider or passwordless, it creates a different wallet address for the same user.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/twitter-oauth/#whats-next","title":"What's Next?","text":"<p>Authenticated users can instantly access the in-app Arcana wallet UI for signing blockchain transactions. Use the <code>AuthProvider</code> EIP-1193 standard Ethereum provider to call JSON/RPC functions and Web3 wallet operations in the app. Learn more...</p>"},{"location":"auth/onboard/vue/custom-ui/build-social/twitter-oauth/#see-also","title":"See also","text":"<ul> <li>Authentication Types</li> <li>Handling authentication errors</li> <li>Auth Examples</li> </ul>"},{"location":"auth/onboard/wagmi/wagmi-custom-ui/","title":"Custom Login UI","text":"<p>Onboard users in a 'Wagmi' app integrated with the Arcana Auth SDK through a custom login UI.</p> Plug-and-Play Login UI <p>You can onboard users in a 'Wagmi' app faster through the built-in, plug-and-play login UI instead of choosing to build a custom login UI. Learn more...</p>"},{"location":"auth/onboard/wagmi/wagmi-custom-ui/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the Wagmi app and configure SDK usage settings for social login providers, manage app chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages for 'Wagmi'.</p> </li> <li> <p>Integrate 'Wagmi' app and create <code>AuthProvider</code>, <code>ArcanaConnector</code>.</p> </li> </ul>"},{"location":"auth/onboard/wagmi/wagmi-custom-ui/#steps","title":"Steps","text":""},{"location":"auth/onboard/wagmi/wagmi-custom-ui/#1-configure-arcanaconnector","title":"1. Configure <code>ArcanaConnector</code>","text":"<p><code>ArcanaConnector</code> is created earlier as part of SDK integration. When using a custom login UI to onboard users, configure <code>ArcanaConnector</code> differently.</p> <p>Add code in the custom UI for onboarding via social login and passwordless options by using the <code>setLogin</code> function. </p> <p>Enable Authentication Provider</p> <pre><code>import { AuthProvider } from \"@arcana/auth\";\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\";\nimport { polygon, polygonAmoy } from \"wagmi/chains\";\nimport { configureChains, createClient, Chain } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\n\n/* Using Custom UI for user login via Google */\nconst auth = new AuthProvider(`${arcana_client_id}`) // Singleton\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: auth,        \n      login:  {\n          provider: 'google', //See 'Custom Login UI' section in the documentation for other supported providers.\n        } // Optional, specify here during ArcanaConnector instantiation or in the setLogin function\n    },\n  });\n};\n\n// Custom UI Alternative \n// Use setLogin function after creating the connector.\n\n/*\nconst auth = new AuthProvider(`${arcana_client_id}`) // Singleton\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: auth             \n    },\n  });\n};\n\nconnector.setLogin({\n  provider: 'google'\n})\n*/\n\n...\n</code></pre> <p>Enable Passwordless Login</p> <pre><code>import { AuthProvider } from \"@arcana/auth\";\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\";\nimport { polygon, polygonAmoy } from \"wagmi/chains\";\nimport { configureChains, createClient, Chain } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\n\n/* Using Custom UI for Passwordless user login */\nconst auth = new AuthProvider(`${arcana_client_id}`) // Singleton\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: auth,        \n      login:  {\n          provider: 'passwordless', \n          email: 'abc@example.com' //optional\n        } // Optional, specify login details here or during ArcanaConnector instantiation or in the setLogin function\n    },\n  });\n};\n\n// Custom UI Alternative \n// Use setLogin function after creating the connector.\n\n/*\nconst auth = new AuthProvider(`${arcana_client_id}`) // Singleton\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: auth             \n    },\n  });\n};\n\nconnector.setLogin({\n  provider: 'passwordless',\n  email: 'abc@example.com' //optional\n})\n*/\n\n...\n</code></pre> <p>Single Provider Optimization</p> <p>When using a single social login provider, specify it when creating ArcanaConnector to optimize onboarding. There's no need to use setLogin later in the custom login UI code.</p> <p>For multiple social login providers, create ArcanaConnector without specifying a provider. Use the setLogin function later based on the user's choice.</p>"},{"location":"auth/onboard/wagmi/wagmi-custom-ui/#2-set-up-wagmiconfig","title":"2. Set up <code>WagmiConfig</code>","text":"<p>Use the <code>ArcanaConnector</code> and set up Wagmi config.</p> Wagmi 2.0.0Wagmi 1.0.0 <pre><code>import { http, createConfig } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\nimport { coinbaseWallet, injected, walletConnect } from 'wagmi/connectors'\nimport { AuthProvider } from '@arcana/auth';\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\"\n\nlet auth: AuthProvider | null;\n\nif (!auth) {\n  auth = new AuthProvider(\n    \"xar_dev_c2fb7be163754e57d384e24257ea2c8d2a5dd31a\"\n  );\n}\n\nexport const connector = () =&gt; {\n  return new ArcanaConnector({auth,})\n};\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [\n    injected(),\n    coinbaseWallet({ appName: 'Create Wagmi' }),\n    walletConnect({ projectId: import.meta.env.VITE_WC_PROJECT_ID }),\n    connector(),\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n\ndeclare module 'wagmi' {\n  interface Register {\n    config: typeof config\n  }\n}\n</code></pre> <pre><code>// Note:  \n// This sample code is for \n// wagmi versions 1.x.y and auth-wagmi 2.a.b\nimport { configureChains, createConfig, WagmiConfig } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\";\nimport { polygon, polygonAmoy } from \"wagmi/chains\";\nimport { newAuthProvider } from \"./utils/newArcanaAuth\";\nimport { useAccount, useConnect, useDisconnect, useBalance } from 'wagmi'\nimport \"../styles/globals.css\";\n\nconst { chains, provider, webSocketProvider } = configureChains(\n  [mainnet, polygon, polygonAmoy],\n  [publicProvider()],\n  { targetQuorum: 1 }\n);\n\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: newAuthProvider(),\n      login: {\n        provider: \"google\",\n      },\n    },\n  });\n};\n\nconst { chains, publicClient } = configureChains(\n  [polygon, polygonAmoy],\n  [publicProvider()]\n);\n\nexport const wagmiEntity = createConfig({\n  autoConnect: true,\n  connectors: [connector(chains)],\n  publicClient,\n});\n...\n</code></pre>"},{"location":"auth/onboard/wagmi/wagmi-custom-ui/#3-initialize-wagmi-app-components","title":"3. Initialize Wagmi App Components","text":"Wagmi 2.0Wagmi 1.0 <pre><code>//\n// For apps using Wagmi versions v2.a.b and auth-wagmi v3.x.y\n//\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { Buffer } from 'buffer'\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { WagmiProvider } from 'wagmi'\n\nimport App from './App.tsx'\nimport { config } from './wagmi.ts'\n\nimport './index.css'\n\nglobalThis.Buffer = Buffer\n\nconst queryClient = new QueryClient()\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  &lt;React.StrictMode&gt;\n    &lt;WagmiProvider config={config}&gt;\n      &lt;QueryClientProvider client={queryClient}&gt;\n        &lt;App /&gt;\n      &lt;/QueryClientProvider&gt;\n    &lt;/WagmiProvider&gt;\n  &lt;/React.StrictMode&gt;,\n)\n</code></pre> <pre><code>//\n// For apps using Wagmi versions v1.a.b and auth-wagmi v2.x.y\n//\nfunction App({ Component, pageProps }: AppProps) {\n  return (\n    &lt;WagmiConfig config={wagmiEntity}&gt;\n      &lt;Component {...pageProps} /&gt;\n    &lt;/WagmiConfig&gt;\n  );\n}\n</code></pre>"},{"location":"auth/onboard/wagmi/wagmi-custom-ui/#whats-next","title":"What's Next?","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/onboard/wagmi/wagmi-custom-ui/#see-also","title":"See also","text":"<p>'Wagmi' integration example: See <code>sample-auth-wagmi-2`, `sample-auth-wagmi-viem`, `sample-auth-wagmi</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> <li> <p>Arcana Auth SDK Usage Guide</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth Wagmi SDK Quick Links</p> <ul> <li>Auth Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/onboard/wagmi/wagmi-pnp-ui/","title":"Plug-and-Play Login UI","text":"<p>Use the built-in, plug-and-play login UI modal to quickly onboard users in a 'Wagmi' app integrated with the Arcana Auth Wagmi SDK. </p> Custom Login UI <p>You can onboard users through a custom login UI instead of the built-in plug-and-play one. See how to use custom login UI and onboard users in a 'Wagmi' app.</p>"},{"location":"auth/onboard/wagmi/wagmi-pnp-ui/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the Wagmi app and configure Arcana Auth SDK SDK usage settings for social login providers, manage app chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages for 'Wagmi'.</p> </li> <li> <p>Integrate 'Wagmi' app and create <code>AuthProvider</code>, <code>ArcanaConnector</code>.</p> </li> </ul>"},{"location":"auth/onboard/wagmi/wagmi-pnp-ui/#steps","title":"Steps","text":""},{"location":"auth/onboard/wagmi/wagmi-pnp-ui/#1-setup-wagmiconfig","title":"1. Setup <code>WagmiConfig</code>","text":"<p>Use the <code>ArcanaConnector</code> created during app integration to set up Wagmi config.</p> Wagmi 2.0Wagmi 1.0 <pre><code>//\n// For apps using Wagmi versions v2.a.b and auth-wagmi v3.x.y\n//\n\nimport { http, createConfig } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\nimport { coinbaseWallet, injected, walletConnect } from 'wagmi/connectors'\nimport { AuthProvider } from '@arcana/auth'\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\"\n\nlet auth: AuthProvider | null;\n\nif (!auth) {\n  auth = new AuthProvider(\n    \"Your-app-Client-ID\"\n  );\n}\n\nconst connector = new ArcanaConnector({ auth });\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [\n    injected(),\n    coinbaseWallet({ appName: 'Create Wagmi' }),\n    walletConnect({ projectId: import.meta.env.VITE_WC_PROJECT_ID }),\n    connector(),\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n\ndeclare module 'wagmi' {\n  interface Register {\n    config: typeof config\n  }\n}\n...\n</code></pre> <pre><code>//   \n// For apps using Wagmi versions v1.x.y and auth-wagmi v2.a.b\n//\n\nimport { configureChains, createConfig, WagmiConfig } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { polygon, polygonAmoy } from \"wagmi/chains\";\nimport { useAccount, useConnect, useDisconnect, useBalance } from 'wagmi'\nimport \"../styles/globals.css\";\nimport { AuthProvider } from '@arcana/auth'\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\"\n\nlet auth: AuthProvider | null;\n\nif (!auth) {\n  auth = new AuthProvider(\n    \"Your-app-Client-ID\"\n  );\n}\n\nconst { chains, provider, webSocketProvider } = configureChains(\n  [mainnet, polygon, polygonAmoy],\n  [publicProvider()],\n  { targetQuorum: 1 }\n);\n\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: auth,\n    },\n  });\n};\n\nconst { chains, publicClient } = configureChains(\n  [polygon, polygonAmoy],\n  [publicProvider()]\n);\n\nexport const wagmiEntity = createConfig({\n  autoConnect: true,\n  connectors: [connector(chains)],\n  publicClient,\n});\n...\n</code></pre>"},{"location":"auth/onboard/wagmi/wagmi-pnp-ui/#2-initialize-wagmiprovider","title":"2. Initialize <code>WagmiProvider</code>","text":"<p>Use the Wagmi config to initialize the <code>WagmiProvider</code>.</p> Wagmi 2.0Wagmi 1.0 <pre><code>//\n// For apps using Wagmi versions v2.a.b and auth-wagmi v3.x.y\n//\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { Buffer } from 'buffer'\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { WagmiProvider } from 'wagmi'\n\nimport App from './App.tsx'\nimport { config } from './wagmi.ts'\n\nimport './index.css'\n\nglobalThis.Buffer = Buffer\n\nconst queryClient = new QueryClient()\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  &lt;React.StrictMode&gt;\n    &lt;WagmiProvider config={config}&gt;\n      &lt;QueryClientProvider client={queryClient}&gt;\n        &lt;App /&gt;\n      &lt;/QueryClientProvider&gt;\n    &lt;/WagmiProvider&gt;\n  &lt;/React.StrictMode&gt;,\n)\n</code></pre> <pre><code>//\n// For apps using Wagmi versions v1.a.b and auth-wagmi v2.x.y\n//\nfunction App({ Component, pageProps }: AppProps) {\n  return (\n    &lt;WagmiConfig config={wagmiEntity}&gt;\n      &lt;Component {...pageProps} /&gt;\n    &lt;/WagmiConfig&gt;\n  );\n}\n</code></pre>"},{"location":"auth/onboard/wagmi/wagmi-pnp-ui/#whats-next","title":"What's Next?","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/onboard/wagmi/wagmi-pnp-ui/#see-also","title":"See also","text":"<p>'Wagmi' integration example: See <code>sample-auth-wagmi-2`, `sample-auth-wagmi-viem`, `sample-auth-wagmi</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth Wagmi SDK Quick Links</p> <ul> <li>Auth Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/onboard/walletconnect/walletconnect-custom-ui/","title":"Custom Login UI","text":"<p>Onboard users in a 'WalletConnect' app integrated with the Arcana Auth SDK through a custom login UI.</p> Plug-and-Play Login UI <p>You can onboard users in a 'WalletConnect' app faster through the built-in, plug-and-play login UI instead of choosing to build a custom login UI. Learn more...</p>"},{"location":"auth/onboard/walletconnect/walletconnect-custom-ui/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the Wagmi app and configure SDK usage settings for social login providers, manage app chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages for 'WalletConnect'.</p> </li> <li> <p>Integrate 'WalletConnect' app and create <code>AuthProvider</code>, <code>ArcanaConnector</code>.</p> </li> </ul>"},{"location":"auth/onboard/walletconnect/walletconnect-custom-ui/#steps","title":"Steps","text":""},{"location":"auth/onboard/walletconnect/walletconnect-custom-ui/#1-configure-arcanaconnector","title":"1. Configure <code>ArcanaConnector</code>","text":"<p><code>ArcanaConnector</code> is created earlier as part of SDK integration. When using a custom login UI to onboard users, configure <code>ArcanaConnector</code> differently.</p> <p>Add code in the custom UI for onboarding via social login and passwordless options by using the <code>setLogin</code> function. </p> <p>Enable Authentication Provider</p> <pre><code>import { AuthProvider } from \"@arcana/auth\";\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\";\nimport { polygon, polygonAmoy } from \"wagmi/chains\";\nimport { configureChains, createClient, Chain } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\n\n/* Using Custom UI for user login via Google */\nconst auth = new AuthProvider(`${arcana_client_id}`) // Singleton\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: auth,        \n      login:  {\n          provider: 'google', //See 'Custom Login UI' section in the documentation for other supported providers.\n        } // Optional, specify here during ArcanaConnector instantiation or in the setLogin function\n    },\n  });\n};\n\n// Custom UI Alternative \n// Use setLogin function after creating the connector.\n\n/*\nconst auth = new AuthProvider(`${arcana_client_id}`) // Singleton\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: auth             \n    },\n  });\n};\n\nconnector.setLogin({\n  provider: 'google'\n})\n*/\n\n...\n</code></pre> <p>Enable Passwordless Login</p> <pre><code>import { AuthProvider } from \"@arcana/auth\";\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\";\nimport { polygon, polygonAmoy } from \"wagmi/chains\";\nimport { configureChains, createClient, Chain } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\n\n/* Using Custom UI for Passwordless user login */\nconst auth = new AuthProvider(`${arcana_client_id}`) // Singleton\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: auth,        \n      login:  {\n          provider: 'passwordless', \n          email: 'abc@example.com' //optional\n        } // Optional, specify login details here or during ArcanaConnector instantiation or in the setLogin function\n    },\n  });\n};\n\n// Custom UI Alternative \n// Use setLogin function after creating the connector.\n\n/*\nconst auth = new AuthProvider(`${arcana_client_id}`) // Singleton\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: auth             \n    },\n  });\n};\n\nconnector.setLogin({\n  provider: 'passwordless',\n  email: 'abc@example.com' //optional\n})\n*/\n\n...\n</code></pre> <p>Single Provider Optimization</p> <p>When using a single social login provider, specify it when creating ArcanaConnector to optimize onboarding. There's no need to use setLogin later in the custom login UI code.</p> <p>For multiple social login providers, create ArcanaConnector without specifying a provider. Use the setLogin function later based on the user's choice.</p>"},{"location":"auth/onboard/walletconnect/walletconnect-custom-ui/#2-set-up-wagmiconfig","title":"2. Set up <code>WagmiConfig</code>","text":"<p>Use the <code>ArcanaConnector</code> and set up Wagmi config.</p> <code>main.ts</code> <pre><code>//Use \"`auth-wagmi` version &gt; v2.0.0\"\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { Buffer } from 'buffer'\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { WagmiProvider } from 'wagmi'\nimport App from './App.tsx'\nimport { config } from './wagmi.ts'\n\nimport './index.css'\n\nglobalThis.Buffer = Buffer\n\nconst queryClient = new QueryClient()\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  &lt;React.StrictMode&gt;\n    &lt;WagmiProvider config={config}&gt;\n      &lt;QueryClientProvider client={queryClient}&gt;\n        &lt;App /&gt;\n      &lt;/QueryClientProvider&gt;\n    &lt;/WagmiProvider&gt;\n  &lt;/React.StrictMode&gt;,\n)\n</code></pre>"},{"location":"auth/onboard/walletconnect/walletconnect-custom-ui/#3-initialize-walletconnect-app-component","title":"3. Initialize WalletConnect App Component","text":"Wagmi 2.0Wagmi 1.0 <pre><code>//\n// For apps using Wagmi versions v2.a.b and auth-wagmi v3.x.y\n//\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { Buffer } from 'buffer'\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { WagmiProvider } from 'wagmi'\n\nimport App from './App.tsx'\nimport { config } from './wagmi.ts'\n\nimport './index.css'\n\nglobalThis.Buffer = Buffer\n\nconst queryClient = new QueryClient()\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  &lt;React.StrictMode&gt;\n    &lt;WagmiProvider config={config}&gt;\n      &lt;QueryClientProvider client={queryClient}&gt;\n        &lt;App /&gt;\n      &lt;/QueryClientProvider&gt;\n    &lt;/WagmiProvider&gt;\n  &lt;/React.StrictMode&gt;,\n)\n</code></pre> <pre><code>//\n// For apps using Wagmi versions v1.a.b and auth-wagmi v2.x.y\n//\nfunction App({ Component, pageProps }: AppProps) {\n  return (\n    &lt;WagmiConfig config={wagmiEntity}&gt;\n      &lt;Component {...pageProps} /&gt;\n    &lt;/WagmiConfig&gt;\n  );\n}\n</code></pre>"},{"location":"auth/onboard/walletconnect/walletconnect-custom-ui/#whats-next","title":"What's Next?","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/onboard/walletconnect/walletconnect-custom-ui/#see-also","title":"See also","text":"<p>'WalletConnect' integration example: See <code>sample-auth-walletconnect</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> <li> <p>Arcana Auth SDK Usage Guide</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth Wagmi SDK Quick Links</p> <ul> <li>Auth Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/onboard/walletconnect/walletconnect-pnp-ui/","title":"Plug-and-Play Login UI","text":"<p>Use the built-in, plug-and-play login UI modal to quickly onboard users in a 'WalletConnect' app integrated with the Arcana Auth Wagmi SDK. </p> Custom Login UI <p>You can onboard users through a custom login UI instead of the built-in plug-and-play one. See how to use custom login UI and onboard users in a 'WalletConnect' app.</p>"},{"location":"auth/onboard/walletconnect/walletconnect-pnp-ui/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the Wagmi app and configure SDK usage settings for social login providers, manage app chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages for 'WalletConnect'.</p> </li> <li> <p>Integrate 'WalletConnect' app and create <code>AuthProvider</code>, <code>ArcanaConnector</code>.</p> </li> </ul>"},{"location":"auth/onboard/walletconnect/walletconnect-pnp-ui/#steps","title":"Steps","text":""},{"location":"auth/onboard/walletconnect/walletconnect-pnp-ui/#1-setup-wagmiconfig","title":"1. Setup <code>WagmiConfig</code>","text":"<p>Use the <code>ArcanaConnector</code> created during app integration to set up Wagmi config.</p> <code>main.ts</code> <pre><code>//Use \"`auth-wagmi` version &gt; v2.0.0\"\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { Buffer } from 'buffer'\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { WagmiProvider } from 'wagmi'\nimport App from './App.tsx'\nimport { config } from './wagmi.ts'\n\nimport './index.css'\n\nglobalThis.Buffer = Buffer\n\nconst queryClient = new QueryClient()\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  &lt;React.StrictMode&gt;\n    &lt;WagmiProvider config={config}&gt;\n      &lt;QueryClientProvider client={queryClient}&gt;\n        &lt;App /&gt;\n      &lt;/QueryClientProvider&gt;\n    &lt;/WagmiProvider&gt;\n  &lt;/React.StrictMode&gt;,\n)\n</code></pre>"},{"location":"auth/onboard/walletconnect/walletconnect-pnp-ui/#2-set-up-wagmiprovider","title":"2. Set up <code>WagmiProvider</code>","text":"<p>Next, use the <code>WagmiProvider</code> with this specified Wagmi config and initialize <code>WagmiProvider</code> in the app.</p> <code>wagmi.ts</code> <pre><code>//This example uses Arcana Wallet connector and Coinbase Wallet\n\nimport { http, createConfig } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\nimport { coinbaseWallet, injected, walletConnect } from 'wagmi/connectors'\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\";\nimport { getAuthProvider } from './arcanaConnector';\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [\n    injected(),\n    coinbaseWallet({ appName: 'Create Wagmi' }),\n    walletConnect({\n      projectId: '3fcc6bba6f1de962d911bb5b5c3dba68', //WalletConnect ProjectID\n    }),\n    ArcanaConnector(\n      {\n        auth: getAuthProvider(),\n      }\n    )\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n\ndeclare module 'wagmi' {\n  interface Register {\n    config: typeof config\n  }\n}\n</code></pre>"},{"location":"auth/onboard/walletconnect/walletconnect-pnp-ui/#whats-next","title":"What's Next?","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/onboard/walletconnect/walletconnect-pnp-ui/#see-also","title":"See also","text":"<p>'WalletConnect' integration example: See <code>sample-auth-walletconnect</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth Wagmi SDK Quick Links</p> <ul> <li>Auth Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/onboard/web3-react/web3-react-custom-ui/","title":"Custom Login UI","text":"<p>Onboard users in a 'Web3-React' app integrated with the Arcana Auth SDK through a custom login UI.</p> Plug-and-Play Login UI <p>You can onboard users in a 'Web3-React' app faster through the built-in, plug-and-play login UI instead of choosing to build a custom login UI. Learn more...</p>"},{"location":"auth/onboard/web3-react/web3-react-custom-ui/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the Wagmi app and configure SDK usage settings for social login providers, manage app chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages for 'Web3-React'.</p> </li> <li> <p>Integrate 'Web3-React' app and create <code>AuthProvider</code>, <code>ArcanaConnector</code>.</p> </li> </ul>"},{"location":"auth/onboard/web3-react/web3-react-custom-ui/#steps","title":"Steps","text":""},{"location":"auth/onboard/web3-react/web3-react-custom-ui/#1-configure-arcanaconnector","title":"1. Configure <code>ArcanaConnector</code>","text":"<p><code>ArcanaConnector</code> is created earlier as part of SDK integration. When using a custom login UI to onboard users, configure <code>ArcanaConnector</code> differently.</p> <p>Add code in the custom UI for onboarding via social login and passwordless options by using the <code>setLogin</code> function. </p>"},{"location":"auth/onboard/web3-react/web3-react-custom-ui/#social-login","title":"Social Login","text":"example/connectors/arcanaWallet.ts<pre><code>// custom ui onboarding - google\nimport { ArcanaConnector } from \"@arcana/auth-web3-react\"\nimport { AuthProvider } from \"@arcana/auth\"\nimport { initializeConnector } from \"@web3-react/core\"\n\nconst auth = new AuthProvider(`${arcana_client_id}`) // Singleton\n\nexport const [authConnect, hooks] = initializeConnector(\n  (actions) =&gt;\n    new ArcanaConnector(auth, {\n      actions,\n      login: {\n        provider: 'google',\n      } // either add here or in setLogin function\n    })\n)\n\n// Custom UI Alternative \n// Use setLogin function after creating the connector.\n\n/*\nexport const [authConnect, hooks] = initializeConnector(\n  (actions) =&gt;\n    new ArcanaConnector(auth, {\n      actions,\n    })\n)\n\nauthConnect.setLogin({ provider: 'google' })\n\n*/\n...\n</code></pre>"},{"location":"auth/onboard/web3-react/web3-react-custom-ui/#passwordless-login","title":"Passwordless Login","text":"example/connectors/arcanaWallet.ts<pre><code>//custom ui onboarding - passwordless\nimport { ArcanaConnector } from \"@arcana/auth-web3-react\"\nimport { AuthProvider } from \"@arcana/auth\"\nimport { initializeConnector } from \"@web3-react/core\"\n\nconst auth = new AuthProvider(`${arcana_client_id}`) // Singleton\n\nexport const [authConnect, hooks] = initializeConnector(\n  (actions) =&gt;\n    new ArcanaConnector(auth, {\n      actions,\n      login: {\n        provider: 'passwordless',\n        email: 'abc@example.com'\n      } // either add here or in setLogin function\n    })\n)\n\n// Custom UI Alternative \n// Use setLogin function after creating the connector.\n\n/*\nexport const [authConnect, hooks] = initializeConnector(\n  (actions) =&gt;\n    new ArcanaConnector(auth, {\n      actions,\n    })\n)\n\nauthConnect.setLogin({ provider: 'passwordless', email: 'abc@example.com' })\n\n*/\n...\n</code></pre> <p>Single Provider Optimization</p> <p>When using a single social login provider, specify it when creating ArcanaConnector to optimize onboarding. There's no need to use setLogin later in the custom login UI code.</p> <p>For multiple social login providers, create ArcanaConnector without specifying a provider. Use the setLogin function later based on the user's choice.</p>"},{"location":"auth/onboard/web3-react/web3-react-custom-ui/#2-use-arcanaconnector","title":"2. Use <code>ArcanaConnector</code>","text":"<p>In the Web3-React app, use the <code>ArcanaConnector</code> created earlier and set up the required hooks:</p> <pre><code>import { useEffect, useState } from \"react\";\n\nimport { MAINNET_CHAINS } from \"../../chains\";\nimport { hooks, arcanaConnect } from \"../../connectors/arcanaWallet\";\nimport { Card } from \"../Card\";\n\nconst CHAIN_IDS = Object.keys(MAINNET_CHAINS).map(Number);\n\nconst {\n  useChainId,\n  useAccounts,\n  useIsActivating,\n  useIsActive,\n  useProvider,\n  useENSNames,\n} = hooks;\n\nexport default function ArcanaConnectCard() {\n  const chainId = useChainId();\n  const accounts = useAccounts();\n  const isActivating = useIsActivating();\n\n  const isActive = useIsActive();\n\n  const provider = useProvider();\n  const ENSNames = useENSNames(provider);\n\n  const [error, setError] = useState(undefined);\n\n  // attempt to connect eagerly on mount\n  useEffect(() =&gt; {\n    arcanaConnect.connectEagerly().catch((error) =&gt; {\n      console.debug(\"Failed to connect eagerly to arcanaConnect\", error);\n    });\n  }, []);\n\n  return (\n    &lt;Card\n      connector={arcanaConnect}\n      activeChainId={chainId}\n      chainIds={CHAIN_IDS}\n      isActivating={isActivating}\n      isActive={isActive}\n      error={error}\n      setError={setError}\n      accounts={accounts}\n      provider={provider}\n      ENSNames={ENSNames}\n    /&gt;\n  );\n}\n</code></pre> <p>Now, you are all set to onboard users in the Web3-React app using the custom login UI and enable Arcana wallet for the authenticated users.</p> pages/index.tsx<pre><code>import ArcanaConnectCard from \"../components/connectorCards/ArcanaConnectCard\";\nimport CoinbaseWalletCard from \"../components/connectorCards/CoinbaseWalletCard\";\nimport GnosisSafeCard from \"../components/connectorCards/GnosisSafeCard\";\nimport MetaMaskCard from \"../components/connectorCards/MetaMaskCard\";\nimport NetworkCard from \"../components/connectorCards/NetworkCard\";\nimport WalletConnectCard from \"../components/connectorCards/WalletConnectCard\";\nimport WalletConnectV2Card from \"../components/connectorCards/WalletConnectV2Card\";\nimport ProviderExample from \"../components/ProviderExample\";\n\nexport default function Home() {\n  return (\n      &lt;&gt;\n      &lt;ProviderExample /&gt;\n      &lt;div&gt;\n        &lt;MetaMaskCard /&gt;\n        &lt;WalletConnectV2Card /&gt;\n        &lt;WalletConnectCard /&gt;\n        &lt;CoinbaseWalletCard /&gt;\n        &lt;NetworkCard /&gt;\n        &lt;GnosisSafeCard /&gt;\n        &lt;ArcanaConnectCard /&gt;\n      &lt;/div&gt;\n      );\n      &lt;/&gt;\n}\n</code></pre> Web3-React App integrated with the Arcana Auth"},{"location":"auth/onboard/web3-react/web3-react-custom-ui/#whats-next","title":"What's Next?","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/onboard/web3-react/web3-react-custom-ui/#see-also","title":"See also","text":"<p>'Web3-React' integration example: See <code>sample-auth-web3-react</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> <li> <p>Arcana Auth SDK Usage Guide</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth Wagmi SDK Quick Links</p> <ul> <li>Auth Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/onboard/web3-react/web3-react-pnp-ui/","title":"Plug-and-Play Login UI","text":"<p>Use the built-in, plug-and-play login UI modal to quickly onboard users in a 'Web3-React' app integrated with the Arcana Auth Wagmi SDK. </p> Custom Login UI <p>You can onboard users through a custom login UI instead of the built-in plug-and-play one. See how to use custom login UI and onboard users in a 'Web3-React' app.</p>"},{"location":"auth/onboard/web3-react/web3-react-pnp-ui/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the Wagmi app and configure SDK usage settings for social login providers, manage app chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages for 'Web3-React'.</p> </li> <li> <p>Integrate 'Web3-React' app and create <code>AuthProvider</code>, <code>ArcanaConnector</code>.</p> </li> </ul>"},{"location":"auth/onboard/web3-react/web3-react-pnp-ui/#steps","title":"Steps","text":""},{"location":"auth/onboard/web3-react/web3-react-pnp-ui/#1-create-authprovider-and-arcanaconnector","title":"1. Create <code>AuthProvider</code> and <code>ArcanaConnector</code>","text":"<pre><code>import { initializeConnector } from \"@web3-react/core\";\nimport { ArcanaConnector } from \"@arcana/auth-web3-react\";\nimport { AuthProvider } from \"@arcana/auth\";\nimport { URLS } from \"../chains\";\n\nconst auth = new AuthProvider(\n  \"xar_test_b2ddexxxxxxxxxxxxxxxxxxxx8b1fa3f\"  //App client ID via Dashboard\n);\nexport const [arcanaConnect, hooks] = initializeConnector&lt;ArcanaConnector&gt;(\n  (actions) =&gt;\n    new ArcanaConnector(auth, {\n      actions,\n    })\n);\n...\n</code></pre> <p>Compact Mode</p> <p>While creating the <code>AuthProvider</code>, you can choose the compact mode (optional) for the plug-and-play login UI.</p>"},{"location":"auth/onboard/web3-react/web3-react-pnp-ui/#2-use-arcanaconnector","title":"2. Use <code>ArcanaConnector</code>","text":"<p>In the Web3-React app, use the <code>ArcanaConnector</code> and React hooks to connect <code>ArcanaConnector</code> with the Web3-React ecosystem via <code>ArcanaConnectCard</code>.</p> <pre><code>import { useEffect, useState } from \"react\";\n\nimport { MAINNET_CHAINS } from \"../../chains\";\nimport { hooks, arcanaConnect } from \"../../connectors/arcanaWallet\";\nimport { Card } from \"../Card\";\n\nconst CHAIN_IDS = Object.keys(MAINNET_CHAINS).map(Number);\n\nconst {\n  useChainId,\n  useAccounts,\n  useIsActivating,\n  useIsActive,\n  useProvider,\n  useENSNames,\n} = hooks;\n\nexport default function ArcanaConnectCard() {\n  const chainId = useChainId();\n  const accounts = useAccounts();\n  const isActivating = useIsActivating();\n\n  const isActive = useIsActive();\n\n  const provider = useProvider();\n  const ENSNames = useENSNames(provider);\n\n  const [error, setError] = useState(undefined);\n\n  // attempt to connect eagerly on mount\n  useEffect(() =&gt; {\n    arcanaConnect.connectEagerly().catch((error) =&gt; {\n      console.debug(\"Failed to connect eagerly to arcanaConnect\", error);\n    });\n  }, []);\n\n  return (\n    &lt;Card\n      connector={arcanaConnect}\n      activeChainId={chainId}\n      chainIds={CHAIN_IDS}\n      isActivating={isActivating}\n      isActive={isActive}\n      error={error}\n      setError={setError}\n      accounts={accounts}\n      provider={provider}\n      ENSNames={ENSNames}\n    /&gt;\n  );\n}\n</code></pre> <p>Now, you are all set to onboard users in the Web3-React app using the plug-and-play login UI and enable Arcana wallet for the authenticated users.</p> pages/index.tsx<pre><code>import ArcanaConnectCard from \"../components/connectorCards/ArcanaConnectCard\";\nimport CoinbaseWalletCard from \"../components/connectorCards/CoinbaseWalletCard\";\nimport GnosisSafeCard from \"../components/connectorCards/GnosisSafeCard\";\nimport MetaMaskCard from \"../components/connectorCards/MetaMaskCard\";\nimport NetworkCard from \"../components/connectorCards/NetworkCard\";\nimport WalletConnectCard from \"../components/connectorCards/WalletConnectCard\";\nimport WalletConnectV2Card from \"../components/connectorCards/WalletConnectV2Card\";\nimport ProviderExample from \"../components/ProviderExample\";\n\nexport default function Home() {\n  return (\n      &lt;&gt;\n      &lt;ProviderExample /&gt;\n      &lt;div&gt;\n        &lt;MetaMaskCard /&gt;\n        &lt;WalletConnectV2Card /&gt;\n        &lt;WalletConnectCard /&gt;\n        &lt;CoinbaseWalletCard /&gt;\n        &lt;NetworkCard /&gt;\n        &lt;GnosisSafeCard /&gt;\n        &lt;ArcanaConnectCard /&gt;\n      &lt;/div&gt;\n      );\n      &lt;/&gt;\n}\n</code></pre> Web3-React App integrated with the Arcana Auth"},{"location":"auth/onboard/web3-react/web3-react-pnp-ui/#whats-next","title":"What's Next?","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p>"},{"location":"auth/onboard/web3-react/web3-react-pnp-ui/#see-also","title":"See also","text":"<p>'Web3-React' integration example: See <code>sample-auth-web3-react</code> submodule in SDK Example GitHub repository.</p> <ul> <li> <p> FAQ</p> </li> <li> <p> Troubleshooting Guide</p> </li> <li> <p>Arcana Auth SDK Errors</p> </li> </ul> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth Wagmi SDK Quick Links</p> <ul> <li>Auth Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"auth/web3-ops/evm/","title":"EVM Wallet Ops","text":"<p>The Arcana wallet supports standard Ethereum JSON-RPC specification API via the <code>AuthProvider</code>.</p> Non-EVM Chains <p>Note that the JSON/RPC functions and Web3 wallet operations supported by the <code>AuthProvider</code> may vary across EVM chains and other chains such as Solana, MultiversX, Near, etc.</p>"},{"location":"auth/web3-ops/evm/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the Near app and configure SDK usage settings for social login providers, manage app chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages, integrate the SDK with the app and create <code>AuthProvider</code>. </p> </li> </ul>"},{"location":"auth/web3-ops/evm/#handle-events","title":"Handle Events","text":"<pre><code>const auth = new AuthProvider(\n  \"xar_test_445007f942xxxxxxxxxxxxxxxxxx484cAfd2\", // App client ID\n)\n</code></pre> <pre><code>try {\n  await auth.init()\n} catch (e) {\n  // Handle exception case\n}\n</code></pre> <pre><code>// Assuming Auth SDK is integrated and initialized\ntry {\n  provider = auth.provider\n  const connected = await auth.isLoggedIn()\n  console.log({ connected })\n  setHooks()\n} catch (e) {\n  // Handle exception case\n}\n\n// setHooks: Manage chain or account switch in Arcana wallet\nfunction setHooks() {\n  provider.on('connect', async (params) =&gt; {\n    console.log({ type: 'connect', params: params })\n    const isLoggedIn = await auth.isLoggedIn()\n    console.log({ isLoggedIn })\n  })\n  provider.on('accountsChanged', (params) =&gt; {\n    //Handle\n    console.log({ type: 'accountsChanged', params: params })\n  })\n  provider.on('chainChanged', async (params) =&gt; {\n    console.log({ type: 'chainChanged', params: params })\n  })\n}\n</code></pre>"},{"location":"auth/web3-ops/evm/#supported-web3-operations","title":"Supported Web3 Operations","text":"<ul> <li><code>eth_getBalance</code></li> <li><code>eth_accounts</code></li> <li><code>eth_signTransaction</code></li> <li><code>eth_sendTransaction</code></li> <li><code>wallet_addEthereumChain</code></li> <li><code>wallet_switchEthereumChain</code></li> <li><code>wallet_watchAsset</code></li> <li><code>_arcana_getAccountType</code></li> <li><code>_arcana_switchAccountType</code></li> </ul>"},{"location":"auth/web3-ops/evm/#get-accounts","title":"Get Accounts","text":"<pre><code>// get from eth_accounts\nlet from = ''\n\nasync function getAccounts() {\n  console.log('Requesting accounts')\n  try {\n    const accounts = await provider.request({ method: 'eth_accounts' })\n    console.log({ accounts })\n    from = accounts[0] // Use this account address to get wallet balance\n  } catch (e) {\n    console.log({ e })\n  }\n}\n</code></pre>"},{"location":"auth/web3-ops/evm/#get-balance","title":"Get Balance","text":"<pre><code>let balance = ''\n\nasync function getBalance() {\n  console.log('Requesting Balance')\n  try {\n    provider.request({ method: 'eth_getBalance' }).then((balance) =&gt; {\n      // convert a currency unit from wei to ether\n      const balanceInEth = ethers.utils.formatEther(balance)\n      console.log(`balance: ${balanceInEth} ETH`)\n    })\n  } catch (e) {\n    console.log({ e })\n  }\n}\n</code></pre>"},{"location":"auth/web3-ops/evm/#add-network","title":"Add Network","text":"<p>Only EVM Chains</p> <p>Apps can programmatically add only the EVM-compatible chains to the preconfigured chain list if not already present.</p> <p>The <code>wallet_addEthereumChain</code> method is specified by EIP-3085.</p> <pre><code>try {\n  await provider.request({\n    method: 'wallet_addEthereumChain',\n    params: [{\n      chainId: '0xABCDEF',\n      chainName: 'My Custom Chain',\n      rpcUrls: ['...']\n    }]\n  })\n} catch(error) {\n  ...\n}\n\n// Parameters\n// wallet_addEthereumChain accepts a single object parameter, \n// specified by the AddEthereumChainParameter TypeScript interface\n\ninterface AddEthereumChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n</code></pre>"},{"location":"auth/web3-ops/evm/#switch-network","title":"Switch Network","text":"<p>This method is specified by EIP-3326.</p> <p>Chain Switching</p> <p>Apps can programmatically switch to another chain as long as it is of the same chain type. If an app is configured to use EVM chains, you cannot switch to a non-EVM chain and vice-versa.</p> <pre><code>try {\n  await provider.request({\n    method: 'wallet_switchEthereumChain',\n    params: [{ chainId: '0xf00' }],\n  });\n} catch(error) {\n  ...\n}\n\ninterface SwitchEthereumChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n}\n</code></pre> <p>Network Switch Error</p> <p>If the error code (error.code) is 4902, then the requested chain has not been added, and you have to request to add it via <code>wallet_addEthereumChain</code>.</p>"},{"location":"auth/web3-ops/evm/#get-account-type","title":"Get Account Type","text":"<pre><code>const accountType = await auth.provider.request({\n  method: \"_arcana_getAccountType\",\n});\n\nconsole.log(accountType);\n</code></pre>"},{"location":"auth/web3-ops/evm/#watch-assets","title":"Watch Assets","text":"<pre><code>async function watchAsset() {\n  setRequest('eth_sendTransaction')\n  const hash = await provider.request({\n    method: 'wallet_watchAsset',\n      params: {\n        type: 'ERC20',\n        options: {\n          address: '0xB983E01458529665007fF7E0CDdeCDB74B967Eb6',\n          symbol: 'FOO',\n          decimals: 18,\n          image: 'https://foo.io/token-image.svg',\n      },\n    },\n  })\n  console.log({ hash })\n}\n</code></pre>"},{"location":"auth/web3-ops/evm/#sign-transaction","title":"Sign Transaction","text":"<pre><code>async function signTransaction() {\n\n  const { sig } = await auth. provider.request({\n    method: 'eth_signTransaction',\n    params: [\n      {\n        from: \"0xEB014f8c8B418Db6b45774c326A0E64C78914dC0\",\n        gasPrice: \"20000000000\",\n        gas: \"21000\",\n        to: '0x3535353535353535353535353535353535353535',\n        value: \"1000000000000000000\",\n        data: \"some data\"\n      },\n    ],\n  })\n  console.log({ sig })\n}\n</code></pre>"},{"location":"auth/web3-ops/evm/#send-transactions","title":"Send Transactions","text":"<pre><code>const auth = new AuthProvider(\n  \"xar_test_445007f942xxxxxxxxxxxxxxxxxx484cAfd2\", // App client ID\n)\n</code></pre> <pre><code>try {\n  await auth.init()\n} catch (e) {\n  // Handle exception case\n}\n</code></pre> <pre><code>async function sendTransaction() {\n  setRequest('eth_sendTransaction')\n  const hash = await auth.provider.request({\n    method: 'eth_sendTransaction',\n      params: [{\n      from,\n      gasPrice: 0,\n      to: '0xE28F01Cf69f27Ee17e552bFDFB7ff301ca07e780',\n      value: '0x0de0b6b3a7640000',\n    },],\n  })\n  console.log({ hash })\n}\n</code></pre> Send Transaction Approve/Reject Send Transaction"},{"location":"auth/web3-ops/evm/#show-wallet","title":"Show Wallet","text":"<p>Apps that use <code>alwaysVisible=false</code> when initializing the <code>AuthProvider</code> can use <code>showWallet</code> to display it in the app's context when required.</p> <pre><code>import { AuthProvider } from '@arcana/auth'\n\ntry {\n\n  const auth = new AuthProvider(\n    \"xar_test_445007f942xxxxxxxxxxxxxxxxxx484cAfd2\", // App client ID\n    { \n      position: 'left',         // default: right\n      theme: 'light',           // default: dark\n      alwaysVisible: false, \n    } \n  )\n  await auth.init()\n  await auth.showWallet()\n} catch (e) {\n  // Handle exception case\n}\n</code></pre> Arcana Wallet"},{"location":"auth/web3-ops/mvx/","title":"MultiversX Wallet Ops","text":"<p>Use <code>AuthProvider</code>, the standard EIP-1193 Ethereum provider offered by the Arcana Auth SDK, for issuing Web3 wallet operations via the Arcana wallet.</p>"},{"location":"auth/web3-ops/mvx/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the app and configure SDK usage settings for social login providers, manage app chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages as per the app type, integrate the SDK and create <code>AuthProvider</code>. </p> </li> </ul>"},{"location":"auth/web3-ops/mvx/#supported-web3-operations","title":"Supported Web3 Operations","text":"<ul> <li><code>mvx_signMessage</code></li> <li><code>mvx_signTransaction</code></li> <li><code>mvx_signTransactions</code></li> <li><code>getAccounts</code></li> <li><code>getPublicKey</code></li> </ul> <p>Other MultiversX wallet connect JSON RPC methods listed here are not supported at the moment.</p>"},{"location":"auth/web3-ops/mvx/#getaccounts","title":"<code>getAccounts</code>","text":"<pre><code>// Integrate App with the Auth SDK\n\n  const { AuthProvider } = window.arcana.auth\n\n  let provider\n  let from = ''\n  const auth = new AuthProvider('xar_dev_34-arcana-registered-client-id-xxxxx')\n  provider = auth.provider\n\n  ...\n\n  //Initialize AuthProvider\n  await auth.init()\n\n  // Get Accounts\n\n  try {\n    const accounts = await provider.request({ method: 'getAccounts' })\n    from = accounts[0]\n  } catch (e) {\n    console.log({ e })\n  }\n\n  // Returns an array of public keys\n  // [\"pub-key-1\"]\n</code></pre>"},{"location":"auth/web3-ops/mvx/#getpublickey","title":"<code>getPublicKey</code>","text":"<pre><code>// Integrate App with the Auth SDK\n\n  const { AuthProvider } = window.arcana.auth\n\n  let provider\n  let from = ''\n  const auth = new AuthProvider('xar_dev_34-arcana-registered-client-id-xxxxx')\n  provider = auth.provider\n\n  ...\n\n  //Initialize AuthProvider\n  await auth.init()\n\n  //Get Public Key\n\n  await provider.request({\n    method: \"getPublicKey\",\n    params: [from],\n  });\n\n  // Returns public key\n  // {pk: \"some-pub-key\"}\n</code></pre>"},{"location":"auth/web3-ops/mvx/#signmessage","title":"<code>SignMessage</code>","text":"<pre><code>  // Integrate App with the Auth SDK\n\n  const { AuthProvider } = window.arcana.auth\n\n  let provider\n  let from = ''\n  const auth = new AuthProvider('xar_dev_34-arcana-registered-client-id-xxxxx')\n  provider = auth.provider\n\n  ...\n\n  //Initialize AuthProvider\n  await auth.init()\n\n  // Get Accounts\n\n  try {\n    const accounts = await provider.request({ method: 'getAccounts' })\n    from = accounts[0]\n  } catch (e) {\n    console.log({ e })\n  }\n\n  // Onboard users via plug-n-play login or custom login UI\n\n  // auth.connect() or auth.loginWithSocial\n  try {\n    const provider = await auth.connect()\n    console.log({ provider })\n  } catch (error) {\n    console.log({ error })\n  }\n\n  ...\n\n  // For authenticated users, add code for signing message\n\n  const personalSign = await provider.request({\n    method: 'mvx_signMessage',\n    params: {\n      message: 'SignMessage to test MultiversX signmessage',\n      address: from,\n    },\n  })\n\n  // Returns signature object\n  // {signature: \"some-sig\"}\n</code></pre>"},{"location":"auth/web3-ops/mvx/#signtransaction","title":"<code>SignTransaction</code>","text":"<pre><code>  // Integrate App with the Auth SDK\n\n  const { AuthProvider } = window.arcana.auth\n\n  let provider\n  let from = ''\n  const auth = new AuthProvider('xar_dev_34-arcana-registered-client-id-xxxxx')\n  provider = auth.provider\n\n  ...\n\n  //Initialize AuthProvider\n  await auth.init()\n\n  // Get Accounts\n\n  try {\n    const accounts = await provider.request({ method: 'getAccounts' })\n    from = accounts[0]\n  } catch (e) {\n    console.log({ e })\n  }\n\n  // Onboard users via plug-n-play login or custom login UI\n\n  // auth.connect() or auth.loginWithSocial\n  try {\n    const provider = await auth.connect()\n    console.log({ provider })\n  } catch (error) {\n    console.log({ error })\n  }\n\n  ...\n\n  // For authenticated users, add code for signing transaction\n\n  const params = {\n    transaction: {\n      gasLimit: 100000,\n      sender: from,\n      receiver:\n        'erdXXXXXXXX-some-address-YYYYYYYYYY',\n      value: '0.01',\n      chainID: 'T',\n      data: 'helloWorld-from MultiversX',\n      version: 1,\n    },\n  }\n\n  const data = await provider.request({\n    method: 'mvx_signTransaction',\n    params,\n  })\n\n  // Returns signature object\n  // {signature: \"some-sig\", options: 0, version: 1}\n</code></pre>"},{"location":"auth/web3-ops/mvx/#signtransactions","title":"<code>SignTransactions</code>","text":"<pre><code>  // Integrate App with the Auth SDK\n\n  const { AuthProvider } = window.arcana.auth\n\n  let provider\n  let from = ''\n  const auth = new AuthProvider('xar_dev_34-arcana-registered-client-id-xxxxx')\n  provider = auth.provider\n\n  ...\n\n  //Initialize AuthProvider\n  await auth.init()\n\n  // Get Accounts\n\n  try {\n    const accounts = await provider.request({ method: 'getAccounts' })\n    from = accounts[0]\n  } catch (e) {\n    console.log({ e })\n  }\n\n  // Onboard users via plug-n-play login or custom login UI\n\n  // auth.connect() or auth.loginWithSocial\n  try {\n    const provider = await auth.connect()\n    console.log({ provider })\n  } catch (error) {\n    console.log({ error })\n  }\n\n  ...\n\n  // For authenticated users, add code for signing transaction\n\n  const transaction = {\n    gasLimit: 100000,\n    sender: from,\n    receiver: \"erdXXXXXXXX-some-address-YYYYYYYYYY\",\n    value: \"0.001\",\n    chainID: \"T\",\n    data: \"helloWorld-from MultiversX\",\n    version: 1,\n  };\n\n  const params = {\n    // You can use multiple transactions, this sample just\n    // repeats the same one.\n    transactions: [transaction, transaction, transaction],\n  };\n\n  const data = await provider.request({\n    method: 'mvx_signTransactions',\n    params,\n  })\n\n  //Returns Signature Object - see format below\n  // \n  // {\n  //   signatures: [\n  //     {signature: \"some-sig-1\", options: 0, version: 1}, \n  //     {signature: \"some-sig-2\", options: 0, version: 1}, \n  //     {signature: \"some-sig-3\", options: 0, version: 1}\n  //   ]\n  // }\n</code></pre>"},{"location":"auth/web3-ops/near/","title":"Near Wallet Ops","text":"<p>The Arcana wallet supports standard Ethereum JSON-RPC specification API via the <code>AuthProvider</code>.</p>"},{"location":"auth/web3-ops/near/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the Near app and configure SDK usage settings for social login providers, manage app chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages as per the app type, integrate the SDK and create <code>AuthProvider</code>. </p> </li> </ul>"},{"location":"auth/web3-ops/near/#supported-web3-operations","title":"Supported Web3 Operations","text":"<ul> <li><code>getAccounts</code></li> <li><code>near_signMessage</code></li> <li><code>near_signAndSendTransaction</code></li> </ul>"},{"location":"auth/web3-ops/near/#getaccounts","title":"<code>getAccounts</code>","text":"<pre><code>// Integrate App with the Auth SDK\n\n  const { AuthProvider } = window.arcana.auth\n\n  let provider\n  let from = ''\n  const auth = new AuthProvider('xar_dev_34-arcana-registered-client-id-xxxxx')\n  provider = auth.provider\n\n  //Initialize AuthProvider\n  await auth.init()\n\n  ... \n  // User login add code via plug and play `connect` or custom login UI\n  // auth.connect() or auth.loginWithSocial\n\n  // Get User Account address post login\n\n  try {\n    const accounts = await provider.request({ method: 'getAccounts' })\n    from = accounts[0]\n  } catch (e) {\n    console.log({ e })\n  }\n</code></pre>"},{"location":"auth/web3-ops/near/#signmessage","title":"<code>SignMessage</code>","text":"<pre><code>  // Integrate App with the Auth SDK\n\n  const { AuthProvider } = window.arcana.auth\n\n  let provider\n  let from = ''\n  const auth = new AuthProvider('xar_dev_34-arcana-registered-client-id-xxxxx')\n  provider = auth.provider\n\n  //Initialize AuthProvider\n  await auth.init()\n\n  // Onboard users via plug-n-play login or custom login UI\n\n  // auth.connect() or auth.loginWithSocial\n  try {\n    const provider = await auth.connect()\n    console.log({ provider })\n  } catch (error) {\n    console.log({ error })\n  }\n\n  // Get User Account address \n\n  try {\n    const accounts = await provider.request({ method: 'getAccounts' })\n    from = accounts[0]\n  } catch (e) {\n    console.log({ e })\n  }\n\n  // For authenticated users, add code for signing message\n\n  import base58 from \"bs58\";\n\n  const message = base58.encode(Buffer.from(\"This is a test message for trying 'SignMessage'.\"));\n\n  const signedMessage = await auth.provider.request({\n    method: \"near_signMessage\",\n    params: { message },\n  });\n\n  console.log(signedMessage);\n</code></pre>"},{"location":"auth/web3-ops/near/#signandsendtransaction","title":"<code>SignAndSendTransaction</code>","text":"<pre><code>  // Integrate App with the Auth SDK\n\n  const { AuthProvider } = window.arcana.auth\n\n  let provider\n  let from = ''\n  const auth = new AuthProvider('xar_dev_34-arcana-registered-client-id-xxxxx')\n  provider = auth.provider\n\n  ...\n\n  //Initialize AuthProvider\n  await auth.init()\n\n  // Onboard users via plug-n-play login or custom login UI\n\n  // auth.connect() or auth.loginWithSocial\n  try {\n    const provider = await auth.connect()\n    console.log({ provider })\n  } catch (error) {\n    console.log({ error })\n  }\n\n  ...\n\n  // Get Accounts\n\n  try {\n    const accounts = await provider.request({ method: 'getAccounts' })\n    from = accounts[0]\n  } catch (e) {\n    console.log({ e })\n  }\n\n  // Get Receiver Account address\n  // Read from app user interface\n  // receiver = Buffer.to('input address')\n\n  ...\n\n  // For authenticated users, add code for signing transaction\n\n const transaction = {\n  receiverId: receiver,\n  actions: [\n    {\n      transfer: {\n        deposit: BigInt(1000),\n      },\n    },\n    {\n      transfer: {\n        deposit: BigInt(1000),\n      },\n    },\n    {\n      transfer: {\n        deposit: BigInt(1000),\n      },\n    },\n  ],\n}\n\nconst signedTransaction = await auth.provider.request({\n  method: \"near_signAndSendTransaction\",\n  params: { transaction },\n});\n\nconsole.log(signedTransaction);\n</code></pre>"},{"location":"auth/web3-ops/solana/","title":"Solana Wallet Ops","text":"<p>Solana chain is a bit different from typical EVM chains in how it supports Solana JSON-RPC calls and Web3 wallet operations.</p>"},{"location":"auth/web3-ops/solana/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the Solana app and configure SDK usage settings for social login providers, manage app chains and wallet user experience.</p> </li> <li> <p>Install the required SDK packages as per the app type, integrate the SDK and create <code>AuthProvider</code>. Make sure you also initialize the <code>Solana Provider</code>.</p> </li> </ul> <pre><code>import { AuthProvider } from '@arcana/auth'\n</code></pre> <pre><code>const auth = new AuthProvider(\n  \"xar_test_445007f942xxxxxxxxxxxxxxxxxx484cAfd2\", // App client ID\n  { \n    alwaysVisible: false,     // default: true, wallet always visible\n    connectOptions: {\n      compact: true           // default: false, regular plug-and-play login UI\n    },\n    position: 'left',         // default: right\n    setWindowProvider: true,  // default: false, window.ethereum not set\n    theme: 'light',           // default: dark\n})\n</code></pre> <pre><code>try {\n  await auth.init()\n} catch (e) {\n  // Handle exception case\n}\n</code></pre> <p>Solana apps can use the <code>auth.provider</code> to make standard JSON RPC calls in the context of an authenticated user.</p> <pre><code>const provider = auth.provider;\n</code></pre> <p>Use the Solana provider for issuing Solana Web3 wallet operations in the context of an authenticated user. </p> <pre><code>const solanaP = auth.solana;\n</code></pre>"},{"location":"auth/web3-ops/solana/#supported-web3-wallet-operations","title":"Supported Web3 Wallet Operations","text":""},{"location":"auth/web3-ops/solana/#get-public-key","title":"Get Public Key","text":"<pre><code>import SolanaWeb3 from \"@solana/web3.js\";\n\nconst provider = auth.provider;\n\nconst accounts = await auth.provider.request({\n  method: \"getAccounts\",\n  params: [],\n});\n\nconst publicKey = new SolanaWeb3.PublicKey(accounts[0])\n\nconsole.log(publicKey);\n</code></pre> <p>The <code>publicKey</code> is returned as a string: [\"your-public-key-in-string-format\"].</p>"},{"location":"auth/web3-ops/solana/#supported-jsonrpc-functions","title":"Supported JSON/RPC Functions","text":"<ul> <li><code>signMessage</code></li> <li><code>signTransaction</code></li> <li><code>signAllTransactions</code></li> <li><code>signAndSendTransaction</code></li> </ul>"},{"location":"auth/web3-ops/solana/#signmessage","title":"<code>SignMessage</code>","text":"<pre><code>  const message = `Sign below to authenticate with CryptoCorgis to avoid digital dognappers`;\n  const encodedMessage = new TextEncoder().encode(message);\n  // To get a proper signature, the second parameter in signMessage call \n  // can be either \"hex\" or \"utf8\", depending on what kind of message we are signing. \n  // For plaintext, use \"utf8\"; \n  // For hex message, use \"hex\"\n  try {\n    const signature = await solanaP.signMessage(encodedMessage, \"hex\");\n    window.solanaSig = signature;\n    console.log(signature);\n  } catch (e) {\n    console.error(e);\n  }\n</code></pre>"},{"location":"auth/web3-ops/solana/#signature-format","title":"Signature Format","text":"<pre><code>  {\n    signature: Uint8Array // Encode it by using `bs58.encode(signature)` \n                          // to get the string format. See npm library: bs58 \n    publicKey: BN // Use `new SolanaWeb3.PublicKey(publicKey)` \n                  // to get the 'BN' string format. See npm library: @solana/web3.js\n  }\n</code></pre>"},{"location":"auth/web3-ops/solana/#signtransaction","title":"<code>SignTransaction</code>","text":"<pre><code>try {\n  const pk = new SolanaWeb3.PublicKey(auth.solana.publicKey)\n  const connection = new SolanaWeb3.Connection(\n    SolanaWeb3.clusterApiUrl(\"testnet\") // can be \"devnet\", \"testnet\" or \"mainnet-beta\"\n  );\n\n  const minRent = await connection.getMinimumBalanceForRentExemption(0);\n\n  const blockhash = await connection.getLatestBlockhash().then((res) =&gt; res.blockhash);\n\n  const payer = auth.solana\n\n  const instructions = [\n    SolanaWeb3.SystemProgram.transfer({\n      fromPubkey: pk,\n      toPubkey: pk,\n      lamports: minRent // lamports is the minimum unit of solana, like wei is for Ethereum. 1 SOL = 10^9 Lamports\n    })\n  ];\n\n  // Compiles the message to V0 format\n  const messageV0 = new SolanaWeb3.TransactionMessage({\n    payerKey: pk,\n    recentBlockhash: blockhash,\n    instructions\n  }).compileToV0Message();\n\n  const transaction = new SolanaWeb3.VersionedTransaction(messageV0);\n\n  // sign your transaction with the required `Signers`\n  const signature = await payer.signTransaction(transaction);\n} catch (e) {\n    console.error(e);\n}\n</code></pre>"},{"location":"auth/web3-ops/solana/#signature-format_1","title":"Signature Format","text":"<pre><code>{\nsignatures: [Uint8Array],\nmessage: {\n    header: {\n      numRequiredSignatures: 1,\n      numReadonlySignedAccounts: 0,\n      numReadonlyUnsignedAccounts: 1\n    },\n    staticAccountKeys: [\n      StaticAccountKey1, // In string format\n      StaticAccountKey2 // In string format\n    ],\n    recentBlockhash: LatestBlockHashSubmittedWhileSigning, // In string format\n    compiledInstructions: [\n      {\n        programIdIndex: 1,\n        accountKeyIndexes: [\n          0,\n          0\n        ],\n        data: Uint8Array // Data that was signed\n    ],\n    addressTableLookups: [] // Not sure what is this, will need to check, but we can pass this during signing\n  }\n}\n</code></pre>"},{"location":"auth/web3-ops/solana/#signalltransactions","title":"<code>SignAllTransactions</code>","text":"<pre><code>try {\n  const pk = new SolanaWeb3.PublicKey(auth.solana.publicKey);\n  const connection = new SolanaWeb3.Connection(\n    window.solanaWeb3.clusterApiUrl(\"testnet\")\n  );\n\n  const minRent = await connection.getMinimumBalanceForRentExemption(0);\n\n  const blockhash = await connection.getLatestBlockhash().then((res) =&gt; res.blockhash);\n\n  const payer = auth.solana;\n\n  const instructions = [\n    SolanaWeb3.SystemProgram.transfer({\n      fromPubkey: pk,\n      toPubkey: pk,\n      lamports: minRent,\n    }),\n  ];\n\n  const messageV0 = new SolanaWeb3.TransactionMessage({\n    payerKey: pk,\n    recentBlockhash: blockhash,\n    instructions,\n  }).compileToV0Message();\n\n  const transaction = new SolanaWeb3.VersionedTransaction(messageV0);\n\n  // sign your transaction with the required `Signers`\n  const signatures = await payer.signAllTransactions([\n    transaction,\n    transaction,\n    transaction,\n  ]); // Should/can send multiple different transactions, \n      // right now sending 1 transaction multiple times just as an example\n\n} catch (e) {\n    console.error(e);\n}\n</code></pre> <p>The signature format here is same as above with a minor difference:</p> <pre><code>[Signature0, Signature1, Signature2, and so on]\n</code></pre>"},{"location":"auth/web3-ops/solana/#signandsendtransaction","title":"<code>SignAndSendTransaction</code>","text":"<pre><code>try {\n  const pk = new SolanaWeb3.PublicKey(auth.solana.publicKey);\n  const connection = new SolanaWeb3.Connection(\n    SolanaWeb3.clusterApiUrl(\"testnet\")\n  );\n\n  const minRent = await connection.getMinimumBalanceForRentExemption(0);\n\n  const blockhash = await connection.getLatestBlockhash().then((res) =&gt; res.blockhash);\n\n  const payer = auth.solana; // Arcana Solana API\n\n  const instructions = [\n    SolanaWeb3.SystemProgram.transfer({\n      fromPubkey: pk,\n      toPubkey: pk,\n      lamports: minRent,\n    }),\n  ];\n\n  const messageV0 = new SolanaWeb3.TransactionMessage({\n    payerKey: pk,\n    recentBlockhash: blockhash,\n    instructions,\n  }).compileToV0Message();\n\n  const transaction = new SolanaWeb3.VersionedTransaction(messageV0);\n\n  // sign your transaction with the required `Signers`\n  const txHash = await payer.signAndSendTransaction(transaction);\n}  catch (e) {\n    console.error(e);\n}\n</code></pre>"},{"location":"auth/web3-ops/solana/#response-format","title":"Response Format","text":"<pre><code>{\n  publicKey: BN,\n  signature: Uint8Array // This is the transaction hash itself\n                        // we can verify this in solana explorer, \n                        // need to convert it to string first using `bs58.encode(signature)`\n}\n</code></pre>"},{"location":"auth/web3-ops/unity-wallet-ops/","title":"Unity Web3 Wallet Operations","text":"<p>Use <code>AuthProvider</code>, the standard EIP-1193 Ethereum provider offered by the Arcana Auth SDK, to call Web3 wallet operations in Unity apps.</p>"},{"location":"auth/web3-ops/unity-wallet-ops/#supported-web3-operations","title":"Supported Web3 Operations","text":"<p>Call <code>Request</code> to make Web3 Wallet operation requests from within the app context. Provide the 'method' parameter for any supported Web3 wallet operations.</p> <p>Supported Wallet Operations</p> <p>The supported methods in the <code>Request</code> function may vary depending on the selected blockchain network, EVM chains, or non-EVM chains, such as Solana or MultiversX. See the supported JSON/RPC Web3 operations for a list of chain-specific methods supported via the <code>Request</code> call of the Arcana Auth Unity SDK.</p> <pre><code>responseTextField.text = \"\";\nif (parameters.text != null)\n{\n  response = (await arcanaSDK.Request(new RequestParams {\n      Method = method.text,\n      Params = JsonConvert.DeserializeObject&lt;object[]&gt;(parameters.text)\n  })).ToString();\n}\nelse\n{\n  response = (await arcanaSDK.Request(new RequestParams {\n      Method = method.text,\n  })).ToString();\n}\n</code></pre>"},{"location":"ca/ca-demo/","title":"CA Demo","text":"<p>Here is our showcase demonstrating chain abstraction technology.</p> <p>We use a two pronged approach for demo purposes:</p> <ol> <li>Web3 Apps: Show CA in the context of popular Web3 apps by using a special CA enabled wallet.</li> <li>SDK Demo: Show through a sample app integration how devs can enable chain abstracted transactions in any Web3 app by integrating the  app with Arcana CA SDK.</li> </ol>"},{"location":"ca/ca-demo/#1-web3-apps","title":"1. Web3 Apps","text":"<p>In these videos, you'll see how unified balance and chain abstracted transactions elevate the user experience in some of these popular Web3 apps. </p> <p>Note, these demo videos use the Arcana CA Wallet which is specially implemented to showcase the unified balance and chain abstracted transactions. It is not meant to be used as a full-fledged Web3 wallet, yet.</p> <p>Click on the app specific tab to see chain abstracted transactions in action. </p> AaveGalaxy ExchangeGriffyHyperliquidJumperPolymarketUniSwap <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"ca/ca-demo/#2-sdk-demo","title":"2. SDK Demo","text":"<p>Developers can integrate the Arcana CA SDK with any Web3 app to let users spend unified balance across chains via chain abstracted transactions. </p> <p> CA SDK Demo</p> <p>Have a Web3 app?</p> <p>Have you integrated your app with our SDK?</p> <p>We would be delighted to add your app integration demo here and share it with the larger Arcana community!</p> <p>Submit a YouTube link at hello@arcana.network</p>"},{"location":"ca/ca-sdk-installation/","title":"Chain Abstraction SDKs","text":"<p>Enable unified balance and chain abstracted transactions for Web3 app users.</p> <p>You may need to install one or more Arcana SDK packages according to the app type.</p> <p>Arcana CA SDK Flavors</p> <p>Install the appropriate CA SDK as per Web3 app type:</p> SDK Name Web3 Application Type Package Name Dependency Arcana CA SDK For enabling unified balance in web apps: Vanilla HTML/CSS/JS Apps, Vite, Vue Apps <code>ca-sdk</code> None Arcana CA Wagmi SDK Wagmi Apps <code>ca-wagmi</code> <code>ca-sdk</code>"},{"location":"ca/ca-sdk-installation/#install-sdks","title":"Install SDKs","text":""},{"location":"ca/ca-sdk-installation/#web-apps","title":"Web Apps","text":"<pre><code>npm install --save @arcana/ca-sdk\n</code></pre>"},{"location":"ca/ca-sdk-installation/#wagmi-apps","title":"Wagmi Apps","text":"<pre><code>npm install --save @arcana/ca-sdk @arcana/ca-wagmi\n</code></pre>"},{"location":"ca/ca-usage-guide/","title":"API: <code>ca-sdk</code>","text":"<p>Integrate Web3 app with the Arcana CA SDK's to enable:</p> <ul> <li>Unified balance</li> <li>Chain abstracted transactions</li> </ul> <p> Arcana CA SDK Reference</p>"},{"location":"ca/ca-usage-overview/","title":"Usage","text":"<p>Chain Abstraction allows Web3 app users to spend assets on any chain through unified balance. </p> <p>Web3 app developers can enable unified balance for app users by integrating the appropriate  Arcana CA SDK flavor.</p>"},{"location":"ca/ca-usage-overview/#integration-flow","title":"Integration Flow","text":"Select SDKInstall &amp; Integrate <pre><code>flowchart LR\n    subgraph Integrate [Select SDK for App Type]\n    direction LR\n      A00(((Start))) --&gt; F00[App Type]\n      F00 -- Web App --&gt; G00[Arcana CA SDK]\n      F00 -- Wagmi App --&gt; H00[Arcana CA Wagmi SDK]\n      G00 &amp; H00 --&gt; I00(Install &amp; Integrate)\n    end\n\nclassDef an-highlight stroke:#3169b3,stroke-width:0.25rem;\nclass E00 an-highlight</code></pre> <pre><code>flowchart LR\n    subgraph Integrate [Integrate SDK with App]\n    direction LR\n      A00(((Start))) --&gt; F00[Install SDK]\n      F00 -- Integrate App --&gt; G00[Initialize SDK]\n      G00 --&gt; H00(Call SDK Functions)\n    end\n\nclassDef an-highlight stroke:#3169b3,stroke-width:0.25rem;\nclass E00 an-highlight</code></pre>"},{"location":"ca/ca-usage-overview/#see-also","title":"See Also","text":"<ul> <li>Chain Abstraction</li> <li>CA SDK</li> <li>Download Arcana CA SDK</li> </ul>"},{"location":"ca/ca-users/","title":"CA Users","text":"<p>Spend crypto on any blockchain instantly - no chain switching, no bridges, no hassle.</p> <p>To enjoy unified balance Web3 users have two options:</p> <p>Option 1: Log in to an app integrated with Arcana's' Chain Abstraction SDK and connect any third-party browser-based wallet to view unified balance and sign transactions. For example, you can log into the CA SDK demo app to experience unified balance.Arcana CA SDK Demo App: Unified Balance</p> <p>Option 2: Download Arcana's' standalone CA Wallet browser extension to view unified balance across supported chains and tokens. This wallet showcases the chain abstraction solution and unified balance feature for a select group of popular Web3 apps.Arcana CA Wallet</p> <p>See wallet Help and FAQ resources for details.</p>"},{"location":"ca/ca-wagmi-usage-guide/","title":"API: <code>ca-wagmi</code>","text":"<p>Integrate Web3 apps using Wagmi with the Arcana CA Wagmi SDK's to enable:</p> <ul> <li>Unified balance</li> <li>Chain abstracted transactions</li> </ul> <p> Arcana CA Wagmi SDK Reference</p>"},{"location":"ca/examples/","title":"Examples","text":"CA-SDK IntegrationCA-Wagmi IntegrationCA + Auth Integration <p>This is a Vue+TypeScript+Vite template that has been enhanced with the Arcana CA SDK integration code.</p> <p> GitHub </p> <p> Try Now!</p> <p>This Wagmi example app demonstrates how to integrate the Arcana CA Wagmi SDK with a Wagmi app.</p> <p> GitHub </p> <p> Try Now!</p> <p>This Wagmi example app demonstrates how to onboard users via social login and enable chain abstraction by integrating the Arcana CA Wagmi SDK and the Arcana Auth SDK with a Wagmi app.</p> <p> GitHub </p> <p> Try Now!</p>"},{"location":"ca/why-ca-sdk/","title":"Why CA SDK?","text":"<p>Arcana\u2019s Chain Abstraction SDK can integrate with any Web3 app and enable unified balance for the app users. Unified balance allows users to spend the consolidated multi-chain balance of supported source chain tokens within the app context on any destination chain. </p> <p>This allows Web3 apps to onboard users from any ecosystem effortlessly. Integration with the SDK requires minimal effort.</p>"},{"location":"ca/why-ca-sdk/#onboard-users-on-any-chain","title":"Onboard Users on Any Chain","text":"<ul> <li> <p> Unified Balance</p> <p>Display users' consolidated balance across chains. Use Arcana\u2019s plug-and-play UI or design your own.</p> </li> <li> <p> Flexible Gas Payments</p> <p>Users can pay gas fees in USDC or USDT if they do not have native gas tokens.</p> </li> <li> <p> Larger Transactions</p> <p>Users can seamlessly access and spend their entire multi-chain balance on the desired chain, in a single click.</p> </li> <li> <p> No Lock-In</p> <p>All assets are in user's custody, no compulsion to rely on Arcana for accessing funds. Users can freely spend their assets on any app.</p> </li> </ul>"},{"location":"ca/why-ca-sdk/#quick-integration","title":"Quick Integration","text":"<ul> <li> <p> Frontend Code Updates</p> <p>Requires minimal changes to the Web3 app's front-end code.</p> </li> <li> <p> No Smart Contract Changes</p> <p>Requires zero migration or updates to Web3 app's smart contracts.</p> </li> <li> <p> Bring Existing Wallets</p> <p>Users can bring their existing EOA wallets such as MetaMask, Rabby, Rainbow, etc.</p> </li> <li> <p> Assets: Zero Lockups or Transfers </p> <p>Users do not need to transfer their funds to a new wallet address or lockup in a smart contract.</p> </li> </ul> <p>Arcana CA SDK Demo App: Unified Balance</p>"},{"location":"ca/why-ca-sdk/#why-chain-abstraction","title":"Why Chain Abstraction?","text":"<p>Chain abstraction addresses multiple blockchain usability issues. It eliminates liquidity fragmentation, enabling users to spend the available source chain unified balance on any destination chain. This offers a superior user experience by eliminating the need for users to navigate multiple blockchain hoops (bridges, token swaps, and determining the optimal route to consolidate funds acceptable on the destination chain). With unified balance, users can onboard a new chain with no assets or spend on a destination chain where the EOA has insufficient funds.</p> <p>The table below illustrates how the user experience is superior with a single-click chain abstracted transaction.</p> UX: Transact on New Chain No CA: Complex, Multi-step UX With CA: One-step UX  Figure out which chain your app runs on  Hunt for the best bridge to move assets  Fund gas tokens on different chains  Track and transfer balances across chains Issue a transaction on a new chain <p>Learn more...</p>"},{"location":"ca/integrate/wagmi/","title":"Integrate Wagmi App","text":"<p>Integrate 'Wagmi' apps with the Arcana CA Wagmi SDK  to enable:</p> <ul> <li>Unified balance</li> <li>Chain abstracted transactions</li> </ul> <p>App users can spend funds on any chain. They do not need to switch chains or bridge assets.</p> <p>No Fuel support in <code>ca-wagmi</code> SDK</p> <p>The Arcana CA Wagmi SDK doesn't support Fuel blockchain yet. Chain abstraction works for other supported chains and tokens in Wagmi-based Web3 apps.</p>"},{"location":"ca/integrate/wagmi/#prerequisites","title":"Prerequisites","text":"<p>Download and install the SDKs:</p> <pre><code>npm install --save @arcana/ca-sdk @arcana/ca-wagmi\n</code></pre>"},{"location":"ca/integrate/wagmi/#caprovider","title":"<code>CAProvider</code>","text":"<p>Initialize the <code>CAProvider</code> component and specify the <code>CA</code> object as the <code>client</code> param.</p> <pre><code>    import { StrictMode } from \"react\";\n    import { createRoot } from \"react-dom/client\";\n    import { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n    import { WagmiProvider } from 'wagmi'\n    import { CA } from \"@arcana/ca-sdk\";\n    import { CAProvider } from '@arcana/ca-wagmi'\n    import App from \"./App.tsx\";\n    import { config } from \"./utils/config\";\n\n    const ca = new CA();\n    const queryClient = new QueryClient()\n\n    createRoot(document.getElementById(\"root\")!).render(\n        &lt;StrictMode&gt;\n            &lt;WagmiProvider config={config}&gt;\n                &lt;QueryClientProvider client={queryClient}&gt;\n                    &lt;CAProvider client={ca}&gt;\n                        &lt;App /&gt;\n                    &lt;/CAProvider&gt;\n                &lt;/QueryClientProvider&gt;\n            &lt;/WagmiProvider&gt;\n        &lt;/StrictMode&gt;\n    );\n</code></pre> <p>For <code>CAProvider</code> methods, see  Arcana CA Wagmi SDK Reference.</p> <p>The <code>CAProvider</code> component offers hooks with the same name as the Wagmi library.</p> <p>Replace the <code>useSendTransaction</code> and <code>useWriteContract</code> hooks from the Wagmi library. Instead, use the versions provided by the SDK. These support chain abstracted transactions.</p>"},{"location":"ca/integrate/wagmi/#wagmi-hooks","title":"Wagmi Hooks","text":"<p>Replace the following hooks used in the app from the Wagmi library with those from the Arcana CA Wagmi SDK package:</p> <pre><code>import { useSendTransaction, useWriteContract } from \"@arcana/ca-wagmi\";\n\n// Replace the `wagmi` APIs `useSendTransaction` and `useSendTransactionAsync`\nconst { sendTransaction, sendTransactionAsync } = useSendTransaction(); \n\n// Replace the wagmi APIs `useWriteContract` and `useWriteContractAsync`\nconst { writeContract, writeContractAsync } = useWriteContract(); \n</code></pre>"},{"location":"ca/integrate/wagmi/#arcana-hooks","title":"Arcana Hooks","text":"<p>The SDK also provides hooks for: - Accessing unified balance - Issuing chain abstracted bridge and transfer functions - Getting a list of user intents</p> <ul> <li><code>useBalance</code> - to get the unified balance value across all supported chains for the specified token string </li> <li><code>useBalances</code> - to get the unified balance values across all supported chains for all supported tokens associated with the EOA</li> <li><code>useBalanceModal</code> - to display or hide the unified balance popup widget</li> <li><code>useCAFn()</code>  - for chain abstracted bridging and token transfer functionality</li> <li><code>useGetMyIntents()</code> - get the list of intents created by the user</li> </ul>"},{"location":"ca/integrate/wagmi/#usebalance","title":"useBalance","text":"<p>The <code>useBalance</code> hook  fetches the unified balance for the specified token. This is the value across  all the supported chains associated with the user's EOA.</p> <p><code>useBalance({ symbol: string })</code></p>"},{"location":"ca/integrate/wagmi/#params","title":"Params","text":"<p><code>symbol</code>: Required parameter of type <code>string</code> with the value equal to one of the supported currency/token symbol.</p> <pre><code>import { useBalance } from \"@arcana/ca-wagmi\"\n\nconst balance = useBalance({ symbol: \"eth\" })\n</code></pre>"},{"location":"ca/integrate/wagmi/#response","title":"Response","text":"Parameter Type loading <code>boolean</code> value <code>{ symbol: string, decimals: number, formatted: string, value: bigint} \\| null</code> error <code>Error \\| null</code> Sample <code>useBalance</code> Response <pre><code>{\n  loading: false,\n  value: {\n    symbol: \"ETH\",\n    decimals: 18,\n    formatted: \"0.000785657313049966\",\n    value: 785657313049966n\n  },\n  error: null\n}\n</code></pre>"},{"location":"ca/integrate/wagmi/#usebalances","title":"useBalances","text":"<p>The <code>useBalances()</code> hook returns the unified balance value across all the supported chains and all the supported tokens associated with the user's EOA.</p> <pre><code>import { useBalances } from \"@arcana/ca-wagmi\"\n\nconst balances = useBalances()\n</code></pre>"},{"location":"ca/integrate/wagmi/#response_1","title":"Response","text":"<p>returns response contains the following fields:</p> Parameter Type loading <code>boolean</code> value <code>UseBalanceValue[] \\| null</code> error <code>Error \\| null</code> Sample <code>useBalances</code> Response <pre><code>{\n  loading: false,\n  value: [{\n    symbol: \"ETH\",\n    decimals: 18,\n    formatted: \"0.000785657313049966\"\n    value: 785657313049966n,\n    breakdown: [{\n      chain: {\n        id: 1,\n        name: \"Ethereum\",\n        logo: \"...\"\n      },\n      formatted: \"0.000785657313049966\",\n      address: \"0x0000000000000000000000000000000000000000\",\n      value: 785657313049966n\n    }]\n  }],\n  error: null\n} \n</code></pre>"},{"location":"ca/integrate/wagmi/#usebalancemodal","title":"useBalanceModal","text":"<p>The <code>useBalanceModal()</code> hook can be used in the app to display or hide the unified balance modal. This modal displays the following information:</p> <ul> <li>Overall unified balance: Total available balance in the user's EOA across all supported chains and tokens</li> <li>Per token unified balance: Total available token balance across all the supported chains, breakup in a list of chains and per chain token balance.</li> </ul> <pre><code>import { useBalanceModal } from \"@arcana/ca-wagmi\"\n\nconst { showModal, hideModal } = useBalanceModal()\n</code></pre>"},{"location":"ca/integrate/wagmi/#response_2","title":"Response","text":"Field Type showModal <code>() =&gt; void</code> hideModal <code>() =&gt; void</code> Plug &amp; Play Unified Balance Widget"},{"location":"ca/integrate/wagmi/#usecafn","title":"useCAFn","text":"<p>The <code>useCAFn()</code> hook allows chain abstracted <code>bridge</code> and <code>transfer</code> transactions.</p> <pre><code>import { useCAFn } from \"@arcana/ca-wagmi\"\n\nconst { bridge, transfer } = useCAFn()\n\nawait bridge({\ntoken: \"usdt\",\namount: \"1.5\",\nchain: 42161\n})\n\nconst hash = await transfer({to: \"0x80129F3d408545e51d051a6D3e194983EB7801e8\",\ntoken: \"usdt\",\namount: \"1.5\",\nchain: 10\n})\n</code></pre>"},{"location":"ca/integrate/wagmi/#response_3","title":"Response","text":"Parameter Type bridge <code>({ token: string, amount: string, chain: number }) =&gt; Promise&lt;unknown&gt;</code> transfer <code>({ token: string, amount: string, chain: number, to: \"0x${string}\" }) =&gt; Promise&lt;unknown&gt;</code> `useCAFn`: Chain Abstracted Bridge and Transfer"},{"location":"ca/integrate/wagmi/#usegetmyintents","title":"useGetMyIntents","text":"<p>Used to get a list of intents created by the user.</p> <p><code>useGetMyIntents(page)</code></p>"},{"location":"ca/integrate/wagmi/#params_1","title":"Params","text":"<p><code>page</code>: Page number; 1 returns latest, max 100 results per page</p> <pre><code>import { useGetMyIntents } from \"@arcana/ca-wagmi\";\n\nconst getMyIntentsResponse = useGetMyIntents(1);\n</code></pre>"},{"location":"ca/integrate/wagmi/#response_4","title":"Response","text":"<p><code>UseQueryResult&lt;RFF[] | null&gt;</code></p> <p>Sample Response</p> <pre><code>{\n  isLoading: false,\n  isFetching: false,\n  isSuccess: true,\n  isError: false,\n  data: [{\n    id: 107,\n    sources: [{\n      universe: \"ETHEREUM\",\n      tokenAddress: \"0x0b2c639c533813f4aa9d7837caf62653d097ff85\",\n      value: 18531n,\n      chainID: 10,\n    }],\n    destinations: [{\n      tokenAddress: \"0xaf88d065e77c8cc2239327c5edb3a432268e5831\",\n      value: 10000n,\n    }],\n    destinationUniverse: \"ETHEREUM\",\n    destinationChainID: 42161\n    fulfilled: true,\n    refunded: false,\n    expiry: 1750070223,\n    deposited: true\n  }],\n  error: null\n}\n</code></pre> <p>Finished. </p> <p>The 'Wagmi' app is all set to let users spend on any chain via unified balance and chain abstracted transactions.</p>"},{"location":"ca/integrate/wagmi/#see-also","title":"See Also","text":"<p>Arcana CA Wagmi SDK Quick Links</p> <ul> <li>Supported Chains, tokens</li> <li>Arcana CA Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try CA Wagmi SDK CodeSandbox </p>"},{"location":"ca/integrate/web/","title":"Integrate Web App","text":"<p>Integrate 'Web3' apps with the  Arcana CA SDK  to enable:</p> <ul> <li>Unified balance</li> <li>Chain abstracted transactions</li> </ul> <p>App users can spend funds on any chain. They do not need to switch chains or bridge assets.</p>"},{"location":"ca/integrate/web/#prerequisites","title":"Prerequisites","text":"<p>Download and install the SDK.</p> <pre><code>npm install --save @arcana/ca-sdk\n</code></pre>"},{"location":"ca/integrate/web/#initialize","title":"Initialize","text":"<p>The process for integrating the SDK differs for dApps that need to support both EVM and non-EVM chains, such as Fuel.</p> EVM onlyEVM + Fuel <pre><code>import { CA } from '@arcana/ca-sdk';\nconst provider = window.ethereum;\nconst ca = new CA();\n//Set the EVM provider  \nca.setEVMProvider(provider);\n\n//Initialize ca\nawait ca.init();\n\n//Get CA enabled provider\nconst providerWithCA = ca.getEVMProviderWithCA();\n\n//Use providerWithCA to issue chain enabled transactions\nawait providerWithCA.request({\n    method: \"eth_sendTransaction\",\n    params: [\n        {\n        to: \"0xEa46Fb4b4Dc7755BA29D09Ef2a57C67bab383A2f\",\n        from: \"0x7f521A827Ce5e93f0C6D773525c0282a21466f8d\",\n        value: \"0x001\",\n        },\n    ],\n});\n</code></pre> <pre><code>import { CA } from '@arcana/ca-sdk';\nconst provider = window.ethereum;\nconst ca = new CA();\n//Set the EVM provider  \nca.setEVMProvider(provider);\n\n//Initialize ca\nawait ca.init();\n\n//connector refers to https://github.com/FuelLabs/fuel-connectors/wiki\nawait ca.setFuelConnector(connector);\nconst { provider, connector: CAconnector } = await ca.getFuelWithCA();\n\nconst address = CAconnector.currentAccount()!;\nconst account = new Account(address, provider, CAconnector);\n\n//chain abstraction enabled transfer\nawait account.transfer(\n    \"0xE78655DfAd552fc3658c01bfb427b9EAb0c628F54e60b54fDA16c95aaAdE797A\",\n    1000000,\n    \"0xa0265fb5c32f6e8db3197af3c7eb05c48ae373605b8165b6f4a51c5b0ba4812e\",\n);\n</code></pre> <p><code>ca.init()</code></p> <p>Use <code>await</code> until the <code>init()</code> call is complete. Then call  any other <code>CA</code> method listed in the Arcana CA SDK Reference.</p>"},{"location":"ca/integrate/web/#unified-balance","title":"Unified Balance","text":"<p>Get unified balance on the supported source chains:</p> <ul> <li>View the total EOA balance for all supported tokens and chains.</li> <li>View the total EOA balance for a specified token across all chains.</li> </ul> <pre><code>//total chain abstracted unified balance across all chains/tokens\nconst balances = await ca.getUnifiedBalances();\n//total balance for a specific token across all chains \nconst usdtBalance = await ca.getUnifiedBalance(\"usdt\");\n</code></pre>"},{"location":"ca/integrate/web/#ca-transactions","title":"CA Transactions","text":"<p>Enable chain abstracted transactions through:</p> <ul> <li><code>transfer</code></li> <li><code>request</code></li> <li><code>bridge</code></li> </ul>"},{"location":"ca/integrate/web/#transfer","title":"<code>transfer</code>","text":"<p>Use unified balance for chain abstracted transactions.</p> <pre><code>const handler = await ca.transfer({\n  to: \"0x...\",\n  amount: 5,\n  chainID: 10,  //optional, defaults to current chain\n  token: \"eth\",\n});\n\n// Execute the transfer\nconst hash = await handler.exec();\n\n// Simulate the transfer, returns intent data and token info\nconst response = await handler.simulate();\n</code></pre>"},{"location":"ca/integrate/web/#request","title":"<code>request</code>","text":"<p>Replace the standard EIP-1193 provider with a chain-abstracted one using <code>getEVMProviderWithCA</code>. Then use it to call <code>request</code> with <code>eth_sendTransaction</code> to use unified balance.</p> <pre><code>const providerWithCA = ca.getEVMProviderWithCA();\n\nawait providerWithCA.request({\n  method: \"eth_sendTransaction\",\n  params: [\n    {\n      to: \"0xEa46Fb4b4Dc7755BA29D09Ef2a57C67bab383A2f\",\n      from: \"0x7f521A827Ce5e93f0C6D773525c0282a21466f8d\",\n      value: \"0x001\",\n    },\n  ],\n});\n</code></pre>"},{"location":"ca/integrate/web/#bridge","title":"Bridge","text":"<p>Use the unified balance to deposit tokens on a different chain. Chain abstracted transactions handle the transfer.</p> <pre><code>const handler = await ca.bridge({\n  token: \"usdt\",\n  amount: 10,\n  chainID: 137,\n});\n\n// Execute the bridge\nawait handler.exec();\n\n// Simulate the bridge, returns intent data and token info\nconst response = await handler.simulate();\n</code></pre>"},{"location":"ca/integrate/web/#allowance","title":"Allowance","text":"<p>Allowances are set to <code>unlimited</code> by default for all supported chains and tokens. Developers can update the allowance settings via <code>setOnAllowanceHook()</code>. App users can approve chain abstracted transactions. They cannot change the allowance set by the app developers.</p>"},{"location":"ca/integrate/web/#setonallowancehook","title":"<code>setOnAllowanceHook</code>","text":"<p>Use <code>setOnAllowanceHook</code> to set up allowances for chain abstracted transactions. The default value is set to <code>unlimited</code> for all chains.</p> <pre><code>ca.setOnAllowanceHook(async ({ allow, deny, sources }) =&gt; {\n    // This is a hook for the dev to show user the allowances that need to be setup for the current tx to happen\n\n    // sources: an array of objects with minAllowance, chainID, token symbol etc\n    // allow(allowances): allowances is an array with allowance for each source (len(sources) == len(allowances))\n    // deny(): stop the flow\n})\n</code></pre>"},{"location":"ca/integrate/web/#get-allowance","title":"Get Allowance","text":"<p>Get allowance values configured for the chain abstracted transactions.</p> <pre><code>// Get USDC allowance for Polygon\nawait ca.allowance().tokens([\"USDC\"]).chain(137).get()\n// Get USDC &amp; USDT allowance for all supported chains\nawait ca.allowance().tokens([\"USDC\", \"USDT\"]).get()\n// Get all supported token allowances for all supported chains\nawait ca.allowance().get()\n</code></pre>"},{"location":"ca/integrate/web/#intents","title":"Intents","text":""},{"location":"ca/integrate/web/#setonintenthook","title":"<code>setOnIntentHook</code>","text":"<p>Use <code>setOnIntentHook</code> to show the intent details such as the source of funds, applicable fees.</p> <pre><code>ca.setOnIntentHook(({ intent, allow, deny, refresh }) =&gt; {\n    // This is a hook for the dev to show user the intent, the sources and associated fees\n\n    // intent: Intent data containing sources and fees for display purpose\n    // allow(): accept the current intent\n    // deny(): deny the intent and stop the flow\n    // refresh(): should be on a timer of 5s to refresh the intent (if not refreshed old intents might fail due to fee changes)\n  })\n</code></pre>"},{"location":"ca/integrate/web/#get-intents","title":"Get Intents","text":"<p>Get the list of intents representing user's request for funds.</p> <pre><code>import type { RFF } from \"@arcana/ca-sdk\"\n\nconst page = 1\nconst intentList: RFF[] = await ca.getMyIntents(page);\n</code></pre>"},{"location":"ca/integrate/web/#events","title":"Events","text":"<p>Set up event listeners. Track the intent processing stages.</p>"},{"location":"ca/integrate/web/#add-listener","title":"Add Listener","text":"<pre><code>ca.caEvents.on(\"expected_steps\", (data) =&gt; {\n  state.value.steps = data.map((s) =&gt; ({ ...s, done: false }));\n});\n\nca.caEvents.on(\"step_complete\", (data) =&gt; {\n  const v = state.value.steps.find((s) =&gt; {\n    return s.typeID === data.typeID;\n  });\n  if (v) {\n    v.done = true;\n  }\n});\n</code></pre>"},{"location":"ca/integrate/web/#remove-listener","title":"Remove Listener","text":"<pre><code>ca.caEvents.removeListener(\"expected_steps\", () =&gt; {...})\nca.caEvents.removeListener(\"step_complete\", () =&gt; {...})\n</code></pre> <p>Check out the integration example code.</p> <p>Finished. </p> <p>The 'Web3' app is all set to let users spend on any chain via unified balance and chain abstracted transactions.</p>"},{"location":"ca/integrate/web/#see-also","title":"See Also","text":"<p>Arcana CA SDK Quick Links</p> <ul> <li>Arcana CA SDK Reference</li> <li>CA FAQ</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try CA SDK Demo </p> <p>Vite + CA SDK Integration </p>"},{"location":"ca/introduction/ca/","title":"Chain Abstraction Architecture","text":"<p>Before we get into the details of Arcana's Chain Abstraction (CA) architecture, let's first understand some key concepts.</p>"},{"location":"ca/introduction/ca/#what-is-ca","title":"What is CA?","text":"<p>Managing multiple chains, tokens, and accounts fragments wallet liquidity for Web3 users. Even with enough assets overall, funds scattered across chains make transacting difficult and require complex, time-consuming conversions.</p> <p>Chain abstraction lets users access a unified balance across all wallet-linked chains, enabling transactions anywhere. Instead of converting funds first, users specify a clear intent. The protocol collects funds from source chains, shows intent and fees for confirmation, then publishes the intent to solvers. Solvers compete to provide liquidity on the destination chain, and once available, users confirm the transaction. Settlement with solvers happens asynchronously using the collected funds.</p> <p>As part of setup, devs configure allowances per chain and token. Users approve or reject these allowances. For supported chains and tokens, the protocol uses these allowances to deposit required funds for transactions on the destination chain.</p> Arcana's Chain Abstraction"},{"location":"ca/introduction/ca/#why-chain-abstraction","title":"Why Chain Abstraction?","text":"<p>Chain abstraction enables unified balance to simplify and streamline Web3 transactions. It offers: </p> <ul> <li>Faster Intent Processing: Enables quick and seamless transaction execution across chains.</li> <li>Unified Liquidity: Provides a consolidated view of user assets across wallet-linked chains with no asset bridging.</li> <li>Simplified UX: Removes multi-step hurdles for a seamless experience for users.</li> <li>Streamlined DX: Developers can add unified balances to dApps with minimal changes and no smart contract updates for new chains.</li> </ul>"},{"location":"ca/introduction/ca/#arcana-ca-offerings","title":"Arcana CA Offerings","text":"<p>Arcana has two CA offerings, one targeted at the Web3 Users and the other for Web3 builders and developers.</p> Web3 DevelopersWallet Users <ul> <li>Web Apps: Arcana CA SDK</li> <li>Wagmi Apps: Arcana CA Wagmi SDK</li> </ul> <ul> <li>Arcana Wallet (Standalone)</li> </ul>"},{"location":"ca/introduction/ca/#architecture","title":"Architecture","text":"<p>Arcana's Chain Abstraction (CA) protocol manages balances across multiple chains and tokens in Web3 apps. It solves liquidity fragmentation by enabling a unified balance across supported chains. The Arcana Vault smart contracts on each supported chain and the solver ecosystem are two key parts of the Arcana CA protocol. There\u2019s no auction; it\u2019s a first-come, first-served system where the first solver to accept an intent gets to fulfill it.</p> <p>The user's EOA state and intents are managed across multiple chains. Approved intents are published for 'solvers' to fulfill. Solvers compete to fulfill these intents and provide liquidity on the destination chain. The protocol handles state transitions and settles solver payments using transaction netting.</p> How Arcana CA Works"},{"location":"ca/introduction/ca/#ca-protocol","title":"CA Protocol","text":"<ol> <li>Developer sets up Arcana Chain Abstraction settings enabling cross chain transactions on selected chain types and required allowances.</li> <li>App users are required to permit the allowance values or reconfigure them if the app allows. Allowances enable Arcana Vault to collect required funds from the EOA account on one or more source chains, as per the user's intent.</li> <li>User submits an intent to spend <code>n</code> tokens on a destination chain Y and transact via a Web3 app.</li> <li>Arcana verifies that user has sufficient funds across the source chains in the user's EOA account and adequate allowances are pre-configured to enable chain abstraction, pay gas fees.</li> <li>Funds are moved to the Arcana Vault and user's intent is announced to all listening solvers.</li> <li>The assumption is that one of the available solvers in the system will agree to service the user's intent. As of today, only Arcana solver is supported. We are working with partners to onboard trusted third-party solvers into the ecosystem.</li> <li>Once the solver services the intent and provides the necessary liquidity on the desired destination chain into the user's EOA, the user can instantly spend it.</li> <li>Arcana takes care of managing the settlement at the agreed upon periodicity with the successful solvers. The settlement does not happen after every user transaction but after netting and verification process.</li> <li>In case a transaction fails, or times out waiting for a solver, user's funds deposited from the source chain are refunded within a stipulated time period after verification.</li> </ol>"},{"location":"ca/introduction/use-cases/","title":"Use Cases","text":"<p>Arcana's Chain Abstraction is designed for onboarding users across a wide range of applications, but it is particularly impactful for DeFi applications that depend on deposits in stablecoins like USDC or USDT, as well as native tokens like ETH.</p> <p>Benefits</p> <ul> <li>Remove friction of bridging with a unified multi-chain balance</li> <li>Larger transaction values</li> <li>Launch apps on emerging chains while onboarding users from established ecosystems</li> </ul>"},{"location":"ca/introduction/use-cases/#swaps","title":"Swaps","text":"<p>Allow users to execute token swaps on a single chain DEX while using funds held in multiple assets across several chains as a unified balance. For example, a user holding ETH on Optimism and USDC on Arbitrum can seamlessly swap tokens to be able to spend USDT on Polygon without needing to bridge or consolidate assets manually. This removes friction for users, ensuring smoother transactions and higher conversion rates for swap protocols.</p>"},{"location":"ca/introduction/use-cases/#bridges","title":"Bridges","text":"<p>Bridges enable users to move funds from Chain A to Chain B, but when users hold disparate assets across multiple chains, they face the challenge of tracking and transferring funds chain by chain. With Arcana\u2019s Chain Abstraction, users can bridge their entire multi-chain balance to the desired chain in one step.</p> Example <p>User holds USDC on Arbitrum, USDT on Polygon, some ETH on Optimism and wants to consolidate their funds on Arbitrum. </p> <p>With chain abstraction, instead of manually bridging disparate tokens held across different chains, one at a time, users can issue a single intent to bridge their asset balance from source chains to a desired supported token on Arbitrum in a single step.</p>"},{"location":"ca/introduction/use-cases/#decentralized-exchanges-dexes","title":"Decentralized Exchanges (DEXes)","text":"<p>For liquidity providers and traders, fragmented funds across chains often hinder participation in DEXes. With Arcana, users can trade or provide liquidity on a single-chain DEX (for example, Optimism) using their unified balance from multiple chains, such as Ethereum, Polygon, and Arbitrum. This enables more efficient capital utilization, increases trading volumes, and expands access to liquidity for DEX platforms.</p>"},{"location":"ca/introduction/use-cases/#perpetuals-trading","title":"Perpetuals Trading","text":"<p>For protocols that need users to deposit stable coins to a particular address on a specific chain (for example, Hyperliquid on Arbitrum) Arcana\u2019s Chain Abstraction allows users to trade on a perpetual protocol on one chain, like Base, using a unified balance of funds held on Ethereum, Polygon, or other chains. This removes the need for manual bridging and ensures traders can respond quickly to market changes without delays in fund transfers.</p>"},{"location":"ca/introduction/use-cases/#prediction-markets","title":"Prediction Markets","text":"<p>Prediction markets often have strong user bases tied to specific chains. Arcana\u2019s Chain Abstraction allows users to stake or wager assets on a prediction market hosted on a single chain (for example, Polymarket on Polygon) using funds held across multiple chains. For instance, a user can use their combined stablecoin holdings from Ethereum and Polygon to place a bet on Polygon, ensuring greater cross-chain participation and deeper liquidity for these markets.</p>"},{"location":"ca/introduction/use-cases/#lending","title":"Lending","text":"<p>Borrowers and lenders often face challenges when their assets are distributed across chains and they want to access new yield products on specific chains. With Arcana, a user can supply liquidity to a lending protocol on one chain, such as Ethereum, using their unified balance aggregated from other chains like Optimism and Base.</p> <p>This leads to larger deposit and borrow transactions with the access to a larger pool of capital.</p>"},{"location":"ca/introduction/use-cases/#stakingrestaking","title":"Staking/Restaking","text":"<p>Restaking requires users to bring assets or derivatives to specific chains. Arcana enables users to stake or restake assets on a protocol running on a single chain (for example, Polygon) by leveraging their unified balance across multiple chains. For instance, a user with ETH on Ethereum and Arbitrum can stake and restake seamlessly on another chain without manual transfers.</p> <p>This allows users from multiple EVM ecosystems to participate in the protocol.</p> <p>Stay tuned, Arcana is actively working on supporting additional use cases with the Arcana CA SDK.</p>"},{"location":"changelog/","title":"Changelog","text":"<p> <code>ca-sdk</code></p> <p> <code>auth</code></p> <p> <code>auth-wagmi</code></p> <p>  Dashboard</p> <p>  Wallet UI</p>"},{"location":"checklists/","title":"Integration Checklist","text":"<p>The integration checklists can help developers quickly integrate the Arcana Auth SDK with Web3 apps and enable social login to onboard users. The process may vary depending upon the Web3 app type and the blockchain where the app is deployed.</p> <ul> <li>Chain Type: EVM or non-EVM</li> <li>App Type: Web, Wallet connector, Mobile, Gaming</li> </ul>"},{"location":"checklists/#chain-type","title":"Chain Type","text":"EVMNon-EVM <p>Use this checklist for Web3 apps supported EVM chains.</p> <ul> <li> <p> 1. Register Web3 app, get Arcana Client ID. </p> </li> <li> <p> 2. Use the pre-configured chain list and select active chains displayed in the Arcana wallet, set a chain as the default.</p> </li> <li> <p> 3. Configure Social Login providers through the dashboard (optional).</p> </li> <li> <p> 4. Install the Arcana Auth SDK. Depending upon the app type and usage, you may have to install one or more SDK. </p> </li> <li> <p> 5. Integrate the app by following app-specific integration instructions: </p> <ul> <li>Wagmi </li> <li>RainbowKit</li> <li>Walletconnect</li> <li>Web3-react</li> <li>React/Next</li> <li>Vanilla HTML/CSS/JS</li> <li>Vue</li> </ul> </li> <li> <p> 6. Onboard users as per the app type and onboarding options: </p> <ul> <li>Wagmi</li> <li>RainbowKit</li> <li>Walletconnect</li> <li>Web3-react</li> <li>React/Next</li> <li>Vanilla HTML/CSS/JS</li> <li>Vue</li> </ul> </li> <li> <p> 7. Add code to issue supported Web3 wallet operations, JSON/RPC functions in the authenticated user's context.</p> </li> </ul> <p>Use this checklist for Web3 apps supported non-EVM chains.</p> <ul> <li> <p> 1. Register the app and configure non-EVM Chain settings as per the chain type:</p> <ul> <li>Solana</li> <li>MultiversX</li> <li>Near</li> </ul> </li> <li> <p> 2. Configure Social Login providers through the dashboard (optional).</p> </li> <li> <p> 3. Install the Arcana Auth SDK. Depending upon the app type and usage, you may have to install one or more SDK. </p> </li> <li> <p> 4. Integrate the app by following app-specific integration instructions: </p> <ul> <li>Wagmi </li> <li>RainbowKit</li> <li>Walletconnect</li> <li>Web3-react</li> <li>React/Next</li> <li>Vanilla HTML/CSS/JS</li> <li>Vue</li> </ul> </li> <li> <p> 5. Onboard users as per the app type and onboarding options: </p> <ul> <li>Wagmi</li> <li>RainbowKit</li> <li>Walletconnect</li> <li>Web3-react</li> <li>React/Next</li> <li>Vanilla HTML/CSS/JS</li> <li>Vue</li> </ul> </li> <li> <p> 6. Add code to issue supported Web3 wallet operations, and JSON/RPC functions in the authenticated user's context. Note that these supported functions may vary across chains:</p> <ul> <li>Solana</li> <li>MultiversX</li> <li>Near</li> </ul> </li> </ul>"},{"location":"checklists/#app-type","title":"App Type","text":"WebWallet ConnectorsMobileGaming <p>Use this checklist for vanilla HTML/CSS/JS apps, React/NextJS, and Vue Web3 apps.</p> <ul> <li> <p> 1. Register Web3 app, choose EVM/non-EVM chain type as required during app registration and configure the active and default chains via the dashboard. Get Arcana Client ID. </p> </li> <li> <p> 2. Configure Social Login providers through the dashboard (optional).</p> </li> <li> <p> 3. Install Arcana Auth SDK. For React/NextJS apps, also install the Arcana Auth React SDK. </p> </li> <li> <p> 4. Integrate the app by following app-specific integration instructions: </p> <ul> <li>Vanilla HTML/CSS/JS</li> <li>Vue</li> <li>React/Next</li> </ul> </li> <li> <p> 5. Onboard users as per the app type and onboarding options: </p> <ul> <li>Vanilla HTML/CSS/JS</li> <li>Vue</li> <li>React/Next</li> </ul> </li> <li> <p> 6. Add code to issue supported Web3 wallet operations, and JSON/RPC functions in the authenticated user's context. Note that the supported Web3 wallet operations may vary depending upon the chain type, EVM or non-EVM.</p> </li> </ul> <p>Use this checklist for Web3 apps using wallet connectors such as Wagmi, RainbowKit, WalletConnect and Web3-React.</p> <ul> <li> <p> 1. Register Web3 app, choose EVM/non-EVM chain type as required and configure the active and default chains via the dashboard. Get Arcana Client ID. </p> </li> <li> <p> 2. Configure Social Login providers through the dashboard (optional).</p> </li> <li> <p> 3. Install Arcana Auth SDK and Arcana Auth Wagmi SDK.</p> </li> <li> <p> 4. Integrate the app by following app-specific integration instructions: </p> <ul> <li>Wagmi </li> <li>RainbowKit</li> <li>Walletconnect</li> <li>Web3-react</li> </ul> </li> <li> <p> 5. Onboard users as per the app type and onboarding options: </p> <ul> <li>Wagmi</li> <li>RainbowKit</li> <li>Walletconnect</li> <li>Web3-react</li> </ul> </li> <li> <p> 6. Add code to issue supported Web3 wallet operations, JSON/RPC functions in the authenticated user's context.</p> </li> </ul> <p>Use this checklist for Web3 mobile apps built using Flutter or React-Native frameworks.</p> <ul> <li> <p> 1. Register Web3 app, choose EVM/non-EVM chain type as required during app registration and configure the active and default chains via the dashboard. Get Arcana Client ID. </p> </li> <li> <p> 2. Configure Social Login providers through the dashboard (optional).</p> </li> <li> <p> 3. Install Arcana Auth Flutter SDK or Arcana Auth React-Native SDK depending upon the app type.</p> </li> <li> <p> 4. Integrate the app and onboard users by following app-specific integration instructions: </p> <ul> <li>Flutter</li> <li>React-Native</li> </ul> </li> <li> <p> 5. Add code to issue supported Web3 wallet operations, and JSON/RPC functions in the authenticated user's context. Note that the supported Web3 wallet operations may vary depending upon the chain type, EVM or non-EVM.</p> </li> </ul> <p>Use this checklist for Web3 Unity apps.</p> <ul> <li> <p> 1. Set up Unity packages before installing the Arcana Auth Unity SDK.</p> </li> <li> <p> 2. Register Web3 app, choose EVM/non-EVM chain type as required and configure the active and default chains via the dashboard. Get Arcana Client ID. </p> </li> <li> <p> 3. Configure Social Login providers through the dashboard (optional).</p> </li> <li> <p> 4. Install Arcana Auth Unity SDK.</p> </li> <li> <p> 5. Integrate the Unity app with the Arcana Auth Unity SDK.</p> </li> <li> <p> 6. Onboard users via a single line of code using the plug-and-play login UI.</p> </li> <li> <p> 7. Add code to issue supported Web3 wallet operations, JSON/RPC functions via the Arcana wallet in the authenticated user's context. Note that the supported Web3 wallet operations may vary depending upon the chain type, EVM or non-EVM.</p> </li> </ul> Global Keys <p>Global keys automatically enable all supported social login providers for an app. No dashboard configuration is needed. When using global keys with a custom login UI, app developers can choose which providers to allow for user login. However, with the default plug-and-play login UI and global keys, disabling default social login providers is not possible.</p>"},{"location":"concepts/adkg/","title":"ADKG","text":"<p>Asynchronous Distributed Key Generation (ADKG) is a cryptographic protocol that allows multiple parties to generate a public-private key pair cooperatively, without needing a trusted third party or synchronization.</p> <p>Each party creates a partial private key and shares it with the others. Together, they use these partial keys to derive the final private key used for securing blockchain transactions in Web3 apps.</p> Asynchronous Distributed Key Generation (ADKG) <p>Reference: ADKG Paper</p> <p>ADKG is ideal for geographically dispersed or poorly connected parties where traditional methods are impractical. The distributed trust model in ADKG also makes it more resistant to attacks compared to methods relying on a single central authority.</p>"},{"location":"concepts/adkg/#adkg-for-web3-keys","title":"ADKG for Web3 Keys","text":"<p>Web3 blockchain transactions require user approval through cryptographic keys.</p> <p>The Arcana Auth SDK uses ADKG to securely generate key shares for Web3 users. It allows users to securely access and generate their keys on the client side, handling security and privacy concerns. Users can sign transactions with the non-custodial Arcana wallet.</p> <p>ADKG generates ECDSA keys on the secp256k1 curve, compatible with all EVM chains. Future updates will support other curves, blockchains, and key regeneration.</p>"},{"location":"concepts/adkg/#why-adkg","title":"Why ADKG?","text":"<p>Our ADKG implementation uses the Practical Asynchronous Distributed Key Generation protocol. It improves on the previous DKG by removing the need for a trusted dealer, reducing key exposure, and automating share regeneration. ADKG is resilient to attacks and works well in asynchronous networks. It ensures security by preventing any single node from accessing a user's key.</p> <p>ADKG Assumptions</p> <p>The ADKG protocol works under the assumption that in an asynchronous network of <code>n \u2265 3t + 1</code> nodes, where at most <code>t</code> nodes could be malicious.</p> <p>The protocol can achieve an expected communication cost of O(<code>\u03ba</code>n\\(^3\\) ) and terminates in expected O(log n) rounds. Here <code>\u03ba</code> is the security parameter. For example, if a collision-resistant hash function is used, in that case, <code>\u03ba</code> denotes the size of the hash function's output.</p>"},{"location":"concepts/adkg/#implementation-notes","title":"Implementation Notes","text":"<p>ADKG requires a set of at least 4 connected nodes at a minimum for accommodating a maximum of 1 malicious node.</p> <p>At a very high level, the protocol requires each node to independently generate secrets and then share a part of that secret with the other nodes. Each node then shares a proposed set of key shares with other nodes. Asynchronous Binary Agreement (ABA) voting is done by the nodes for each proposed set. Only the accepted and agreed-upon set is used to derive the key shares and then those key shares are combined to arrive at the final key pair. None of the nodes have full access to the secret key.</p> How does ADKG work? <p>The ADKG protocol has four phases:</p> <ol> <li>Asynchronous Complete Secret Sharing (ACSS)</li> <li>Keyset Proposal Broadcast Phase</li> <li>Asynchronous Binary Agreement (ABA)</li> <li>Key Derivation Phase</li> </ol> <p>For more details on each of these ADKG phases, see here.</p>"},{"location":"concepts/aggregatelogin/","title":"Aggregate login","text":"<p>Aggregate Login in Arcana Auth SDK links users with the same email across social logins as one user. Different emails create separate developer accounts.</p> <p>For example, logging in with Google and Twitter using the same email counts as one account, while different emails create separate accounts.</p> <pre><code>graph LR\n  A[[User]] -.-&gt; B(Social Login Provider A) -.-&gt; E{Email ID Same?} ==Yes==&gt; F&gt;User ID 1];\n  E{Email ID Same?} ==No==&gt; G&gt;New unique User ID];\n  A[[User]] -.-&gt; M(Social Login Provider B) -.-&gt; E{Email ID Same?};\n  A[[User]] -.-&gt; C(Passwordless Login) -.-&gt; E{Email ID Same?};</code></pre> <p>Limited Auth Provider Support</p> <p>Aggregate login feature does not work for the following providers:</p> <ul> <li>Cognito</li> <li>Firebase</li> <li>Steam</li> <li>Telegram</li> <li>Twitter</li> </ul>"},{"location":"concepts/an-did-token/","title":"Decentralized Identifier (DID)","text":"<p>Decentralized identifiers (DIDs) let Web3 app users be identified without a central authority.</p> <p>A DID is a unique, privacy-preserving identifier built with blockchain technology, cryptography, and decentralized networks. It eliminates the need for centralized registries and identity providers, giving users full control.</p> <p>Arcana Auth SDK uses the DID protocol, Ethereum blockchain, and elliptic curve cryptography to create verifiable proofs for user authentication and authorization.</p>"},{"location":"concepts/an-did-token/#did-token-structure","title":"DID Token Structure","text":"<p>The DID token is encoded as a Base64 JSON string tuple representing [proof, claim]:</p> <ul> <li>Proof: A digitally signed string that is used to prove the validity of a given claim.</li> <li>Claim: Data representing the user's access assertion.</li> </ul>"},{"location":"concepts/an-did-token/#userdidtoken","title":"<code>userDIDToken</code>","text":"<p>The Arcana Auth SDK returns <code>userDIDToken</code> once an app user logs in successfully via the configured social login provider by using any of the supported methods of the <code>AuthProvider</code>:</p> <ul> <li>Plug-and-play login <code>connect()</code> </li> <li>Custom login UI methods such as <code>loginWithSocial()</code>, <code>loginWithLink()</code> (deprecated), <code>loginWithOTPStart</code>,<code>loginWithOTPComplete</code> and <code>loginWithBearer()</code></li> </ul> <p>Developers can use <code>getUser()</code> method to access the user's DID token via the <code>UserInfo</code> return value. </p>"},{"location":"concepts/an-did-token/#verify-did-token","title":"Verify DID Token","text":"EVMED25519 <pre><code>import { ethers } from \"ethers\";\n\nconst userInfo = await auth.getUser();\nconst didToken = userInfo.userDIDToken;\nconst data = JSON.parse(window.atob(didToken));\nconst [sig, claims] = data;\nconst parsedClaims = JSON.parse(claims)\n\nconst addr = ethers.verifyMessage(claims, sig);\nif (addr == publicKeyToAddress(parsedClaims.iss)) {\n// Verified\n}\n</code></pre> <pre><code>import { verify } from \"@noble/ed25519\"\n\nconst userInfo = await auth.getUser();\nconst didToken = userInfo.userDIDToken;\nconst data = JSON.parse(window.atob(didToken));\nconst [sig, claims] = data;\nconst parsedClaims = JSON.parse(claims);\n\nconst verified = verify(sig, toHex(claims), b58ToHex(parsedClaims.iss));\n</code></pre>"},{"location":"concepts/an-jwt-token/","title":"Arcana JWT Token","text":"<p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app. This token is generated upon successful authentication via any of the supported methods of the <code>AuthProvider</code>:</p> <ul> <li>Plug-and-play login <code>connect()</code> </li> <li>Custom login UI methods such as <code>loginWithSocial()</code>, <code>loginWithLink()</code> (deprecated), <code>loginWithOTPStart</code>,<code>loginWithOTPComplete</code> and <code>loginWithBearer()</code></li> </ul> <p>After the user selects a social login provider and authenticates with the provider, the Arcana Auth SDK receives the JWT token from the selected provider. The Arcana Auth SDK verifies the user via this token first and then creates and returns a new Arcana JWT token to the app. The app must verify the token returned by the Arcana Auth SDK.</p>"},{"location":"concepts/an-jwt-token/#verify-arcana-jwt-token","title":"Verify Arcana JWT Token","text":"<p>The JWT token returned by the Arcana Auth SDK expires after 3 minutes. </p> <p>It is recommended that the app developer must first verify the token returned by Arcana before generating an app-specific JWT token for further use within the app context.</p> <p>Developers can use <code>getUser()</code> method to access the JWT token returned by the Arcana Auth SDK via the <code>UserInfo</code> return value. </p> <pre><code>/* Make sure\n   1. AuthProvider is created and initialized via .init() call\n   2. User is onboarded via plug and play login UI .connect() call \n      or \n      with custom login UI loginWithSocial, loginWithLink (deprecated), `loginWithOTPStart` and `loginWithOTPComplete`, loginWithBearer calls\n*/\ntry {\n  const userInfo = await auth.getUser();\n  const jwtToken = userInfo.loginToken;\n  console.log(\"Arcana JWT Token: \", jwtToken);\n} catch (e) {\n  console.log(e);\n}\n</code></pre>"},{"location":"concepts/an-jwt-token/#app-specific-jwt-token","title":"App-specific JWT Token","text":"<p>After verification of the JWT token returned by the Arcana Auth SDK, developers must create another app-specific JWT token, if required, and use the subsequent token in the app.</p> <p>For example, if the app developer needs to implement Role Based Access Control (RBAC) and authorize the authenticated user for some specific actions, they can first verify the token returned by Arcana. Upon verification, they can issue a new app-specific JWT that enables RBAC and authorization. </p> <p>Alternately, for RBAC, developers can use Sign-In with Ethereum (SIWE) by signing a standard message format parameterized by scope, session details, and security mechanisms (for example, a nonce).</p> <p>SIWE allows users to log in to applications using their Ethereum wallet and ENS (Ethereum Name Service) profile. </p>"},{"location":"concepts/auth-core-sdk/","title":"Arcana Auth-Core SDK","text":"<p>The Arcana Auth-Core SDK is a client-side tool for developers to assign Web3 keys to authenticated users for signing blockchain transactions. Use this SDK instead of the Arcana Auth SDK for key assignment or when building a completely whitelisted solution.</p> <p>When initializing Arcana Auth-Core SDK, the developer sets the redirect URL. The SDK performs OAuth2 login with the chosen provider and returns the login token from the provider. At the specified redirect URL, the developer uses this token to fetch the user's private key.</p> <p>Limited Feature SDK</p> <p>The Arcana Auth-Core SDK has limited capabilities as compared to the Arcana Auth-Core SDK:</p> <ul> <li>No built-in plug-and-play login UI feature</li> <li>No built-in Arcana wallet UI</li> <li>No support for Global keys, only app-specific keys (default) are allowed.</li> <li>No support for enhanced wallet security via MFA.</li> </ul>"},{"location":"concepts/authsdk/","title":"Arcana Auth SDK","text":"<p>Arcana Auth SDK streamlines user onboarding in Web3 apps with an embedded, non-custodial wallet for secure blockchain transactions.</p> <p>Developers start by registering the app and configuring auth settings through the Arcana Developer Dashboard. Each registered app gets a unique Client ID essential for integrating with the Arcana Auth SDK. </p> <p> </p>"},{"location":"concepts/authsdk/#download","title":"Download","text":"<p>Multiple flavors of the Arcana Auth SDK are available for different types of Web3 apps such as web, mobile and gaming. See Auth SDK installation section for details.</p>"},{"location":"concepts/authsdk/#key-features","title":"Key Features","text":"<p>User Authentication</p> <ul> <li>Customize onboarding with Web2 social login and passwordless access.</li> <li>Choose between built-in, plug-and-play or custom login UI.</li> <li>Secure, self-custodial keys without key management complexities.</li> </ul> <p>Web3 Wallet Operations</p> <ul> <li>Developers can customize the blockchain transaction signing experience for users with Arcana wallet visibility settings.</li> <li>Authenticated users can securely sign transactions for supported Web3 apps and frameworks</li> <li> <p>Supports Web3 wallet operations and standard Ethereum JSON-RPC calls, including:</p> <ul> <li>Configure and switch networks and accounts.</li> <li>Sign blockchain transactions.</li> <li>Send and receive tokens and NFTs.</li> <li>Manage NFTs and preview NFT details using the wallet.</li> </ul> </li> <li> <p>Customize transaction signing with Arcana wallet visibility settings.</p> </li> <li>Supports EVM and non-EVM blockchain networks.</li> <li>Supports Web3 wallet operations and Ethereum JSON-RPC calls, including:<ul> <li>Network and account management.</li> <li>Signing transactions.</li> <li>Sending and receiving tokens and NFTs.</li> <li>Managing and previewing NFTs.</li> </ul> </li> </ul>"},{"location":"concepts/billing/","title":"Usage &amp; Billing","text":"<p>This guide explains the payment model for using social login feature offered by the Arcana Auth SDK in Web3 apps.</p>"},{"location":"concepts/billing/#pricing","title":"Pricing","text":"<p>Testnet usage is free. </p>"},{"location":"concepts/billing/#mainnet","title":"Mainnet","text":"<p>Each developer account enjoys a promotional free usage tier. Beyond this free tier, usage costs apply to all apps registered with Arcana under a developer account and are invoiced together. </p> <p>For more details on the current billing rates and free tier limits contact Arcana support.</p>"},{"location":"concepts/billing/#billing-metrics","title":"Billing Metrics","text":"<p>Arcana Auth SDK monitors app usage with the following metrics:</p> <ul> <li> <p>Aggregate App Usage: This metric tracks the 'Monthly Active Users (MAU)' across all apps registered with Arcana per developer account on the Mainnet. Total MAU data includes free and paid usage.</p> <p> Monthly Active Users (MAU) </p> </li> <li> <p>Per App Usage: This metric monitors the 'Daily Active Users (DAU)' and 'Monthly Active Users (MAU)' for individual apps on the Testnet. Data is also available for Mainnet usage per app.</p> <p> Monthly Active Users (MAU) </p> </li> </ul> <p>Testnet Usage is Free</p> <p>Billing applies only to Arcana Mainnet usage.</p>"},{"location":"concepts/billing/#billing-setup","title":"Billing Setup","text":"<p>Using the Arcana Developer Dashboard, developers can configure their Arcana account by providing essential information. Billing requires the following details:</p> <ul> <li>Organization</li> <li>Billing Address Details</li> <li>Payment Method</li> </ul> <p>Adding Payment Method</p> <p>It is a mandatory requirement to enter and save a valid address in your developer account prior to providing payment method details through the Arcana Developer Dashboard. </p> <p>Once generated, developers can access their billing history and view the current outstanding invoice.</p> <p>Testnet and Free Tier (Mainnet) Usage</p> <p>Payment setup isn't needed for Testnet usage or for using the Mainnet's free tier. Web3 apps can integrate with Arcana Auth SDK for Testnet without it. However, after exhausting the free tier, setting up payment is essential for uninterrupted user onboarding on Arcana Mainnet.</p>"},{"location":"concepts/billing/#billing-cycle","title":"Billing Cycle","text":"<p>Arcana Mainnet usage beyond the free tier is billed monthly. Invoices are generated on the last day of each month, summarizing the collective app usage and charges for all apps under a developer account. Access invoice and usage specifics through Arcana Developer Dashboard by clicking on the user icon on the top right and selecting Invoices.</p> View Invoices"},{"location":"concepts/billing/#outstanding-dues","title":"Outstanding Dues","text":"<p>Outstanding dues must be paid in full; partial payments are not accepted.</p> <p>Invoices factor in all promotional and free-tier MAU usage across registered apps for a developer account. Payment is due upon monthly invoice generation, with a notification sent to the developer. Payment is automatically deducted via the configured method. If payment fails, there's a 21-day grace period, with retry attempts every 7 days. During this period, registered apps function normally. After the grace period, if payment remains unsuccessful, the developer account is suspended, barring user access to registered apps.</p> <p>Inactivity and non-payment for 3 months may result in app deletion and account termination.</p>"},{"location":"concepts/billing/#billing-notifications","title":"Billing Notifications","text":"<p>For billing notifications, refer to the bell icon on the top right of the Arcana Developer Dashboard screen.</p> Billing Notifications <p>The following billing notifications are displayed:</p> Event Notification Notes Billing Add card details for processing the payment. The first time a developer logins, this message is displayed in the notifications section. Billing Invoice for the current month has been generated. Once the free-tier is over, at the end of every billing cycle, the dues are computed and an invoice is created. Developer is notified of the same. Billing Payment successfully processed for this month. Once the free-tier is over, monthly invoices are raised and payment automatically deducted from the specified payment method. Billing Payment has been declined. This notification will be displayed if the specified payment method fails when the invoice dues are processed, or if there are any payment errors due to insufficient funds."},{"location":"concepts/config-profiles/","title":"Configuration Profiles","text":"<p>A configuration profile stores the Arcana Auth SDK usage settings for social login and wallet experience. Each registered app has two profiles:</p> <ul> <li>Testnet</li> <li>Mainnet</li> </ul> <p>Use Arcana Auth SDK to view and update these profiles. By default, new apps use a Testnet profile. To create a Mainnet profile, you can either:</p> <ul> <li>Copy the Testnet profile</li> <li>Create a new Mainnet profile</li> </ul> <p>Each app gets one unique Client ID per profile, one for Testnet and one for Mainnet.</p> <p>When integrating a Web3 app with Arcana Auth SDK, specify the Testnet Client ID or Mainnet Client ID based on deployment. Note that wallet addresses will change when switching between Testnet and Mainnet profiles.</p>"},{"location":"concepts/custom-login-ui/","title":"Custom Login UI","text":"<p>Apps using the Arcana Auth SDK can onboard users via one of the two options:</p> <ul> <li> <p>Plug-and-play Login UI: A built-in, ready-to-use login UI for plug-and-play authentication.</p> </li> <li> <p>Custom Login UI: Build a custom login UI from scratch.</p> </li> </ul> <p>This decision is made at the time of SDK integration. This choice is not governed by any settings made via the Arcana Developer Dashboard.</p> <p>After installing and integrating with the Arcana Auth SDK, create the <code>AuthProvider</code>, use <code>init</code> function to initialize the provider, create the necessary user interface hooks and call the <code>loginWithSocial</code> function with the desired social login provider to onboard users. For email-based onboarding, utilize the <code>loginWithOTP</code>(deprecated), <code>loginWithOTPStart</code> and <code>loginWithOTPComplete</code> functions, which sends users a verification link on the specified user email.</p> <p>Here is an example of how to onboard users via 'Google' as the social login provider and a custom login UI. See Auth SDK Reference for more details.</p>"},{"location":"concepts/custom-wallet-ui/","title":"Custom Wallet UI","text":"<p>Developers have two options to enable the embedded, non-custodial Arcana Web3 wallet functionality within the app's context:</p> <ul> <li> <p>You can use the built-in, ready-to-use Arcana wallet UI (default)</p> </li> <li> <p>Alternatively, you have the choice to create a custom wallet user interface</p> </li> </ul> <p>You must decide to implement the custom wallet UI before installing and integrating with the Arcana Auth SDK. At the time of registering the app through Arcana Developer Dashboard, enter the app name, default chain and then select Wallet UI Mode value as <code>Custom UI</code> instead of the <code>Arcana UI</code>. In this case, the onus of creating user interface for signing blockchain transaction, displaying the user's account information, Web3 assets such as tokens, NFTs, etc., lies with the developer.</p> <p>One time setting</p> <p>Custom Wallet UI option is selected at the time of registering the app and cannot be reverted later. </p> <p>See how to enable custom wallet UI during app registration before integrating with the Arcana Auth SDK.</p>"},{"location":"concepts/dashboard/","title":"Arcana Developer Dashboard","text":"<p>The Arcana Developer Dashboard can be accessed at: https://dashboard.arcana.network</p> <p>It lets Web3 developers register apps with Arcana and set SDK preferences. The dashboard manages app settings and usage through the Gateway node. It provides insights on Arcana protocol usage, including monthly and daily active users (MAU) per app. Learn more...</p> Developer Dashboard <p>Register, Configure then Integrate!</p> <p>Before integrating any application with the Arcana Auth SDK, it must be registered and configured for user onboarding through the Arcana Developer Dashboard.</p>"},{"location":"concepts/gateway-node/","title":"Gateway Node","text":"<p>The gateway node is a vital part of the Arcana protocol. The Arcana Developer Dashboard interacts with the gateway for registering the apps and managing app configuration data, app usage data, and developer account billing, payment details.</p>"},{"location":"concepts/jwt-token-validation/","title":"Verify Arcana JWT Token","text":"<p>Apps integrating with the Arcana Auth SDK receive a unique JWT token. This token is generated upon successful user authentication via these <code>AuthProvider</code> methods:</p> <ul> <li>Plug-and-play login UI: <code>connect()</code> </li> <li>Custom login UI: <code>loginWithSocial()</code>, <code>loginWithLink()</code>(deprecated), <code>loginWithOTPStart</code>, <code>loginWithOTPComplete</code>, and <code>loginWithBearer()</code></li> </ul> <p>The Arcana JWT token is generated with an asymmetric key. What this means is that after a successful user login, the app developers must use the public key in order to verify the received token. </p> <p>Use the appropriate public key listed below to verify the token depending upon whether the app is deployed on the Arcana  Testnet or Mainnet.</p>"},{"location":"concepts/jwt-token-validation/#token-verification-dev","title":"Token Verification: Dev","text":"<pre><code>-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAES2oy0bmXvYh1dIVU017/WW17Wdet\nClx9+8HxPvGHegrBaoZadbeKhfBSfQbxBcdzpDe+3EqUVwvwH3hMIoqa3A==\n-----END PUBLIC KEY-----\n</code></pre>"},{"location":"concepts/jwt-token-validation/#token-verification-testnet","title":"Token Verification: Testnet","text":"<pre><code>-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAETjlG1BIL2x0LwJH5iIxXXfJaokUb\n5EyhK8/TCwlQbVPFy6N40kD4Bnbs4JRJOEssp5/YSgUnrR8JrB0QgC+NpA==\n-----END PUBLIC KEY-----\n</code></pre>"},{"location":"concepts/jwt-token-validation/#token-verification-mainnet","title":"Token Verification: Mainnet","text":"<pre><code>-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE0UWoYfR6ii+6PTfWPDtY8jKLJtL1\n8+Nu+qDkaMjFXVlWg6oVpHdBMBvsmia2aQsrjKrYHdmMz5bntsEAu+7QdA==\n-----END PUBLIC KEY-----\n</code></pre>"},{"location":"concepts/keyspace-types/","title":"Keyspace Types","text":"<p>Arcana Auth SDK supports the following key types:</p> App-specific KeysGlobal Keys <p>App-specific keys are unique to each Web3 app using the Arcana Auth SDK. If a user logs into two different apps with the SDK, they'll have a unique wallet address in each app.</p> <p>In Web2, users often reuse passwords. Similarly, Web3 apps using Arcana Auth SDK can enable the same global wallet address across apps with the global keys option.</p> <p>While global keys streamline user experience, they pose a security risk. If one app is breached, a malicious actor could access the user\u2019s digital assets across all apps using the same global keys.</p> <pre><code>flowchart LR \n    subgraph D [ ]\n        A1(((Developer))) \n    end\n    subgraph KT [Keyspace Configuration]\n    direction LR\n        A1--&gt; B1(Dashboard Login) --&gt; C1[App A Settings] -- Configure Keyspace --&gt; D1[Global Keys]\n        B1 --&gt;C2[App B Settings] -- Configure Keyspace --&gt; D2[App-Specific Keys]\n        B1 --&gt;Cz[App Z Settings] -- Configure Keyspace --&gt; Dz[Global Keys]\n    end\n\nclassDef an-highlight stroke:#3169b3,stroke-width:0.25rem; \nclass D1,Dz an-highlight</code></pre> <pre><code>flowchart LR \n    subgraph U [ ]\n        A3(((User 1)))\n    end\n    subgraph ULZ [User 1 Logs in - App Z]\n        direction LR\n        A3 --&gt; BZ(App Z Login) -- Authenticated --&gt; CZ(Arcana Wallet in App Z) --&gt; DZ[Wallet Address UA1]\n    end\n    subgraph ULB [User 1 Logs in - App B]\n    direction LR\n        A3 --&gt; B33(App B Login) -- Authenticated --&gt; C33(Arcana Wallet in App B) --&gt; D33[Wallet Address UB1]\n    end\n    subgraph ULA [User 1 Logs in - App A]\n    direction LR\n        A3 --&gt; B3(App A Login) -- Authenticated --&gt; C3(Arcana Wallet in App A) --&gt; D3[Wallet Address UA1]\n    end\n\nclassDef an-highlight stroke:#3169b3,stroke-width:0.25rem;\nclass D3,DZ an-highlight</code></pre>"},{"location":"concepts/keyspace-types/#enabling-global-keys","title":"Enabling Global Keys","text":"<p>By default, apps use app-specific keys. Developers can switch to global keys via the Arcana Developer Dashboard. To enable global keys, they must request activation through an online form. Activation may take a few hours for verification. Meanwhile, developers can continue using app-specific keys.</p>"},{"location":"concepts/keyspace-types/#ux-with-global-keys","title":"UX with Global Keys","text":"<p>Switching to global keys in the Arcana Auth SDK changes the user experience with Arcana wallet.</p> <ul> <li> <p>If users previously had app-specific keys, they\u2019ll see a new wallet address with global keys.</p> </li> <li> <p>Blockchain transaction signing will also change. With app-specific keys, a personal sign message pops up within the same app. With global keys, it opens in a new browser tab where users can sign and then close the tab.</p> </li> </ul> Wallet behavior (No clickjacking fix) Wallet behavior (With clickjacking fix)"},{"location":"concepts/keyspace-types/#switching-keyspace","title":"Switching Keyspace","text":"<p>Apps use app-specific keys by default. Developers can switch to global keys using the Arcana Developer Dashboard based on privacy, security, or usability needs.</p> <p>Note that Switching keyspace will change the user\u2019s wallet address.</p>"},{"location":"concepts/keyspace-types/#global-keys-limitations","title":"Global Keys Limitations","text":"<ul> <li> <p>Apps that are configured to use the custom wallet UI option instead of using the default, built-in, Arcana Auth SDK UI cannot use global keys.</p> </li> <li> <p>Apps that are configured to use Custom Auth feature cannot use global keys.</p> </li> </ul> <p>The reason for these restriction is to reduce a potential security vulnerability. </p>"},{"location":"concepts/keyspace-types/#security","title":"Security","text":"<p>Arcana follows a strict validation process for enabling global keys. However, using global keys may introduce security risks.</p> <p>While global keys offer convenience by providing a consistent wallet address across apps, they also create a vulnerability. If one app turns malicious, the user's key could be exposed across all apps using global keys, leading to unauthorized access.</p>"},{"location":"concepts/mfa/","title":"Multi-Factor Authentication","text":"<p>Arcana Auth SDK enhances wallet security with multi-factor authentication (MFA).</p> <p>MFA adds an extra verification step when accessing the wallet from a new browser or device. It stores a local share of the private key on the user's device. If lost, users can recover it using security questions or a recovery pin during login from a new device or browser. Once recovered, this information is not needed again for the same device or browser.</p> <p>MFA improves security by requiring more than just an email or social identifier. Even if an attacker gains access, they cannot bypass MFA without the security questions or recovery pin. Additionally, MFA protects user keys even if the ADKG subsystem is compromised.</p>"},{"location":"concepts/mfa/#enabling-mfa","title":"Enabling MFA","text":"<p>The MFA feature requires no SDK usage configuration from the developer. Users can choose to enable MFA for the Arcana wallet at the first login or later by entering security questions and a recovery PIN.</p> MFA: Under the Hood"},{"location":"concepts/mfa/#security-questions","title":"Security Questions","text":"<p>Users can select any 5 security questions from the provided options or create custom questions. These questions and answers together serve as a seed to generate a share of the user's private key.</p>"},{"location":"concepts/mfa/#recovery-pin","title":"Recovery Pin","text":"<p>Users must also create a 6-digit alphanumeric PIN. This PIN encrypts and stores one of the multiple verification factors used by MFA. It serves as a backup, stored securely with Arcana, in case the user changes devices or loses the locally stored encrypted component in their browser's cache.</p> <p>Cannot Disable MFA</p> <p>MFA, once enabled, cannot be disabled to ensure maximum security.</p>"},{"location":"concepts/mfa/#user-experience-with-mfa","title":"User Experience with MFA","text":"<p>Without MFA, users experience no change when logging into a Web3 app from different devices or browsers using Arcana Auth SDK. They can log in and access the Arcana wallet as usual. However, if their social provider account is compromised, their access to the wallet and keys is at risk.</p> <p>With MFA enabled, users face a different login process only when they use a new device or browser. They must either answer three security questions or enter a security PIN when logging into the Web3 app to access the Arcana wallet.</p>"},{"location":"concepts/non-evm-chains/","title":"Non-EVM Chains","text":"<p>Arcana Auth SDK supports EVM-compatible and non-EVM chains. Pre-configured blockchain networks are available. Users log into Web3 apps and can immediately use the Arcana wallet to sign transactions on the active chain.</p> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p>"},{"location":"concepts/non-evm-chains/#web3-wallet-operations","title":"Web3 Wallet Operations","text":"<p>The Web3 wallet operations and JSON/RPC functions supported by the <code>AuthProvider</code> obtained via the Arcana Auth SDK may vary for non-EVM chains.</p>"},{"location":"concepts/non-evm-chains/#solana","title":"Solana","text":"<ul> <li><code>signMessage</code></li> <li><code>signTransaction</code></li> <li><code>signAllTransactions</code></li> <li><code>signAndSendTransaction</code></li> </ul>"},{"location":"concepts/non-evm-chains/#multiversx","title":"MultiversX","text":"<ul> <li><code>mvx_signMessage</code></li> <li><code>mvx_signTransaction</code></li> <li><code>mvx_signTransactions</code></li> <li><code>getAccounts</code></li> <li><code>getPublicKey</code></li> </ul>"},{"location":"concepts/non-evm-chains/#near","title":"Near","text":"<ul> <li><code>getAccounts</code></li> <li><code>near_signMessage</code></li> <li><code>near_signAndSendTransaction</code></li> </ul> <p>Adding Non-EVM chains</p> <p>When a non-EVM chain is selected for an app, developers and users cannot add other chain types (EVM or different non-EVM chains) in Arcana wallet. This is due to the lack of a uniform standard for wallet addresses across non-EVM chains, which means switching chain types may alter the wallet address.</p>"},{"location":"concepts/non-evm-chains/#keyspace-user-experience","title":"Keyspace User Experience","text":"<p>Developers can customize wallet experiences by selecting the keyspace type in Arcana Developer Dashboard.</p> <p>With app-specific keys, users get unique keys for each app, no matter the chain type.</p> <p>With global keys, users have the same wallet address across apps on EVM-compatible chains.</p> <p>For non-EVM chains, global keys result in different wallet addresses due to different cryptographic algorithms. EVM chains use the secp256k1 curve, Solana uses the ED 25519 curve , and MultiversX uses BLS multi-signatures. Therefore, users will see different wallet addresses if an app uses an EVM chain and another uses a non-EVM chain or different non-EVM chains.</p>"},{"location":"concepts/plug-and-play-auth/","title":"Plug &amp; Play Auth","text":"<p>Plug &amp; Play Auth is the default login UI in Arcana Auth SDK. Web3 apps can use the <code>connect</code> method to show this built-in UI with the configured onboarding options from Arcana Developer Dashboard.  Developers can use this ready-made UI instead of creating a custom login UI.</p> Plug &amp; Play Login UI <pre><code>flowchart LR \n    subgraph A [Plug &amp; Play vs. Custom Login UI]\n    direction LR\n        A1(((Developer))) -- 1.Register App --&gt; B1(Dashboard Login)\n        B1  --&gt; C1[Get Client ID] --&gt; E1[Initialize &lt;code&gt;AuthProvider&lt;/code&gt;]\n        A1 -- 2.Integrate App --&gt; D1[Install Auth SDK] --&gt; E1 --&gt; O[Onboard Users]\n    end\nclassDef an-highlight stroke:#3169b3,stroke-width:0.25rem;\nclass F1 an-highlight</code></pre> <pre><code>flowchart LR\n    subgraph B [Onboard Users]\n    direction LR\n        O[Onboard Users] -- Plug-and-Play Login UI--&gt; F1[&lt;code&gt;connect&lt;/code&gt;]\n        O -- Custom Login UI --&gt; P1{Provider Type} -- Social Providers --&gt; G1[&lt;code&gt;loginWithSocial&lt;/code&gt;]\n        P1 -- IAM Provider Firebase --&gt; H1[&lt;code&gt;loginWithBearer&lt;/code&gt;]\n    end\n\nclassDef an-highlight stroke:#3169b3,stroke-width:0.25rem;\nclass F1 an-highlight</code></pre>"},{"location":"concepts/plug-and-play-auth/#compact-modal","title":"Compact Modal","text":"<p>The built-in plug-and-play login UI includes a compact modal and a normal-sized modal. Choose the compact modal by setting <code>compact: true</code> in <code>connectOptions</code> when instantiating <code>AuthProvider</code>. For more details, see <code>AuthProvider</code> constructor parameters.</p> <pre><code>import { AuthProvider, CHAIN } from '@arcana/auth'\n\ninterface ChainConfig {\n  chainId: CHAIN\n  rpcUrl?: string\n}\n\nconst auth = new AuthProvider(`${clientId}`, {\n  position: 'left',        // default - right\n  theme: 'light',          // default - dark\n  alwaysVisible: false,    // default - true\n  setWindowProvider: true, // default - false\n  connectOptions: {\n    compact: true // default - false\n  },\n  chainConfig: {\n    chainId: CHAIN.POLYGON_MAINNET,\n    rpcUrl: '',\n  },\n})\n\nawait auth.init()\n</code></pre> Plug &amp; Play Login UI Types Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"concepts/private-key/","title":"Private Key","text":"<p>A private key is a secret linked to the user's Arcana wallet. It is generated by the asynchronous distributed key generator (ADKG) component of the protocol used by the Arcana Auth SDK. Only the user can access it.</p> <p>Users can export their private key securely via the Arcana wallet UI. The user is responsible for securing the exported key.</p>"},{"location":"concepts/session_type/","title":"Arcana Session Types","text":"<p>Session management settings allow Web3 app developers to decide if a user session persists after the browser window or tab is closed and reopened. Session cookies control how long an authenticated user session remains active without requiring the user to log in again.</p> <p>Arcana wallet supports two types of sessions:</p> <ul> <li>Persistent</li> <li>Non-Persistent</li> </ul> <p>Session Cookies</p> <p>In both these cases, the session cookies are immediately invalidated once the user logs out of the app.</p>"},{"location":"concepts/session_type/#persistent-session","title":"Persistent Session","text":"<p>The authenticated session remains valid within a specified time, so users don't need to log in again after closing and reopening the browser. </p> <p>Use the 'Require Log-in After' setting to specify how long a session is persisted once the browser is closed. The 'Require Log-in After' setting does not impact any active user session. The user is not forcefully logged out after the time expires. It is only used to track session persistence in case the user closes the browser without explicitly logging out.</p> <p>Session cookies are used to manage session persistence. After the specified timeout, the cookies are deleted.</p> <p>A persistent session is convenient for app users but carries some risk since it automatically logs the user in when the app is reopened. Ensure the re-login time aligns with the app's security and risk management profile.</p> <p>Not supported for Global Keyspace Setting</p> <p>The persistent session type is enabled only for the default app-specific keyspace setting. For security reasons, it is disabled for apps using global keyspace.</p> <p>Incognito/Private Browser Mode</p> <p>If the session cookies are disabled in incognito or private browsing mode, then there is no user session persistence when the browser is closed. The behavior is the same as the non-persistent mode.</p>"},{"location":"concepts/session_type/#non-persistent-session","title":"Non-Persistent Session","text":"<p>If the browser is closed, the authenticated session is invalidated immediately. Users must log in again to continue using the app. By default, a newly registered app is configured to use a non-persistent session type. </p>"},{"location":"concepts/social-login/","title":"Social Login","text":"<p>Social Login allows users to sign in using popular Web2 identity providers like Google and Twitter or through passwordless authentication.</p> <p>Web3 apps require private keys to operate wallets, but managing them can be complex for new users, often leading to drop-offs during onboarding.</p> <p>By removing the need to set up and manage private keys, social login simplifies Web3 onboarding. The familiar Web2-style login makes the process seamless for new users.</p>"},{"location":"concepts/social-login/#non-custodial-social-login","title":"Non-Custodial Social Login","text":"<p>Arcana Auth SDK offers social login without compromising privacy.</p> <p>Many Web3 authentication providers offer social login, but most rely on custodial wallets, meaning a third party can access users' keys and funds, compromising privacy and control.</p> <p>Arcana Auth SDK's social login provides a non-custodial, in-app wallet. It combines the ease of social login with full user privacy, security, and key ownership.</p>"},{"location":"concepts/social-login/#enabling-social-login","title":"Enabling Social Login","text":"<p>The Arcana Auth SDK supports user onboarding via email, social login providers, third-party IAM providers and custom authentication as well.</p> Compare Wallet Types &amp; Capabilities"},{"location":"concepts/usage-metrics/","title":"Application Usage Metrics","text":"<p>Arcana Developer Dashboard displays the aggregate value of Monthly Active Users (MAU) for the Arcana Mainnet. The aggregate value includes MAU for all the applications that are registered against a developer's Arcana account.</p> <p>The aggregate usage metrics are displayed in the Manage Apps Screen. The per-application metrics are displayed on the Application Dashboard screen.</p> <p>Manage Apps Screen: </p> <ul> <li>Aggregate Monthly Active Users (Mainnet)</li> <li>Number of free MAU (Mainnet)</li> <li>Number of paid MAU (Mainnet)</li> </ul> Per App Usage Metrics <p>Application Dashboard: </p> <ul> <li>Testnet: Daily MAU, Monthly MAU</li> <li>Mainnet: Daily MAU, Monthly MAU</li> </ul> Testnet/Mainnet Usage Metrics <p>Mainnet Usage</p> <p>The number of logged-in users is tracked separately for the 'Testnet' and 'Mainnet' application profiles. Arcana Testnet usage is not billed.</p>"},{"location":"concepts/validator-nodes/","title":"Validator Nodes","text":"<p>Validator nodes play a crucial role in ensuring the decentralization of the Arcana blockchain protocol components used in securely generating user's private key for signing blockchain transactions. These partner infrastructure nodes participate in the distributed key generation process(ADKG), that generates key shares (not the key itself) for users. The private key is only created within the authenticated user's context in the app.</p> <p>At the launch of the Mainnet, some nodes in the DKG subsystem are owned and operated by Arcana, while the remaining nodes are owned and run by trusted partners. In the future, other third parties will be allowed to participate in the key generation protocol.</p> <p>For more information on the latest implementation of asynchronous distributed key generation (ADKG), consult the see Arcana Technical Whitepaper.</p>"},{"location":"concepts/ansmartc/an-smart-contracts/","title":"Smart Contracts","text":"<p>The Arcana Chain Abstraction(CA) and Web3 authentication protocols are implemented through a bunch of smart contracts. These upgradeable contracts enforce protocol rules, ensure user data privacy, security and work with the Arcana Gateway for enabling unified balance and social-login for Web3 authentication and wallet access control.</p>"},{"location":"concepts/ansmartc/an-smart-contracts/#chain-abstraction","title":"Chain Abstraction","text":"<p>The Arcana chain abstraction feature is implemented through components built and deployed in the Cosmos ecosystem. In addition to those, it also implements smart contracts for Vault functionality on all supported chains.</p>"},{"location":"concepts/ansmartc/an-smart-contracts/#web3-authentication","title":"Web3 Authentication","text":"<p>Arcana Auth feature related smart contracts are implemented on the Polygon Network. These define and manage the logic and state of Web3 authentication for app users without storing any user credentials.</p>"},{"location":"concepts/ansmartc/an-smartc-deployed/","title":"Arcana Auth SDK: Deployed Contracts","text":"SummaryContract Details Arcana Auth SDK Contract Type/Category Purpose <code>Arcana.sol</code> [V1 or V2] Beacon Proxy/Core System Main logic contract for Arcana Store operations primarily associated with managing user data privacy and access control. <code>Factory.sol</code> UUPS Proxy/Core System Smart contract generator per app that registers with Arcana <code>ArcanaBeacon.sol</code> UUPS Proxy/Core System Smart contract to manage the per app association between the latest <code>Arcana.sol</code> main logic contract and the app <code>BeaconProxy.sol</code> Beacon Proxy/dApp This is a per app smart contract that stores the data related to the program state. It interacts with <code>ArcanaBeacon.sol</code> smart contract to refer to the latest Arcana Auth SDK authentication core logic contract. <code>Forwarder.sol</code> UUPS Proxy/Core System Manages meta transactions for app users. Forwards Gateway proxy calls (on behalf of the app) to <code>Arcana.sol</code> main logic contract <code>NodeList.sol</code> Core System Keeps track of ADKG nodes and their epochs. <p><code>Arcana.sol</code></p> <p>The <code>Arcana.sol</code> contract is crucial for the Arcana Auth SDK protocol. It handles UI configuration for managing blockchain transaction signing experience. It\u2019s an upgradable beacon proxy and shares metadata with other contracts via pass-through data mechanisms. </p> <p><code>Factory.sol</code></p> <p>When a new app registers with Arcana Auth SDK, the factory contract activates. This singleton UUPS proxy contract generates app-specific <code>BeaconProxy.sol</code> contracts and implements core system logic.</p> <p><code>BeaconProxy.sol</code></p> <p>During registration with Arcana Developer Dashboard, each app gets a BeaconProxy contract. The Arcana Auth SDK Factory.sol deploys it. The BeaconProxy always points to the latest <code>Arcana.sol</code> version, managed by <code>ArcanaBeacon.sol</code>.</p> <p><code>ArcanaBeacon.sol</code></p> <p>The Arcana Beacon contract points to the latest Arcana Auth SDK core logic, whether V1, V2, or Vn. It\u2019s a UUPS proxy upgradable contract, ensuring the Arcana Auth SDK Protocol remains upgradeable.</p> <p><code>Forwarder.sol</code></p> <p>The UUPS proxy upgradable <code>Forwarder.sol</code> manages meta transactions, which are Ethereum transactions containing another transaction. Meta transactions allow external entities like the Arcana Gateway to pay gas fees, thus easing onboarding for new users. The Gateway uses them for Arcana Auth SDK related data and access. <code>Forwarder.sol</code> works with an ERC-2771 compatible contract to forward transactions from the Gateway to the core <code>Arcana.sol</code> contract.</p> <p><code>NodeList.sol</code></p> <p><code>NodeList.sol</code> manages the Arcana Auth SDK protocol functionality related to the asynchronous distributed key generation (ADKG). It tracks public ADKG node information, epoch details, the buffer size for \u2018pre-generated\u2019 keys, and validator node whitelisting.</p>"},{"location":"concepts/ansmartc/an-smartc-deployed/#contract-flows","title":"Contract Flows","text":"<p>The workflows below show how Arcana smart contracts implement the Arcana Auth SDK protocol:</p> <ol> <li>Data access flow</li> <li>New app registration flow</li> </ol> Data AccessNew App Registration <p> </p> <ul> <li> <p>All app user operation-related calls made via the client-side Arcana Auth SDK are intercepted by the Arcana Gateway.</p> </li> <li> <p>The Gateway executes the meta transactions with relevant data and signatures.</p> </li> <li> <p>Forwarder forwards the transaction via the per-app <code>BeaconProxy.sol</code> smart contract. </p> </li> <li> <p>The BeaconProxy requests the current Arcana core system contract, <code>Arcana.sol</code>, from the <code>ArcanaBeacon.sol</code> contract.</p> </li> <li> <p>After receiving the address of the latest Arcana core system contract from the <code>ArcanaBeacon</code> contract,  the BeaconProxy delegates the forwarded call to the Arcana system contract.</p> </li> <li> <p>Arcana contract actually executes the transaction.</p> </li> </ul> <p> </p> <ul> <li>When a new app is registered at the Arcana Developer Dashboard, it interacts with the Arcana Gateway to initialize the program state of the app.</li> <li> <p>The <code>Factory.sol</code> smart contract is invoked to create a new <code>BeaconProxy.sol</code> contract that is solely associated with this newly registered app. Each app has its own BeaconProxy contract deployed.</p> </li> <li> <p>The <code>BeaconProxy.sol</code> contract stores the per-app data related to the program state.</p> </li> <li> <p>The BeaconProxy communicates with the <code>ArcanaBeacon</code> contract to obtain the address of the latest Arcana core system contract. This ensures that each app contract knows and utilizes the latest supported Arcana Auth SDK protocol.</p> </li> </ul>"},{"location":"concepts/ansmartc/an-smartc-types/","title":"Arcana Smart Contract Types","text":"<p>Arcana uses different smart contracts to implement unified balance and social login features through its blockchain protocol. Some contracts are deployed by default, while others activate when apps register. The protocol uses an upgradable proxy contract pattern.</p>"},{"location":"concepts/ansmartc/an-smartc-types/#proxy-contract-patterns","title":"Proxy Contract Patterns","text":"<p>Multiple upgradable proxy contract patterns are available, including diamond proxy, transparent proxy, beacon proxy, and UUPS proxy. </p> <p>Arcana Auth SDK uses the following proxy contract patterns:</p> <ul> <li>UUPS proxy</li> <li>Beacon proxy</li> </ul> Proxy Contract Patterns"},{"location":"concepts/ansmartc/an-smartc-types/#arcana-contract-types","title":"Arcana Contract Types","text":"<p>The smart contracts used to implement the logic for the Arcana Auth SDK fall into two categories:</p> <ol> <li> <p>Core System Contracts: These singleton contracts implement the core Arcana Auth SDK protocol. Not all of them store data (program state).</p> </li> <li> <p>dApp Contracts: Deployed per app after registration with Arcana Developer Dashboard. Only registered apps can integrate with the Arcana Auth SDK. </p> </li> </ol> Arcana Contract Types"},{"location":"concepts/anwallet/","title":"Overview","text":"<p>Arcana wallet is an in-app, non-custodial wallet embedded in Web3 apps that use Arcana Auth SDK. No browser extension is needed. Authenticated users get instant, secure access to the wallet for blockchain transactions. Keys are generated locally via the asynchronous distributed key generation system, ensuring full control over key privacy without complex cryptography.</p>"},{"location":"concepts/anwallet/#wallet-features","title":"Wallet Features","text":"<ul> <li>Check account balance</li> <li>Sign (Approve/Reject) blockchain transactions</li> <li>Speed up transactions</li> <li>Add, modify, switch blockchain networks</li> <li>Deploy smart contracts </li> <li>Manage token assets (native and custom)<ul> <li>Check account balance</li> <li>List token assets</li> <li>Add custom tokens (ERC-20)</li> <li>Send and receive tokens </li> <li>Buy/Sell crypto</li> </ul> </li> <li>Manage NFTs<ul> <li>List NFT assets</li> <li>View NFT details</li> <li>Send NFTs (ERC-721, ERC-1155)</li> <li>Add NFTs</li> <li>Modify (edit, delete) NFT metadata</li> </ul> </li> <li>View account transaction activity (NFT, Token send transactions, contracts deployment, etc.) </li> <li>View pending transactions in the activity tab</li> <li>Use the standard Ethereum 1193 provider interface to call JSON/RPC functions and supported Web3 wallet operations for the network</li> <li>Export private key</li> <li>Enable enhanced security via MFA</li> <li>Logout</li> </ul> <p>Not Supported</p> <p>The Arcana wallet does not allow an app user to import any blockchain account created using a third-party wallet provider. </p>"},{"location":"concepts/anwallet/#wallet-customization","title":"Wallet Customization","text":"<p>Arcana wallet offers great flexibility and customization options as per the app requirements. </p> <ul> <li>UX: Developers can manage the users' blockchain signing experience by customizing branding, theme, wallet positioning in the app, selecting the default active chain, modifying pre-configured networks, and using visibility options.</li> <li>Custom Wallet UI: Replace the built-in, default wallet UI with a custom wallet UI.</li> </ul>"},{"location":"concepts/anwallet/#supported-chains","title":"Supported Chains","text":"<p>Arcana wallet comes pre-configured with a subset of the supported blockchain networks. This pre-configured list can be updated with other supported networks programmatically or via the wallet UI.</p> <p>Learn more...</p>"},{"location":"concepts/anwallet/walletntwkswitchmode/","title":"Network Switching","text":"<p>The Arcana wallet UI shows a subset of supported blockchain networks. Users can switch the active wallet network by clicking the dropdown next to the network icon in the UI. They can also add to the network list or edit the entries.</p> <p>Web3 app developers can programmatically modify the pre-configured network list and set a default network during app setup via Arcana Developer Dashboard. This is done using the <code>wallet_addEthereumChain</code> and <code>wallet_switchEthereumChain</code> JSON/RPC methods supported by the Arcana Auth SDK.</p> <p>The <code>wallet_switchEthereumChain</code> method switches the active chain only after the user approves the network switch transaction.</p> Wallet Chain Edit Persistence <p>The list of networks configured by the developer, either programmatically or via the dashboard, persists across user login sessions. </p> <p>User changes to blockchain networks through the Arcana wallet UI are stored locally and lost when the user logs out.</p> <p>Switching Blockchain Networks</p> <p>Switching chains in the wallet typically doesn\u2019t change the wallet address when switching to another EVM-compatible chain. However, switching to a non-EVM-compatible blockchain supported by Arcana Auth SDK will assign a new set of keys and a different wallet address.</p>"},{"location":"concepts/anwallet/walletstgsigntx/","title":"Transaction Types","text":"<p>Blockchain transactions triggered through Arcana wallet require user review and approval or rejection. Users see a notification message in the app context for review. Depending on the transaction type, the message may be:</p> <ul> <li>Personal Sign</li> <li>Chain Switch</li> <li>Send Transaction</li> <li>Deploy Contract</li> </ul> <p>Each message appears in a minimized notification widget. Users can click the arrow button to expand and review the details.</p>"},{"location":"concepts/anwallet/walletstgsigntx/#personal-sign","title":"Personal Sign","text":"Personal Sign Message"},{"location":"concepts/anwallet/walletstgsigntx/#chain-switch","title":"Chain Switch","text":"Switch Chain Transaction"},{"location":"concepts/anwallet/walletstgsigntx/#send-transaction","title":"Send Transaction","text":"Send Transaction"},{"location":"concepts/anwallet/walletstgsigntx/#deploy-contract","title":"Deploy Contract","text":"Deploy Contract Sign Message"},{"location":"concepts/anwallet/walletuimodes/","title":"UI Modes","text":"<p>The Arcana wallet can be customized by Web3 app developers through the Arcana Developer Dashboard. When registering the app via the dashboard, developers must choose one of the wallet UI modes:</p> <ul> <li>Built-in Arcana wallet UI (default)</li> <li>Custom wallet UI.</li> </ul> <p>To use a custom wallet UI, developers should select the UI mode as 'Custom UI' during app creation on the Arcana Developer Dashboard. This choice is final and cannot be changed later.</p> <p>AuthProvider: <code>appMode</code> and <code>alwaysVisible</code> flags</p> <p>Developers can control the wallet UI mode and when the wallet UI is displayed in the app context through the following customizations:</p> <ol> <li> <p>UI Mode: Choose between the Arcana wallet UI or a custom wallet UI. Set this in the dashboard's Wallet UI Mode when creating and registering a new app. There is also an <code>appMode</code> flag in the <code>AuthProvider</code> which can override this setting in the dashboard. If 'Custom UI' is selected via the dashboard then the <code>appMode</code> flag in <code>AuthProvider</code> is ignored.</p> </li> <li> <p>Always Visible: Decide if the wallet is always visible in the app or only during a blockchain transaction. The <code>alwaysVisible</code> flag can be set to false (default is true) when creating a new <code>AuthProvider</code>. If using the Arcana wallet UI, this flag controls visibility. By default, the UI is always visible as a minimized widget. When set to <code>false</code>, the UI only appears during a blockchain transaction or when the developer calls the <code>showWallet()</code> method of the <code>AuthProvider</code>. The <code>alwaysVisible</code> flag is ignored if a custom UI is selected in the dashboard's Wallet UI Mode.</p> </li> </ol>"},{"location":"concepts/anwallet/walletvisibility/","title":"Wallet Visibility","text":"<p>Web3 app developers can control Arcana wallet visibility by setting the <code>alwaysVisible</code> flag when instantiating the <code>AuthProvider</code> during app integration with the Arcana Auth SDK.</p> <code>alwaysVisible=true</code><code>alwaysVisible=false</code> <p>By default, <code>alwaysVisible</code> is set to <code>true</code> and the wallet is displayed immediately after a user logs into the app that is integrated with the Arcana Auth SDK. As the wallet is always visible in the context of the app, an authenticated user has full access to all the Web3 wallet operations supported by the Arcana wallet.</p> <p> Wallet In-app Visibility: Enabled </p> <p>If <code>alwaysVisible</code> is set to <code>false</code>, then the Arcana wallet UI does not show up on the application window immediately after a user logs in. The Arcana wallet UI is displayed only when a blockchain transaction is triggered that requires the user's approval or if the app issues the <code>showWallet()</code> method.</p> <p> Wallet In-app Visibility: Disabled </p> <p>AuthProvider: <code>appMode</code> and <code>alwaysVisible</code> flags</p> <p>Developers can control the wallet UI mode and when the wallet UI is displayed in the app context through the following customizations:</p> <ol> <li> <p>UI Mode: Choose between the Arcana wallet UI or a custom wallet UI. Set this in the dashboard's Wallet UI Mode when creating and registering a new app. There is also an <code>appMode</code> flag in the <code>AuthProvider</code> which can override this setting in the dashboard. If 'Custom UI' is selected via the dashboard then the <code>appMode</code> flag in <code>AuthProvider</code> is ignored.</p> </li> <li> <p>Always Visible: Decide if the wallet is always visible in the app or only during a blockchain transaction. The <code>alwaysVisible</code> flag can be set to false (default is true) when creating a new <code>AuthProvider</code>. If using the Arcana wallet UI, this flag controls visibility. By default, the UI is always visible as a minimized widget. When set to <code>false</code>, the UI only appears during a blockchain transaction or when the developer calls the <code>showWallet()</code> method of the <code>AuthProvider</code>. The <code>alwaysVisible</code> flag is ignored if a custom UI is selected in the dashboard's Wallet UI Mode.</p> </li> </ol>"},{"location":"concepts/authtype/","title":"Web3 Onboarding","text":"<p>In Web3, decentralized systems use trustless protocols and cryptography for identity verification, which involves complex key management. This makes onboarding to Web3 apps harder for users as they require private keys for signing transactions. Managing these keys is challenging, with no central recovery if lost, unlike Web2's password recovery.</p> <p>The Arcana Auth SDK simplifies Web3 onboarding by enabling secure Web3 access and blockchain transaction signing. Users can log into apps using familiar Web2 methods and have self-custody of their cryptographic keys.</p>"},{"location":"concepts/authtype/#authentication-options","title":"Authentication Options","text":"<p>Web3 apps using the Arcana Auth SDK can authenticate users via any of these options:</p> <ul> <li>Social Login Providers</li> <li>Custom Auth</li> <li>Passkey Auth</li> </ul> <p>User Key Security &amp; Privacy</p> <p>The Arcana Auth SDK uses the asynchronous distributed key generation (ADKG) to securely assign key shares to authenticated users. The user's private key is generated from these key shares on the client side. For added security, users can enable multi-factor authentication (MFA).</p>"},{"location":"concepts/authtype/auth-passkeys/","title":"Passkey Auth","text":"<p>Passkey is a digital credential that binds a user account with a website or application.</p> <p>Passkeys use public key cryptography that reduces the threat from potential data breaches. They are safer than passwords as they reduce the attack surface. Since passkeys are uniquely generated for every account by the user device and work only on the registered websites and apps, they are less vulnerable to phishing.</p> <p>The Passkeys Auth feature in the Arcana Auth SDK lets Web3 apps to onboard users through a biometrics sensor (such as a fingerprint or facial recognition), a PIN, or a pattern supported by the OS or device where the app is running.</p> <pre><code>graph LR\n  A[[User]]--Create Passkey--&gt; D(Public/Private Key)--Store--&gt;C&gt;Browser/User Device];\n\nclassDef an-highlight stroke:#3169b3,stroke-width:0.25rem; \nclass C,D an-highlight</code></pre>"},{"location":"concepts/authtype/auth-passkeys/#security-privacy","title":"Security &amp; Privacy","text":"<p>Passkeys are based on FIDO standards, they work on Android, Chrome, Microsoft Windows, Microsoft Edge, MacOS, iOS and Safari.</p> <p>Note that when logging in to an app via a passkey, there is no biometrics information or any sensitive information that is shared with the associated website for authentication. Also, passkeys by themselves do not allow tracking of users or devices across sites. Passkeys use public key cryptography. A public\u2013private key pair is generated when a user creates a passkey for a site or application. This is generated on the user's device. Only the public key is stored by the site. Device based passkey managers protect passkeys from unauthorized access and use. </p> <p>Passkeys do not expire but they can be unlinked/deleted and new ones linked/created, if required.</p>"},{"location":"concepts/authtype/auth-passkeys/#how-do-passkeys-work","title":"How do Passkeys Work?","text":"<p>Passkeys are intended to be used through operating system infrastructure that allows passkey managers to create, backup, and make passkeys available to the applications running on that operating system.</p> <p>Each passkey is linked or bound to the app or website.</p> <p>Users aren't restricted to using the passkey only on the device where they're available. The passkey available on phones can be used when logging into a laptop, even if the passkey isn't synchronized to the laptop, as long as the phone is near the laptop and the user approves the sign-in on the phone.</p> <pre><code>graph LR\n    L[[User on Device A]]--1.Choose Login with Passkeys Option--&gt;M[App/Website]\n    M --2.Passkey Challenge--&gt;L\n    L --3.Challenge Response--&gt; M\n    M -.-&gt; V{Challenge Match}==Yes==&gt;M--4.User Authenticated--&gt;L</code></pre>"},{"location":"concepts/authtype/auth-passkeys/#passkey-usage-options","title":"Passkey Usage Options","text":"<p>Apps can enable passkey authentication for onboarding in two ways:</p> <ul> <li>Use passkeys for sign-up &amp; login</li> <li>Offer passkeys as an alternate login method</li> </ul>"},{"location":"concepts/authtype/auth-passkeys/#sign-up-login","title":"Sign-up &amp; Login","text":"<p>Apps that support only passkey auth can go all-in on this option. Users can sign up, create an account, and set up passkey login all in one go\u2014no need for any other login method.</p> <pre><code>graph LR\n\n  U[[User on Device/Browser]] --1a.App Sign-up/Register Passkey--&gt; K&gt;App/Website];\n  U --1b.Create Passkey--&gt; PK(Public/Private Key)--&gt;U;\n  U --Store Public Key--&gt; K\n  U --2.Login with Passkey--&gt; K --&gt; L((User Authenticated));\n\n  classDef an-highlight stroke:#3169b3,stroke-width:0.25rem; \n  class L an-highlight</code></pre> <p>For subsequent app logins, the browser or operating system will prompt the user to select and use one of the passkeys linked with the app. To validate and ensure that the rightful owner uses a passkey, the operating system may ask users to unlock their device before supplying the passkey for authentication.</p>"},{"location":"concepts/authtype/auth-passkeys/#alternate-login","title":"Alternate Login","text":"<p>Apps with multiple onboarding options only let users log in with passkeys after they\u2019ve first used another login method and set up passkeys for future use.</p> <p>Users need to sign up and log in using a different method before they can enable passkeys for future logins. Keep in mind, passkeys can\u2019t be used for the initial sign-up.</p> <pre><code>graph LR\n\n  U[[User on Device/Browser]]--1.App Login (non-passkey)--&gt;K&gt;App/Website];\n  U--2.Create/Link Passkey--&gt;PK(Public/Private Key)--&gt;U;\n  U--Store Public Key--&gt;K\n  U--3.Login with Passkey--&gt;K--&gt;L((User Authenticated));\n\n  classDef an-highlight stroke:#3169b3,stroke-width:0.25rem; \n  class L an-highlight</code></pre> <p>After setting up passkey for an account, on the subsequent log in attempt to the website or app, passkeys can be used. When signing in via passkeys, the browser or operating system will prompt the user to select one of the passkey associated with the app or website. To validate and ensure that the rightful owner uses a passkey, the operating system may ask users to unlock their device before supplying the passkeys list to choose from.</p>"},{"location":"concepts/authtype/auth-passkeys/#passkey-configuration","title":"Passkey Configuration","text":"<ol> <li> <p>Log in to the Arcana Developer Dashboard and register the app to get a unique  Client ID. Then configure domain setting in the dashboard.</p> <p><pre><code>graph TD\n    DFLA{{ Developer }} --Login --&gt; setup\n\n    subgraph setup[Arcana Developer Dashboard]\n    direction LR  \n        SP1[1.Register App] --&gt; CLID((Unique ClientID))\n        SP2[2.Configure App] --&gt; SP3[Edit/Save Passkey Usage Settings]\n    end\n    classDef an-highlight stroke:#3169b3,stroke-width:0.25rem; \n    class CLID an-highlight\n</code></pre> 2. Install Arcana Auth SDK, integrate it with your app, and initialize <code>AuthProvide</code>r. Choose the passkey onboarding option that fits your needs: use <code>registerWithPasskey()</code> for sign-up with passkey option or <code>linkPasskey()</code> for using passkey as an alternate login. Then, log in users with   <code>loginWithPasskeys()</code>.</p> <pre><code>graph TD\n    DFLA{{ Developer }} --1.Install --&gt; authsdk\n    DFLA --2.ClientID --&gt;AUTHP\n    DFLA --3.Select Sign-up/Alternate Login Passkey Onboarding --&gt;POP --&gt;COA\n    subgraph app[App]\n        AUTHP[Create/Init AuthProvider] --&gt; authsdk\n        COA[B. Call loginWithPasskeys] --&gt; authsdk\n        POP[A. Call registerWithPasskey/linkPasskey]\n        subgraph authsdk[Arcana Auth SDK]\n        direction TB \n            SDK1[AuthProvider Interface] \n        end\n    end\n    linkStyle 1,2 stroke: #3169b3;\n    authsdk --Process Passkeys Login --&gt; STD[Standard Passkey Validation via OS/Browser]\n    authsdk --Fetch Key Shares --&gt; BEP[Arcana Auth Protocol] &lt;--&gt; BEK[DKG]</code></pre> </li> <li> <p>The Arcana Auth SDK uses the application details from the dashboard settings and <code>loginWithPasskeys</code> input data for Passkeys login processing. After verification, it gets the user's key shares from the Arcana backend and generates a user specific key locally in the app. This key lets users securely sign blockchain transactions.</p> <pre><code>graph LR\n    BED[Arcana Developer Dashboard] --Passkey Usage Settings--&gt; BEC{Gateway} \n    BEC &lt;--&gt; BEA[Arcana Auth Protocol] &lt;--&gt; BEDKG[DKG]</code></pre> </li> </ol>"},{"location":"concepts/authtype/auth-passkeys/#domain","title":"Domain","text":"<p>To enable passkey login for an app, as part of configuration settings, the developer must use the Arcana Auth SDK and specify the Domain of the relying party. The domain is typically a CNAME or vanity URL.</p> <p>Relying Party</p> <p>The relying party is the website or Web3 app that allows user to create passkeys or authenticate with passkeys.</p> <p>When a user enrolls a passkey, it associates with the relying party domain. If the domain name changes at any time, all of the passkeys associated with the old domain become invalid.</p>"},{"location":"concepts/authtype/custom-auth/","title":"Custom Auth","text":"<p>The custom Auth feature enables Web3 apps to use the Arcana Auth SDK for secure key assignment. Authenticate users with a Custom Auth service, issue JWT tokens, and send them to the SDK. The SDK verifies users, retrieves key shares, and generates the private key for blockchain transactions on the client side.</p> <p>Global Key Apps not supported!</p> <p>Custom Auth feature is supported only if the app is configured for app-specific key type. </p>"},{"location":"concepts/authtype/custom-auth/#authentication-flow","title":"Authentication Flow","text":"<ol> <li> <p>Log in to the Arcana Developer Dashboard and register the app to get a unique  Client ID. Then configure Custom Auth settings in the dashboard.</p> <pre><code>graph TD\n    DFLA{{ Developer }} --Login --&gt; setup\n\n    subgraph setup[Arcana Developer Dashboard]\n    direction LR  \n        SP1[1.Register App] --&gt; CLID((Unique ClientID))\n        SP2[2.Configure App] --&gt; SP3[Edit/Save Custom Auth Settings]\n    end\n    classDef an-highlight stroke:#3169b3,stroke-width:0.25rem; \n    class CLID an-highlight\n</code></pre> </li> <li> <p>Add code in the app for using a Custom Auth service and obtains a JWT after user authentication.</p> <pre><code>graph LR\n    IAP{{ Developer }}\n    MMM(Custom Authentication Service)\n    subgraph app[App]\n    direction LR\n    CL[Custom Login]\n    end\n    IAP --&gt; CL --&gt;  MMM ---&gt;|JWT Token| CL\n\n    linkStyle 2 stroke: #3169b3;</code></pre> </li> <li> <p>Next, install Arcana Auth SDK, integrate app with the SDK, initialize <code>AuthProvider</code> and then use the JWT obtained after the Custom Auth processing to call the <code>loginWithCustomProvider()</code> method.</p> <pre><code>graph TD\n    DFLA{{ Developer }} --install --&gt; authsdk\n    DFLA --ClientID --&gt;AUTHP\n    DFLA --JWT Token --&gt;COA\n    subgraph app[App]\n        AUTHP[Create/Init AuthProvider] --&gt; authsdk\n        COA[Call loginWithCustomOAuth] --&gt; authsdk\n        subgraph authsdk[Arcana Auth SDK]\n        direction TB \n            SDK1[AuthProvider Interface] \n        end\n    end\n    linkStyle 1,2 stroke: #3169b3;\n    authsdk --Verify JWT Claims --&gt; STD[Standard JWT/JWK Validation]\n    authsdk --Fetch Key Shares --&gt; BEP[Arcana Auth Protocol] &lt;--&gt; BEK[DKG]</code></pre> </li> <li> <p>The Arcana Auth SDK checks the JWT using dashboard settings. After verification, it gets the user's key shares from the Arcana backend and generates the key locally in the app. This key lets users securely sign blockchain transactions.</p> <pre><code>graph LR\n    BED[Arcana Auth Protocol] --Custom Auth Settings--&gt; BEC{Gateway} \n    BEC &lt;--&gt; BEA[Arcana Auth Protocol] &lt;--&gt; BEDKG[DKG]</code></pre> </li> </ol>"},{"location":"concepts/authtype/custom-auth/#custom-auth-settings","title":"Custom Auth Settings","text":"<p>The following Custom Auth settings can be specified via the Arcana Developer Dashboard. </p>"},{"location":"concepts/authtype/custom-auth/#jwks-endpoint","title":"JWKS Endpoint","text":"<p>A JWKS Endpoint is a read-only URL exposed by the Custom Auth server or any other server that manages the cryptographic keys or JSON Web Keys (JWK) as per the IETF RFC7517 and IETF RFC7519 standards. JWKs are used to validate the integrity of a JWT and the encoded data by the Arcana Auth SDK.</p>"},{"location":"concepts/authtype/custom-auth/#user-identifier-string","title":"User Identifier String","text":"<p>The 'User Identifier String' links a unique identifier with the user's key. Developers can choose the string from one of the options:</p> <ul> <li>Sub: The user identifier string identifies the principal that is the subject of the JWT.</li> <li>Email: JWT Token claim email identifier for the user</li> <li>Custom: A custom string used for JWT Token claim.</li> </ul>"},{"location":"concepts/authtype/custom-auth/#issuer","title":"Issuer","text":"<p>The issuer claim identifies the principal that issued the JWT.  For example, it could be the app identifier or deployed app URL. </p> <p>Example: <code>Issuer: \"https://myapp.example.com\"</code></p>"},{"location":"concepts/authtype/custom-auth/#audience","title":"Audience","text":"<p>The audience claim identifies the recipients that the JWT is intended for.</p> <p>Example: <code>Audience: \"arcana-login-nnnnnn\"</code></p>"},{"location":"concepts/authtype/custom-auth/#jwk-validation-optional","title":"JWK Validation (Optional)","text":"<p>Claims are pieces of information asserted about a subject or user. A JWT can contain a claim called name that asserts that the name of the user authenticating is \"John Doe.\" JWT Validation entities specified by the developer via the  Arcana Developer Dashboard are key, value pairs. These are used to validate the JWT provided by the developer to the Arcana Auth SDK via the <code>loginWithCustomProvider()</code> method for authenticated users.</p> <p>Examples</p> <p><code>purpose: 'login'</code></p> <p><code>keyUse: 'arcana'</code></p>"},{"location":"concepts/authtype/socialauth/","title":"Authentication Providers","text":"<p>Apps integrating with the Arcana Auth SDK can use the built-in plug-and-play login UI or a custom login UI to onboard users through any of the supported authentication providers:</p> <ul> <li>Social Providers</li> <li>Custom IAM Providers</li> </ul>"},{"location":"concepts/authtype/socialauth/#social-providers","title":"Social Providers","text":"<p>The Arcana Auth SDK supports popular Web2 social login providers for onboarding users and verifying their identities.</p> <ul> <li>Apple</li> <li>Cognito</li> <li>Discord</li> <li>Firebase</li> <li>GitHub</li> <li>Google</li> <li>Steam</li> <li>Telegram</li> <li>Twitch</li> <li>Twitter</li> </ul>"},{"location":"concepts/authtype/socialauth/#custom-iam-providers","title":"Custom IAM Providers","text":"<p>The following IAM providers are supported for user authentication:</p> <ul> <li>Cognito</li> <li>Firebase</li> </ul> <p>These third-party IAM providers may require separate configuration of the underlying user authentication mechanisms such as social logins, OpenID, etc.</p> <p>Passwordless Login</p> <p>Besides these providers, users can log into a Web3 app in a passwordless manner by verifying the OTP received over email. Passwordless login is enabled by default in all apps using the Arcana Auth SDK.</p>"},{"location":"concepts/ca/allowances/","title":"Allowances","text":"<p>The Arcana CA SDKs requires allowances. </p> <p>Through allowances, a user permits the use of EOA funds in the source chains. The protocol uses these funds to pay the gas fee and the transaction amount on the destination chain.</p> <p>The default allowance limit set in the CA SDK for each supported chain is <code>unlimited</code>.</p> <p>Developers can change the allowance for each chain abstracted transaction. They can do this using the <code>setOnAllowanceHook</code> hook.</p> <p>Users can review the chain abstracted transaction details via intent.  The intent details list the amounts collected per source chain to transact on the destination chain. Users can choose to accept or reject a chain abstracted transaction. They cannot change allowances specified by the developers.</p> <p>Until a user permits allowance, the Arcana Vault contracts on the source chains cannot collect the user funds.</p> <p>By approving allowances for chain abstraction on the source chains, users can:</p> <ul> <li>Spend anywhere with funds from two or more source chains.</li> <li>Bypass bridging to enable liquidity on the destination chain.</li> <li>Transact on newer chains with zero or insufficient liquidity.</li> </ul> <p>Users must pay a gas fee to set up the allowance. This is besides the gas fee payable for the transaction on the destination chain.</p> <p>In some cases, Arcana may sponsor this gas fee for setting up the allowances.</p>"},{"location":"concepts/ca/allowances/#how-allowances-work","title":"How Allowances Work?","text":"<p>Here is how the allowances enables chain abstracted transactions:</p> <ol> <li>User approves the protocol to access funds from two or more source chains.</li> <li>Protocol unifies user balance across these chains.</li> <li>Unified funds go into protocol vaults.</li> <li>The protocol presents the user with an intent to transact on the destination    along with amount and fee details.</li> <li>The user signs the intent. Solvers then supply liquidity in the user's EOA    to transact on the destination chain.</li> <li>User can now transact on any destination chain and pay gas fee.</li> <li>The protocol settles transactions with the solvers using the funds collected    on the source chains.</li> </ol>"},{"location":"concepts/ca/allowances/#allowance-options","title":"Allowance Options","text":"<p>Users of the Arcana CA wallet have two allowance setup choices that differ by:</p> <ul> <li>Which chains are included for chain abstraction allowance setup?</li> <li>Who pays the gas fees for the allowance transaction?</li> </ul> Option Chains included ETH Balance Required User Pays Gas Fee Arcana Pays Gas Fee 1. Ethereum Mainnet + Avalanche + L2 chains Yes <code>$1</code>-<code>$5</code> (as per current Ethereum Mainnet gas price) Avalanche + L2 only 2. Avalanche + L2 chains No Nothing All gas sponsored 3. Avalanche + L2 chains + BSC No Nothing All gas sponsored<sup>*</sup> <p><sup>*</sup> For BSC chain, the gas fee for the allowance setup transaction is capped at $0.05. If gas fees are high, the allowance setup transaction may fail.</p>"},{"location":"concepts/ca/ca_wagmi/","title":"Arcana CA Wagmi SDK","text":"<p>Arcana CA Wagmi SDK enables unified balance in Web3 apps using the Wagmi framework. The SDK offers a plug-and-play widget that display the unified balance for the app users and helps them transact on any chain. </p> <p>Web3 Wagmi app builders can integrate the Arcana's Chain Abstraction feature via the SDK and let users spend on any chain, as long as they have sufficient funds across chains to cover for the transaction amount and the required gas fee.</p> Arcana CA Wagmi SDK Usage Overview"},{"location":"concepts/ca/casdk/","title":"Arcana CA SDK","text":"<p>The Arcana CA SDK is meant for Web3 builders and app developers. It unifies the user balance in the wallet account spread across chains and tokens.</p> <p>Web3 app builders can integrate Arcana's Chain Abstraction feature via the SDK. Let users spend on any chain if they have sufficient funds across chains to cover for the transaction amount and the required gas fee.</p> Arcana CA SDK Architecture Overview"},{"location":"concepts/ca/chain-abstraction/","title":"Chain Abstraction","text":"<p>Managing multiple chains, tokens, and accounts fragments wallet liquidity for Web3 users. Even with enough assets overall, funds scattered across chains make transacting difficult and require complex, time-consuming conversions.</p> <p>Chain abstraction lets users access a unified balance across all wallet-linked chains, enabling transactions anywhere. Instead of converting funds first, users specify a clear intent. The protocol collects funds from source chains, shows intent and fees for confirmation, then publishes the intent to solvers. Solvers compete to provide liquidity on the destination chain, and once available, users confirm the transaction. Settlement with solvers happens asynchronously using the collected funds.</p> <p>As part of setup, devs configure allowances per chain and token. Users approve or reject these allowances. For supported chains and tokens, the protocol uses these allowances to deposit required funds for transactions on the destination chain.</p> Arcana's Chain Abstraction"},{"location":"concepts/ca/chain-abstraction/#why-chain-abstraction","title":"Why Chain Abstraction?","text":"<p>Chain abstraction enables unified balance to simplify and streamline Web3 transactions. It offers: </p> <ul> <li>Faster Intent Processing: Enables quick and seamless transaction execution across chains.</li> <li>Unified Liquidity: Provides a consolidated view of user assets across wallet-linked chains with no asset bridging.</li> <li>Simplified UX: Removes multi-step hurdles for a seamless experience for users.</li> <li>Streamlined DX: Developers can add unified balances to dApps with minimal changes and no smart contract updates for new chains.</li> </ul>"},{"location":"concepts/ca/intent-explorer/","title":"Intent Explorer","text":"<p>The Arcana Intent Explorer is used to check the status or details of an intent. To view intent details in the Intent Explorer, you need the unique intent identifier.</p> <p>Each stage of chain abstracted transaction processing can be viewed in the Intent Explorer. All the intent details are populated once the intent is fulfilled and the transaction is complete.</p> Intent Explorer"},{"location":"concepts/ca/intent-explorer/#intent-identifier","title":"Intent Identifier","text":"<p>Each  intent is associated with a unique identifier.</p> <p>How you access this identifier depends on whether you\u2019re using the Arcana CA Wallet or a third-party wallet in a Web3 app integrated with the Arcana CA SDK.</p>"},{"location":"concepts/ca/intent-explorer/#arcana-ca-wallet","title":"Arcana CA Wallet","text":"<p>When using the Arcana CA Wallet for issuing a chain abstracted transaction, you can obtain the intent identifier by clicking 'View Intent.'  </p> <p>The 'View Intent' option becomes available in the transaction UI after a user authorizes a transaction that involves chain abstraction. The transaction is then published to solvers, who compete to provide liquidity on the destination chain as specified in the intent. </p> Get Intent Identifier <p>To find the intent identifier for past transactions:</p> <ul> <li>Open the 'Activity' tab in the CA Wallet to view your transaction history.</li> <li>Click the down arrow next to a transaction to expand its details.</li> <li>In the details, click 'View Intent' to see the unique intent identifier for that transaction and other intent details. </li> </ul> Activity Tab: Get Intent Identifier }"},{"location":"concepts/ca/intent-explorer/#third-party-wallets","title":"Third-party Wallets","text":"<p>Accessing the intent identifier for a chain-abstracted transaction issued through a third-party wallet depends on how the Web3 app is built and integrated with the Arcana chain abstraction SDK.</p> <p>The Arcana CA SDK provides methods and hooks that developers can use to:</p> <ul> <li>Implement chain-abstracted transactions.</li> <li>Show transaction progress, including the intent identifier, in the app\u2019s UI.</li> </ul> <p>Developers can:</p> <ul> <li>Add code to let users view intent details before authorizing a chain abstracted transaction.</li> <li>Use SDK hooks to track events and progress after the intent is published, retrieving the intent identifier once it\u2019s created.</li> <li>Offer options in the UI to display the intent identifier or a button to view details at different stages (for example, when liquidity is supplied or the intent is fulfilled).</li> </ul> <p>For Web3 apps using the Arcana CA Wagmi SDK, no extra code is needed. The 'View Intent' option is already built into the transaction UI. Users can click it to open the Intent Explorer and see the intent details and identifier.</p> <p>Previous Transactions</p> <p>Unlike the Arcana CA Wallet activity tab, the chain abstraction SDKs do not provide a mechanism to access the intent identifier for past transactions.</p> <p>If required for transparency or compliance, the developers can provision saving and tracking the intent identifiers for past transactions in the context of the Web3 app by listening to the event data through SDK hooks.</p>"},{"location":"concepts/ca/intent/","title":"Intent","text":"<p>In the chain abstraction context, an intent represents a user's request to execute a cross-chain transaction when they lack sufficient funds or liquidity on the destination blockchain. An intent specifies what the user is willing to offer (tokens from various source chains) to cover the transaction amount, gas fees, solver fees, and the Arcana chain abstraction (CA) protocol service fee.</p> <p>The following information is part of an intent:</p> <ul> <li>Source Chains: The blockchains where the user has funds/tokens.</li> <li>Destination Chain: The blockchain where the transaction will occur (where the user lacks liquidity).</li> <li>Tokens and Amounts: Specifies which tokens and how much from each source chain will be used.</li> <li>Fees: Includes CA gas fee (for cross-chain operations), protocol fee (for the service), solver fee (for the liquidity provider), and any supplied gas.</li> <li>Total Amount: The full cost, combining the transaction amount and all fees.</li> </ul> <p>The intent processing begins when the user signs an intent and authorizes a transaction. A solver (a liquidity provider) steps in to supply the necessary funds on the destination chain. The protocol is responsible for settling the source chain funds with the respective solver. The intent details shows which solver provided liquidity once the intent is successfully processed.</p> <p>Intents are tracked via a unique identifier. Users can supply this identifier in the Arcana Intent Explorer to check the intent\u2019s status or details later.</p> Intent Details"},{"location":"concepts/ca/intent/#stages","title":"Stages","text":"<p>Following are some of the key stages of intent processing:</p> <ul> <li>Intent Accepted  - User has agreed to chain abstracted transaction intent and accepted the associated fees</li> <li>Intent Hash Signed - User has signed the intent hash</li> <li>Intent Submitted - Intent for CA is submitted to the chain </li> <li>Intent Collection - Funds associated with the intent are collected on the source chains</li> <li>Intent Mined - CA protocol has mined the intent on the chain</li> <li>Intent Deposits Confirmed - Deposit on source chains is confirmed </li> <li>Intent Fulfilled - The liquidity is supplied on the destination chain by the solver</li> </ul>"},{"location":"concepts/ca/solver/","title":"Solver","text":"<p>In Arcana's chain abstraction protocol, solvers facilitate cross-chain transactions by supplying liquidity on the destination chain. After a user signs and authorizes an intent, a solver instantly provides the liquidity. In an optimal decentralized setup, multiple solvers compete to fulfill published intents.</p> <p>The protocol periodically settles funds with solvers who have successfully completed user intents, using tokens from the supported source chains.</p>"},{"location":"concepts/ca/unified-balance-wagmi-pnp/","title":"Wagmi Plug &amp; Play Widget","text":"<p>Arcana CA Wagmi SDK provides a plug and play widget that displays the Unified balance associated with the user's wallet address. This widget is available only for the Wagmi apps.</p> <p>Follow these steps to use this widget:</p> <ol> <li>Install and integrate the app with the Arcana CA SDK.</li> <li>Use <code>CAProvider</code> to enable the plug-and-play unified balance widget in the app. Learn more...</li> </ol> Plug &amp; Play Unified Balance Widget"},{"location":"concepts/ca/unified-balance/","title":"Unified balance","text":"<p>Unified balance shows all the liquidity in a user's EOA account across multiple chains in one view. It lets users transact seamlessly on any chain without needing bridges or pre-provisioning gas for token swaps. Chain abstraction handles all the complexity involved in a cross-chain transaction while enabling better UX through a single intent approval.</p> <p>For instance, let us take the case where a user intends to spend 18 USDC on Scroll and does not have any balance on Scroll.</p> <ul> <li>Optimism: 0.1 ETH, O USDT, 0 USDC</li> <li>Arbitrum: 0 ETH, 12 USDT, 0 USDC</li> <li>Base: 0 ETH, 10 USDT, 0 USDC</li> <li>Scroll: 0 ETH, 0 USDT, 0 USDC</li> </ul> <p>To spend 18 USDC on Scroll (destination chain) with the given liquidity fragmentation, it would typically require multiple clicks and steps for swapping or bridging different assets available on the source chains, so that user can convert the assets to the desired token balance on Scroll. </p> <p>Through chain abstraction and ability to swap cross-chain, users have the convenience to view the consolidated token balance across supported tokens and chains. This simplifies the process of sending 18 USDC on Scroll, as users can sign the intent without the need for bridging, swapping, or considering the optimal routes. </p> <p>The cross-chain swap enables users to:</p> <ul> <li>Spend assets on any destination chain without prior liquidity.</li> <li>Collate payable amount by combining multiple supported assets across source chains to address liquidity fragmentation.</li> </ul> Single chain liquidity vs. Unified Balance with Chain Abstraction"},{"location":"deploy/deploy-app/","title":"Testnet Configuration Profile","text":"<p>Each registered app is associated with Testnet and Mainnet configuration profiles. By default, only the Testnet profile is active. See how to create Mainnet profile for app deployment on the Mainnet.</p>"},{"location":"deploy/deploy-app/#app-deployment-testnet","title":"App Deployment: Testnet","text":"<p>You can view or update the default Testnet configuration profile in the Arcana Developer Dashboard. Copy the unique Client ID assigned to the apps' Testnet profile. Integrate the app with the Arcana Auth SDK by creating a new AuthProvider using this  Client ID.</p> <pre><code>import {AuthProvider} from \"@arcana/auth\";\n\nconst provider = new AuthProvider(\n  \"xar_test_87f34a9c7879cd4b726ba36a99e164837d70143a\", {  // testnet Client ID\n  // network: 'testnet',  // optional\n  chainConfig: {\n    chainId: '80002',      // selected chain in the wallet network dropdown UI\n    rpcUrl: 'https://rpc.ankr.com/polygon_amoy',  // RPC URL of the selected chain in the wallet network dropdown UI\n  },\n  alwaysVisible: true,\n  setWindowProvider: true,\n  debug: true,\n  position: 'right',\n  theme: 'dark',\n});\n</code></pre> <pre><code>try {\n  await auth.init()\n} catch (e) {\n  // Handle exception case\n}\n</code></pre> Testnet Client ID <p>Note that the user's wallet address is different when the same app is deployed on Testnet and Mainnet. Wallet banner highlights Testnet use.</p> Testnet Wallet Address"},{"location":"deploy/migrate-testnet-mainnet/","title":"App Deployment: Mainnet","text":""},{"location":"deploy/migrate-testnet-mainnet/#prerequisites","title":"Prerequisites","text":"<ul> <li>Apps must be registered. A default Testnet configuration profile is assigned to each registered app. The mainnet configuration profile must be created by the developer.</li> </ul>"},{"location":"deploy/migrate-testnet-mainnet/#1-create-mainnet-profile","title":"1. Create Mainnet Profile","text":"<p>Visit the 'Manage Apps' page on the Arcana Developer Dashboard. Each app is associated with a Testnet profile by default, and the 'Mainnet' configuration is disabled. Click the registered app card to view the Testnet configuration settings home page for the app. </p> <p>Choose 'Mainnet' from the  'Testnet' dropdown on the top right. You will see options to create the Mainnet profile:</p> <ul> <li>Copy the Testnet profile to Mainnet </li> <li>Create a fresh Mainnet profile</li> </ul> Create Mainnet Configuration Profile <p>Note down the brand new Mainnet configuration profile Client ID of the format <code>xar_live_nnnnnnnnnnn...nnn</code> displayed in the dashboard.</p>     &lt;img alt=\"Select Mainnet Profile\" src=\"/img/an_deploy_mainnet_dashboard.webp\" class=\"an-screenshots\"/&gt;      Select Mainnet Profile Mainnet Profile Status <p>The Manage Apps dashboard screen displays cards for all registered apps. Once a Mainnet profile is created, you will see it enabled on the app card.</p> <p> Mainnet Configuration Profile Available </p>"},{"location":"deploy/migrate-testnet-mainnet/#2-update-redirect-uri","title":"2. Update Redirect URI","text":"<p>The redirect URI setting displayed in the dashboard for the Mainnet configuration profile must also be updated for all the social login providers that are enabled for the app. Use the respective social login provider's console and update the OAuth settings with the new redirect URI value. </p> Update Redirect URIs <p>After creating the 'Mainnet' profile, developers must also update the social login provider 'Redirect URI' settings via the respective provider developer consoles or dashboards. </p> <p>Copy the 'Redirect URI' displayed for the 'Mainnet' profile and update this value in the social login provider's developer console. For e.g., for Google, update the Redirect URI in the Google Developer Console. Learn more...</p>"},{"location":"deploy/migrate-testnet-mainnet/#3-update-authprovider","title":"3. Update <code>AuthProvider</code>","text":"<p>In the app integration code, replace the Testnet Client ID with the newly assigned Mainnet Client ID and recompile the app. </p> <pre><code>import {AuthProvider} from \"@arcana/auth\";\n\nconst provider = new AuthProvider(\n  \"xar_live_d7c88d9b033d100e4200d21a5c4897b896e60063\", {  //mainnet Client ID\n  // network: 'mainnet',  // optional\n  chainConfig: {\n    chainId: '137',      // selected chain in the wallet network dropdown UI\n    rpcUrl: 'https://polygon-rpc.com/',  // RPC URL of the selected chain in the wallet network dropdown UI\n  },\n  alwaysVisible: true,\n  setWindowProvider: true,\n  debug: true,\n  position: 'right',\n  theme: 'dark',\n});\n</code></pre> Wallet Address Change <p>The user's wallet address will differ when the app is migrated from Testnet to Mainnet.</p> <p> Mainnet Wallet Address </p>"},{"location":"faq/faq-auth/","title":"Arcana Auth SDK","text":""},{"location":"faq/faq-auth/#onboarding-users","title":"Onboarding Users","text":"Is it possible to onboard users via social login as well as via a wallet when using the Arcana Auth SDK? <p>Yes. </p> <p>Besides social login, Arcana Auth SDK allows user onboarding   via any supported third-party browser-based Web3 wallets. </p> <p>Apps using wallet connectors, Wagmi, and RainbowKit, Web3-React, and WalletConnect SDKs can enable Arcana wallet to sign blockchain transactions.</p> Is social login via a Microsoft account or Hotmail supported? <p>No.</p> <p>Arcana Auth SDK does not support passwordless login through a Hotmail account. Also users cannot log in using Microsoft accounts.</p> Can a Web3 app use the Arcana Auth SDK only for onboarding users and disable the Arcana wallet feature altogether? <p>There is no way to selectively turn off the Arcana wallet features.  However, if the application does not perform any blockchain transactions, the wallet feature can be disabled by setting the wallet visibility mode to <code>false</code> while integrating the app with the Arcana Auth SDK. In this case, the Arcana wallet will not be visible to the authenticated user as long as no blockchain transaction is triggered. </p> <p>If you need to completely disable the Arcana wallet feature in the app, you can request a private build of the Arcana wallet by contacting Arcana with the use case details.</p> Will the Arcana Network's distributed key generation algorithm be affected if a node with a key share becomes temporarily inaccessible? <p>No.</p> <p>Arcana's ADKG algorithm can still generate the key using the key shares from the other nodes that are accessible. The algorithm is designed to tolerate a certain number of nodes being inaccessible, depending on the total number of participating nodes. For more details, see Arcana's Technical Whitepaper.</p> Does the authenticated user see the same wallet address if they use different authentication providers to log into a Web3 app integrated with the Arcana wallet? <p>Yes. This is made possible by the aggregate login feature of the Arcana Auth SDK. </p> <p>For this feature to work, the user must have the same email ID registered with the different authentication providers.</p> <p>Arcana Auth SDK uses the email ID to uniquely identify the user even if the user uses different social login providers or the passwordless email option to log in to a Web3 app. It associates a single key for such a user which results in the user seeing the same wallet address. If the user has different email IDs associated with different social login providers then each login is treated as a unique, different user and the same user will see a different wallet address when logging into the same Web3 app.</p> Does the authenticated user see the same wallet address across multiple Web3 applications that integrate with the Arcana Auth SDK? <p>Arcana Auth SDK allows Web3 app developers to tailor the wallet address experience for their users. It provides two 'Keyspace' options at the time of application registration:</p> <ul> <li>App-Specific Keys</li> <li>Global Keys</li> </ul> <p>If a developer selects the Global Keys option, then the user gets assigned the same key across all applications that integrate with the Arcana Auth SDK and chooses the same Global Keys option. The same key means the wallet address of the user is the same across different Web3 apps that integrate with the Arcana Auth SDK.  This is true across apps that use EVM-compatible chains. If two apps use global keys but one of them is on an EVM-compatible chain and the other is not, then the keys will be different across such apps. The Arcana's ADKG subsystem will assign the user different sets of keys for such apps resulting in different wallet addresses across such apps.</p> <p>For more details, see app-specific vs. global keys</p> Does the global keys feature work across EVM-compatible and not EVM-compatible chains? <p>No.</p> <p>The global keys feature enables an authenticated user to have the same wallet address across different Web3 apps in the Arcana ecosystem.  </p> <p>However, an authenticated user will see **different wallet addresses across two chains configured in a single Web3 app if one of them is EVM-compatible whereas the other is not. Also, in the case of two Web3 apps, one of which uses an EVM-compatible chain and the other that uses chains that are not EVM-compatible, the authenticated user's wallet address will be different for each app.</p> Why is the Global Keyspace option not enabled if I select the 'Custom Wallet UI' option during app registration in the Arcana Developer Dashboard? <p>If a Web3 app developer chooses the 'Custom Wallet UI' instead of the built-in Arcana wallet UI, during app registration via Arcana Developer Dashboard, only 'app-specific keys' are allowed. This is for keyspace security.</p> <p>Global keys allow users to have the same private key across all the apps that integrate with the Arcana Auth SDK. With custom wallet UI, global keys are disallowed to mitigate the security risk of a malicious app hacking into user keys and gaining access to not just one but all such apps with 'Global Keys' enabled.</p> Are incognito/private windows in browsers and 'third-party cookies blocked' option supported by the Arcana Auth SDK? <p>Yes.</p> <p>The Arcana wallet supports Chrome browser <code>Incognito Window</code> as well as <code>Private Window</code> in the case of Safari browsers. Earlier, if third-party cookies were disabled, the built-in, plug-and-play login pop-up modal did not show up in some cases.  These use cases are now addressed by the SDK.</p> <p>Developers can use the <code>canReconnect</code> and <code>reconnect</code> functions of the <code>AuthProvider</code> to check before allowing users to reconnect whereby users do not need to re-login if they refresh the page or close the tab and re-open it again within a 30-minute window.</p> Does Arcana Auth SDK return a JWT token to verify users post social login? <p>Yes. See Arcana JWT Token for details.</p> How does the app access an authenticated user's information such as name, email, login token, the wallet address? <p>Apps can use the <code>getUser()</code> method to obtain the user's name, email, login token (Arcana JWT Token, DID Token), wallet address, etc. See Auth SDK Reference for details.</p> For Twitter, the <code>getUser()</code> function of the <code>AuthProvider</code> does not always return the user's email? <p>You can create a Twitter account using your phone number without needing to provide an email address. If you do this, the getUser() function won't give you the user's email address.</p> <p>However, web3 app developers have the option to configure settings on the Twitter developer dashboard to request users' email addresses. If they do this, Arcana Auth SDK can access and retrieve the user's email through Twitter, and it will be included in the result when you use the getUser() function.    </p> Does login via Passkey share any user or device information with the website or application? <p>No. </p> <p>With passkeys, the user's biometric information, secrets, or private keys are never revealed to the website or the app where user is trying to sign in. User digital credentials do not leave the user's personal device. Also, the passkey protocols are carefully designed so that no information shared with sites can be used as a tracking vector.</p> <p>See FIDO standard, Apple Passkeys security, Microsoft Passkey Support, Google Passkey Security for details.</p> Is there any expiration limit on passkeys? <p>No.</p> <p>If required, users can delete passkeys associated with a website or application and create new ones.</p> Can users create accounts with passkeys on Arcana Auth SDK? <p>Yes.</p> <p>Web3 apps using Arcana Auth SDK can use passkeys for signups and login or as an alternative login mechanism.</p> <p>Refer to  Passkey Support for details.</p> Does the Arcana Auth SDK support role based access control (RBAC)? <p>Yes.</p> <p>After the user authenticates through the chosen social login provider, the Arcana Auth SDK receives the JWT token from the provider. It verifies the user with this token, and then creates and returns an Arcana JWT token to the app.</p> <p>If the app developer needs to implement Role Based Access Control (RBAC) and authorize the authenticated user for some specific actions, they can first verify the JWT token returned by Arcana. Upon verification they can issue a new app-specific JWT that enables RBAC and authorization. </p> <p>Alternately, developers can use Sign-In with Ethereum (SIWE) by signing a standard message format parameterized by scope, session details, and security mechanisms (e.g., a nonce).</p> <p>SIWE allows users to log in to applications using their Ethereum wallet and ENS (Ethereum Name Service) profile.</p>"},{"location":"faq/faq-auth/#arcana-wallet","title":"Arcana wallet","text":"How does the in-app Arcana wallet allow developers to manage UX for signing blockchain transactions? <p>Apps can integrate with the Arcana Auth SDK to enable an embedded, non-custodial Web3 Arcana wallet for every authenticated app user.</p> <p>To integrate an app, developers must register and configure the app with Arcana, and then install the <code>auth</code> package and create a new <code>AuthProvider</code>. While instantiating the <code>AuthProvider</code> developers can manage the user experience for signing blockchain transactions through the input parameter <code>alwaysVisible</code>. This parameter controls whether the Arcana wallet UI is automatically displayed in the application's context right after a user authenticates or it shows up only when the app triggers a blockchain transaction that requires the user's approval.</p> <p>For details, see Arcana wallet visibility modes.</p> Does the Arcana Auth SDK set <code>window.ethereum</code> value in the app's context? <p>By default, Arcana wallet does not set the <code>window.ethereum</code> value in the app's context. To explicitly set this value, during the integration of the app with the Arcana wallet, when <code>AuthProvider</code> is instantiated, developers must specify the <code>setWindowParameter=true</code>. For details, see the Arcana wallet Usage Guide.</p> How is the in-app Arcana wallet different from self-custodial wallets? <p>Arcana wallet is a non-custodial wallet. Here is how it differs from the self-custodial wallets:</p> Self-custodial wallets Arcana's non-custodial wallet Users need to be responsible for and remember their passphrases. Users are not required to remember any passphrase. Users need to manage keys themselves in case of self-custody wallets. Arcana wallet offers a sweet spot, users don't have to manage keys as in the self-custody wallet and yet their keys can be generated in a distributed manner via the Arcana wallet, a non-custodial wallet. Users who are new to Web3 typically find self-custodial wallets very challenging to use. Arcana wallet offers a really simple Web2-like onboarding experience for new Web3 users without sacrificing security and ownership."},{"location":"faq/faq-auth/#user-key-privacy","title":"User Key Privacy","text":"If Arcana is storing nothing related to the user's private keys, how does Arcana provide the same wallet to a user when the user signs in for the second time? <p>The Arcana Auth SDK maintains a UserID -&gt; Public Key mapping, that is how the user is identified across successive login sessions and the correct wallet is assigned for the authenticated user. This mapping is stored in the DKG nodes.</p> How does the Arcana Auth SDK ensure that the key shares are fetched by the correct user only? <p>A user can log in only after the social login provider authenticates or if the user provides the OTP shared via email during passwordless onboarding. Providers share JWT/other identifiers with Arcana Auth SDK once the user authenticates. So unless the user themselves share their social ID / OTP, only an authenticated user will be allowed to access their key shares. The token (idToken) is verified with the DKG nodes before the key shares are sent back to the user. The token can be used only once per user login session.</p> Can a malicious entity reconstruct the user's private key if they get all the requisite key shares? <p>There are several safeguards against this and we are continuously evolving the ADKG protocol to make it more robust and fast. </p> <p>One of the methods is MFA. When the MFA feature is enabled, it further strengthens the security by using multiple factors to generate the private key besides the key shares. A local share is created for the user at the first login that lives on the user's device. This local key component stored on the user's device is required to get the actual private key. If a user changes the device, they are validated via PIN setup during MFA or security answers before the local share is re-created on the new device.</p> <p>Irrespective of whether MFA is enabled or not, the reconstruction of the private key happens only after ensuring that the user is:</p> <ul> <li>authenticated through one of the configured social login providers,</li> <li>verified by DKG before sharing the key shares. </li> </ul> <p>The verification token ID changes for every user session so a malicious entity cannot reuse it. Also, note that the same set of key shares is not returned for every user session by the DKG nodes. Only a random subset of shares is needed to construct the private key. </p> <p>In a future version of the ADKG protocol, the key shares will be periodically refreshed to safeguard against an eventuality if some of them are somehow stolen by a malicious user.</p>"},{"location":"faq/faq-db/","title":"Arcana Developer Dashboard","text":""},{"location":"faq/faq-db/#general","title":"General","text":"Is it mandatory to use the Arcana Developer Dashboard before integrating with the Arcana Auth SDK to enable social login? <p>Yes.</p> <p>To integrate any app with the Arcana Auth SDK, it is not sufficient to simply download and install the SDK. A unique Client ID is also required. This is available once the app is registered using the Arcana Developer Dashboard. </p> <p>Note that the Client ID per app is different when using Testnet or Mainnet. When deploying the app on Testnet use the Client ID meant for Testnet and vice-versa.</p> How do I delete the application configuration and start afresh? <p>To delete an application from Arcana ecosystem, follow these instructions:</p> <ul> <li>Log into the Arcana Developer Dashboard.</li> <li>In the Manage Apps screen, select the card displayed there for the registered application you wish to delete.</li> <li>Click the trash icon on the top right and delete the app entry.</li> <li>The application registration will be canceled and the Client ID assigned to your application will no longer work.</li> </ul> <p> De-register &amp; Delete App </p> How do I migrate an application from using Arcana Testnet to Mainnet? <p>To migrate an application from using the Arcana Testnet to Mainnet, follow these steps:</p> <ol> <li> <p>Use the Arcana Developer Dashboard, visit the 'Manage App' page, and select the application entry. By default, when you register any application, a 'Testnet' configuration profile is created for the application. Click on the app card to see the application configuration screen.</p> </li> <li> <p>On the application configuration screen, switch the network from 'Testnet' to 'Mainnet' on the top right to create a 'Mainnet' configuration profile. You will be asked to approve the creation of the 'Mainnet' configuration profile. To begin with, you can use a copy of the 'Testnet' profile to generate the 'Mainnet' profile. Later, you can edit and manage it independently. Note that a new Client ID is assigned to the 'Mainnet' profile.</p> </li> <li> <p>Use the 'Mainnet' profile Client ID and update it in the app integration code instead of the earlier value which corresponds to 'Testnet'. You will need to restart your application after this change. This is important to ensure that the app uses the 'Mainnet' configuration settings.</p> </li> </ol> <p>Use appropriate Client ID </p> <p>To migrate an app from using Testnet to Mainnet, the developers must ensure that the new Client ID corresponding to the application's 'Mainnet' profile is used to initialize the <code>AuthProvider</code> while integrating the app with the Arcana Auth SDK. After that, the app must be restarted to switch over from using Arcana Testnet to the Mainnet. </p> Can a developer run one instance of the app, say dev version on Testnet while publishing the release instance to use the Arcana Mainnet? <p>Yes, developers can run two instances of the app simultaneously, one on the Arcana Testnet and the other on the Mainnet as each app instance is assigned a unique Client ID. </p> <p>Use the 'Mainnet' configuration profile Client ID in your app's integration code and instantiate the <code>AuthProvider</code>. Then deploy this app instance to use Arcana Mainnet. </p> <p>Similarly, use the 'Testnet' configuration profile Client ID in another copy (branch / different version of the code) of your app where Arcana Auth SDK is integrated and instantiate the <code>AuthProvider</code>. Then deploy this app instance to run it using the Arcana Testnet.</p> How do I delete Mainnet configuration settings and run my application using Arcana Testnet only? <p>Once you have enabled 'Mainnet' for an application, you cannot delete the 'Mainnet' configuration profile independently in the current release.  You can switch your application from 'Mainnet' to 'Testnet' by using the dropdown button in the application configuration screen to edit or modify it. </p> <p>The only way to delete Mainnet settings is to deregister the app and delete the app entry altogether.  This removes both Testnet and Mainnet configuration profiles. You will need to re-register the application.  This will create a new Client ID and you will be required to specify this new Client ID when integrating your application with the Arcana Auth SDK.  As a result, when you deploy your app and the users log in, they will see brand-new wallet addresses. </p> <p>If you wish to ensure that the user wallet address does not change, you must register your application and request for the Shared Key Space option at the very start. In that case, users will be allowed to use the same wallet address across all applications in the Arcana ecosystem and even if an application is de-registered and re-registered.</p>"},{"location":"faq/faq-db/#branding-settings","title":"Branding Settings","text":"Why do I see an error when uploading the logo file? <p>Make sure the file is less than the 1 MB limit for a successful upload.</p> How do I change the logo file that I uploaded earlier? <p>Click on the 'x' icon next to the uploaded logo file. You will see a notification about the successful deletion of the file. Click on the upload icon and upload a new logo file.</p>"},{"location":"faq/faq-db/#social-auth-settings","title":"Social Auth Settings","text":"Is it mandatory to specify all configurations in the Arcana Developer Dashboard Configure section? <p>No.</p> <p>If no authentication provider is configured via the Arcana Developer Dashboard, the app users can log in through the default passwordless option that requires no configuration. Developers can use the <code>connect</code> method to bring up plug-and-play login UI or build a custom login UI. When using the custom login UI, call the <code>loginWithLink</code> method (deprecated), <code>loginWithOTPStart</code> and <code>loginWithOTPComplete</code> methods to onboard users. </p> <p>Besides the default passwordless login option, developers can choose to enable one or more authentication providers as the onboarding options for users. That requires configuring authentication providers through the Arcana Developer Dashboard. For details, check out how to configure authentication providers.</p> Can an application enable more than one authentication provider to onboard users? <p>Yes. Developers can configure one or more authentication providers as additional onboarding options besides the default passwordless login option. Users can choose any one of the supported authentication mechanisms to onboard the app.</p>"},{"location":"faq/faq-db/#wallet-settings","title":"Wallet Settings","text":"Why do I need to specify Wallet Website Domain setting? <p>This is an optional setting for additional security. If specified, the Arcana Auth SDK configuration subsystem uses this setting to restrict the Arcana wallet from loading anywhere else other than the application website domain that a developer specifies. for restricted domains, the frame-ancestor Content Security Policy (CSP) is used.</p> Is there a way to control when, which position in the application window, and what kind of theme is used for displaying the Arcana wallet in the apps' context? <p>Wallet Display Controls</p> <ol> <li> <p>Visibility </p> <p>The application developer can use the <code>alwaysVisible</code> parameter in the <code>AuthProvider</code> to control whether the Arcana wallet UI is automatically displayed once the user has authenticated (default) or it shows up only when a blockchain transaction is triggered that requires the user's approval.</p> <p>If <code>AuthProvider</code> is instantiated with <code>alwaysVisible = false</code> then the wallet UI will not be displayed by default in the app's context. However, when a blockchain transaction is triggered by the app, a transaction notification is displayed in the app's context, requesting the user's approval for the transaction. Once the user takes the appropriate action, the transaction notification will disappear.</p> <p>For more details, see Arcana wallet visibility modes.</p> </li> <li> <p>Position</p> <p>The <code>position</code> parameter in the <code>AuthProvider</code> controls whether the wallet is displayed on the left or the right side of the Web3 app UI window.</p> </li> <li> <p>Light/Dark Theme</p> <p>The <code>theme</code> parameter in the <code>AuthProvider</code> controls whether the wallet is displayed using the light theme or the dark theme.  Developers can set the theme via the Arcana Developer Dashboard by using the 'Branding' tab on the LHS.</p> </li> </ol>"},{"location":"faq/faq-gen/","title":"General","text":"Can any Web3 app user access the in-app Arcana wallet? <p>No. </p> <p>The in-app Arcana wallet is accessible by the  authenticated users only for Web3 apps that integrate with the  Arcana Auth SDK. </p> <p>Web3 users cannot download and install the in-app Arcana wallet, unlike other standalone, browser-based third-party wallets.</p> <p>CA wallet</p> <p>Arcana also offers a standalone  CA wallet. This is a limited feature wallet. It  is used for showcasing chain abstracted transactions in a  select set of supported apps.</p> How can a Web3 user access in-app Arcana wallet? <p>Web3 developers must integrate apps with the    Arcana Auth SDK to enable the in-app Arcana wallet.</p> <p>To integrate:</p> <ul> <li>Register the app and configure (optional)   the SDK usage settings through the Arcana Developer Dashboard.</li> <li>Download and install the Arcana Auth SDK.</li> <li>Use the unique Client ID assigned to the   registered app in the dashboard in the integration code. </li> <li>Initialize the SDK and use the Arcana Auth SDK functions   to onboard users. </li> </ul> <p>Developers can control the user experience for signing blockchain transactions.   Use the appropriate wallet visibility settings   during SDK integration. You can also display/hide the wallet    with <code>showWallet()</code>.</p>"},{"location":"faq/faq-gen/#integrating-auth-sdk","title":"Integrating Auth SDK","text":"How can Web3 developers enable social login? <p>Follow these steps:</p> <ul> <li>Login to the Arcana Developer Dashboard using familiar Web2 login.</li> <li>Register the Web3 app in the dashboard.</li> <li>Configure or use the default user onboarding SDK settings in the dashboard.</li> <li>Download and install the SDK</li> <li>Integrate the Web3 app with the SDK. Process may          vary depending upon the app type.</li> </ul> How can Web3 apps access the standard EIP-1193 provider from the <code>AuthProvider</code>? <p>The Web3 app integration code must:</p> <ul> <li>First create an <code>AuthProvider</code> object.</li> <li>Initialize it with <code>init()</code> method.</li> <li>Call <code>Web3Provider</code> if using the <code>ethers</code> library or call <code>provider</code>, if using the <code>web3.js</code> library.</li> </ul> <pre><code>// ethers\nconst provider = new ethers.providers.Web3Provider(auth.provider)\n// web3js\nconst provider = new Web3(auth.provider)\n</code></pre>"},{"location":"faq/faq-gen/#application-frameworks","title":"Application Frameworks","text":"What application frameworks are supported by the Arcana Auth SDK? <p>Developers can integrate the Arcana Auth SDK with any Web3    app built using vanilla HTML/CSS and Javascript or any of these frameworks:</p> <ul> <li>React </li> <li>Next.js</li> <li>Vite</li> <li>Vue</li> </ul> <p>Learn more...</p>"},{"location":"faq/faq-gen/#wallet-connectors","title":"Wallet Connectors","text":"Which wallet connector frameworks are supported for Arcana wallet? <p>Arcana wallet supports Wagmi, RainbowKit,  WalletConnect, Web3-React wallet connect frameworks.</p> How can developers enable Arcana wallet for wallet connectors? <p>To enable, developers must integrate the Web3 app with the Arcana Auth SDK.</p> <p>Install the specific packages required for the wallet connector. Then integrate the app   with the SDK. </p> <ul> <li>Web3 apps using Wagmi, RainbowKit or WalletConnect must install and    integrate with the <code>auth</code>, <code>auth-wagmi</code> packages. </li> <li> <p>Apps using Web3-React must install and integrate with the    <code>auth</code>, <code>auth-web3-react</code> packages.</p> </li> <li> <p>How to integrate Wagmi apps?</p> </li> <li>How to  integrate RainbowKit apps?</li> <li>How to integrate WalletConnect apps,</li> <li>How to  integrate Web3-React apps.</li> </ul>"},{"location":"faq/faq-gen/#user-onboarding","title":"User Onboarding","text":"How do I onboard users via social login in a Web3 app? <ol> <li> <p>Login to the Arcana Developer Dashboard.</p> </li> <li> <p>Register the Web3 app with Arcana. </p> </li> <li> <p>Use default SDK user onboarding settings or configure authentication providers          in the Social Auth section. </p> </li> <li> <p>Install and integrate the app with the Arcana Auth SDK.</p> </li> <li> <p>Add code to onboard users. For example, see how to onboard users via Google.</p> </li> </ol> Is there a passwordless login option to onboard the users? <p>The option to onboard users in a Web3 app via passwordless login   works without any configuration.</p> <p>Developers can register the Web3 app via the Arcana Developer Dashboard.    Then install and integrate the app with the Arcana Auth SDK. </p> <p>Initialize the Arcana Auth SDK, use the <code>connect</code> method.   This will bring up the built-in, plug-and-play login UI.   This default login UI allows passwordless login. </p> <p>Alternatively, developers can also add custom login UI and call the   Arcana Auth SDK methods for passwordless login. </p> <p>See how to enable passwordless login for details.</p>"},{"location":"faq/faq-gen/#deployment","title":"Deployment","text":"Does each registered app have a single unique Client ID? <p>No. </p> <p>Two unique Client IDs are assigned for every registered app.</p> <p>One is for the Testnet configuration profile and another for the Mainnet configuration profile.</p> What is the difference between Testnet and Mainnet? <p>Arcana Testnet and Mainnet are two different blockchain networks. </p> <p>The features offered by the Arcana Auth SDK available on    Testnet may be different from the ones available on the Mainnet.  </p> <p>Following are the key differences between Arcana Testnet and Mainnet:</p> <ul> <li> <p>Client ID: To deploy the app on Testnet,    the developer must specify the Client ID assigned    to the Testnet configuration profile after app registration, when creating    the <code>AuthProvider</code>. Similarly, for Mainnet deployment, the    Client ID assigned to the Mainnet   configuration profile should be used.</p> </li> <li> <p>Key/Wallet Address: The authenticated user is assigned a unique   key/wallet address for Testnet app deployment. The same user    is assigned a different key/wallet address when this app is deployed   on the Mainnet.</p> </li> </ul> <ul> <li>Billing: App usage is tracked for both the Arcana Testnet as well as the Mainnet.  However, only Mainnet usage is billed.</li> </ul> What is the difference in the in-app Arcana wallet behavior when an app is deployed on Testnet vs. the Mainnet? <p>If a user logs into the app that is integrated with the Arcana Auth SDK and deployed on the Arcana Testnet, they will see a warning on the main 'Token Assets' tab of the built-in Arcana wallet UI. The warning indicates that the app is deployed on the Testnet.</p> <p>There is no such warning displayed in the Arcana wallet UI when the app is deployed on the Mainnet.</p> How does a developer migrate an app deployed on the Arcana Testnet to Mainnet? <p>See  how to migrate an app deployed on Testnet to Mainnet for details.</p> Are there any configuration changes that must be done when migrating an app deployed on Testnet to the Mainnet? <p>Yes. Following are the configuration changes required for migrating app deployment from the Testnet to the Mainnet:</p> <p>1. Create a Mainnet Configuration Profile: To deploy the app on Mainnet, developers need to first create a Mainnet configuration profile by either copying the Testnet profile or creating a fresh one from scratch. </p> <p>2. Redirect URI: After creating the 'Mainnet' profile, developers must also update the social login provider 'Redirect URI' settings via the respective provider developer consoles or dashboards. </p> <p>Copy the 'Redirect URI' displayed for the 'Mainnet' profile and update this value in the social login provider's developer console. For e.g., for Google, update the Redirect URI in the Google Developer Console. Learn more...</p> <p>3. Update Client ID: The Client ID specified as the input parameter while integrating the app with the Arcana Auth SDK is the one assigned to the default Arcana Testnet profile. This works fine when the app is deployed on the Testnet. For deploying the app on the Mainnet, the developer must create the Mainnet configuration profile and carefully copy the newly assigned Mainnet Client ID. Use the Mainnet Client ID as the input parameter while integrating the app with the Arcana Auth SDK. This will ensure that the app gets deployed on the Mainnet and not on the Testnet. For details, see how to migrate an app deployed on the Testnet to the Mainnet.</p>"},{"location":"faq/faq-mvx/","title":"Using MultiversX","text":""},{"location":"faq/faq-mvx/#configuration","title":"Configuration","text":"Is MultiversX the only non-EVM chain supported by the Arcana Auth SDK? <p>No.</p> <p>Refer to the list of pre-configured, supported chains - EVM and non-EVM for details.</p> Can a developer choose to use some EVM-compatible chains along with MultiversX in an app? <p>No. Either EVM-compatible chain type or MultiversX (non-EVM-compatible chain type) chains can be used at a time in an app.  When a user logs into an app that is enabled for MultiversX the keys (wallet address) are different from the one assigned to the same user when EVM-compatible chain is selected or a different non-EVM chain is selected.</p>"},{"location":"faq/faq-mvx/#keys","title":"Keys","text":"Why are the MultiversX keys different from EVM-compatible chains? <p>MultiversX uses BLS multi-signature cryptographic keys.</p> <p>BLS is different from the secp256k1 curve used for EVM-compatible chains.</p>"},{"location":"faq/faq-mvx/#shard-selection","title":"Shard Selection","text":"What is the impact of selecting the same shard in two different apps registered via the dashboard? <p>MultiversX uses adaptive state sharding for horizontal scaling. Shards allow it to process far more transactions through parallelization, improving transaction throughput and efficiency.</p> <p>If two apps are configured to use the same shard, then all the app interactions whether they are with the app contracts on the same shard or between the wallets of the users across these two apps will be faster.</p>"},{"location":"faq/faq-mvx/#seed-phrase","title":"Seed Phrase","text":"When is the seed phrase displayed? <p>When you log into a Web3 app for the first time that uses the MultiversX chain and integrates with the Arcana Auth SDK, the system displays a 24-word seed phrase. You can copy this seed phrase or save it as a PDF file using the \"print as PDF\" option. You must verify and save this seed phrase immediately, as it will not be shown again. After this initial display, you won't be able to access the seed phrase through the Arcana wallet interface in future logins.</p>"},{"location":"faq/faq-mvx/#export-mvx-wallet","title":"Export MVX Wallet","text":"How can a user export MVX wallet credentials from the app using the Arcana Auth SDK? <p>When you first log into a Web3 app using the MultiversX chain and Arcana Auth SDK, copy and save the seed phrase securely. Use this seed phrase to access your MVX wallet via the MVX Portal or MVX Wallet app. Learn more...</p>"},{"location":"faq/faq-near/","title":"Using Near","text":""},{"location":"faq/faq-near/#configuration","title":"Configuration","text":"Is Near the only non-EVM chain supported by the Arcana Auth SDK? <p>No.</p> <p>Refer to the list of pre-configured, supported chains - EVM and non-EVM for details.</p> Can a developer choose to use some EVM-compatible chains along with Near in an app? <p>No. Either EVM-compatible chain type or Near (non-EVM-compatible chain type) chains can be used at a time in an app.  When a user logs into an app that is enabled for Near chain, the keys (wallet address) are different from the ones assigned to the same user when an EVM-compatible chain is selected or a different non-EVM chain is selected.</p>"},{"location":"faq/faq-near/#keys","title":"Keys","text":"Why are the Near keys different from EVM-compatible chains? <p>TBD</p> <p>&lt;!---    MultiversX uses BLS multi-signature cryptographic keys.</p> <p>BLS is different from the secp256k1 curve used for EVM-compatible chains.   ---&gt;</p>"},{"location":"faq/faq-solana/","title":"Using Solana","text":""},{"location":"faq/faq-solana/#configuration","title":"Configuration","text":"Is Solana the only non-EVM chain supported by the Arcana Auth SDK? <p>No.</p> <p>Refer to the list of supported chains - EVM and non-EVM for details.</p> Can a developer choose to use some EVM-compatible chains along with Solana in an app? <p>No. Either EVM-compatible chain type or Solana (non-EVM-compatible chain type) chains can be used at a time in an app.  When a user logs into an app that is enabled for Solana the keys (wallet address) are different from the one assigned to the same user when EVM-compatible chain is selected.</p>"},{"location":"faq/faq-solana/#keys","title":"Keys","text":"Why are the Solana keys different from EVM-compatible chains? <p>The cryptographic keys used by Solana are based on ED 25519 curve. This is different from the secp256k1 curve used for EVM-compatible chains.</p>"},{"location":"faq/faq-validator/","title":"Validator Onboarding","text":"<p>Frequently asked questions regarding setting up Arcana DKG validator nodes.</p>"},{"location":"faq/faq-validator/#general","title":"General","text":"What role do validators play in the Arcana Network? <p>Validator nodes refer to partner infrastructure that participates in the distributed key generation protocol (DKG). This is used to assign unique keys to authenticated users and manage them in a decentralized manner.</p> <p>Validators play a key role in achieving the decentralization goal thereby making Arcana Network more secure and truly open.</p> Where do I get the DKG binaries from? <p>Refer to the latest DKG release at GitHub.</p> What is starting ceremony? <p>It is mandatory for all nodes in the Arcana DKG subsystem to start at the same time for the protocol to function correctly.  This is referred to as the starting ceremony aimed at synchronizing the start of DKG nodes.</p> Node crashed at startup with 'tx fees exceed the configured cap' error <p> DKG Node Start Error </p> <p>You will see this error if you are not using the latest DKG binary. After the node crash, before restarting, please make sure that there is no <code>dkg.sock</code> file and that you are using the latest DKG release before issuing the <code>dkg start</code> command. See restarting a node section in the Arcana Auth Validator Onboarding Guide.</p> After starting up, I see this. Is this an error? <p> Current Node List Error </p> <p>This is not an error. Your validator node is waiting and polling for the other nodes to start up and join in the DKG protocol.</p>"},{"location":"faq/ca/faq/","title":"CA FAQ","text":""},{"location":"faq/ca/faq/#general","title":"General","text":"Why is CA not supported by all apps out of the box? <p>There's no universal approach to interoperability in the blockchain world. There are many ways to address interoperability and Chain Abstraction (CA) is one of them.</p> <p>Enabling interoperability into every app is complex. App contracts have to be ported to enable cross chain transactions across all chains where interoperability must work. This is not scalable.</p> <p>The Arcana chain abstraction protocol is a more scalable approach to interoperability. It offers intent-based chain abstraction to Web3 apps.</p> How can I try chain abstraction? <p>You can use a Web3 app integrated with the Arcana chain abstraction SDK.</p> <p>Alternatively, you can try the standalone Arcana CA wallet. This is a limited feature Web3 wallet. Its purpose is to showcase unified balance and chain abstracted transactions when using some of the select Web3 apps.</p> <p>Developers: Integrate Web3 app with Arcana <code>ca-sdk</code> and enable unified balance. With unified balance Web3 app users can spend on any chain. Refer to the list of supported chains and assets for details.</p> <p>Wallet Users: Download and use the Arcana CA wallet in the context of any  supported app, chains and tokens. </p> How does chain abstraction protocol decide which chain to source the tokens from? <p>Let us take the following case:</p> <p>Wallet Balance</p> <p>Optimism: 1 ETH</p> <p>Arbitrum: 1 ETH</p> <p>Scroll:  0 ETH</p> <p>User Intent: Spend 0.5 ETH on Scroll</p> <p>The selection of source chains and tokens for a chain abstracted transaction is governed by the following logic:</p> <ul> <li>Source chains are sorted by token balance (descending order)</li> <li>Chains with the same balance are sorted by gas price (ascending order) </li> </ul> <p>If multiple chains have the same balance, the one with lower gas price will be picked up to source the tokens.</p> <p>The protocol selects the first chain in the sorted list. If its balance isn\u2019t enough to cover the transaction amount and gas on the destination chain, it automatically uses the next chain(s) as needed.</p>"},{"location":"faq/ca/faq/#ca-sdk","title":"CA SDK","text":"How do I fix the polyfill issues right after import statement when integrating React and Vite app with the Arcana CA SDK? <p>To fix polyfilling issues, make sure <code>vite.config.ts</code> has the polyfilling options configured.</p> <pre><code>import { defineConfig, Plugin } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport { nodePolyfills, PolyfillOptions } from \"vite-plugin-node-polyfills\";\nimport tailwindcss from \"@tailwindcss/vite\";\n\nconst nodePolyfillsFix = (options?: PolyfillOptions | undefined): Plugin =&gt; {\nreturn {\n    ...nodePolyfills(options),\n    resolveId(source: string) {\n    const m =\n        /^vite-plugin-node-polyfills\\/shims\\/(buffer|global|process)$/.exec(\n        source\n        );\n    if (m) {\n        return `node_modules/vite-plugin-node-polyfills/shims/${m[1]}/dist/index.cjs`;\n    }\n    },\n};\n};\n\n// https://vite.dev/config/\nexport default defineConfig({\nplugins: [\n    react(),\n    tailwindcss(),\n    nodePolyfillsFix({\n    include: [\"buffer\"],\n    globals: {\n        Buffer: true,\n        global: true,\n        process: true,\n    },\n    }),\n],\ndefine: {\n    \"process.env\": {},\n},\n});\n</code></pre> Is the amount refunded if the chain abstracted transaction fails? <p>Yes. It may not happen instantly.</p> <p>For chain abstracted transaction safety, follow these guidelines:</p> <ol> <li> <p>Failed transactions? Don't panic - you'll get your tokens back automatically.    It may happen in the next settlement cycle. Usually it happens within 15 minutes.    But it may take an hour in some cases.</p> </li> <li> <p>Before transacting: Always check the transaction details. Review the    applicable gas fee, total amount payable, before issuing a transaction. </p> </li> <li> <p>During transacting: The status of the chain abstracted transaction is displayed    in the app's context. Click on 'View Intent' details link. Save the unique intent    identifier associated with the transaction. You'll need the intent identifier    to track a failed transaction if something goes wrong.</p> </li> <li> <p>Track your transaction: Use the     Arcana Intent Explorer    with your intent ID to track status. </p> </li> </ol> <p>Critical: Keep your app/wallet open and logged. Especially if you     encounter a failed transaction. Refunds often complete within 15 minutes.    Note that the session must stay active for a refund to happen.</p> <ol> <li>No refund after 1 hour: The protocol auto-retries, but you must stay logged in.    If you closed the app/wallet, reopen and log back in to enable refund processing.    If you did not receive a refund, contact Arcana team.    Use any support channel. Make sure you mention the intent    identifier that failed to refund or your wallet address with date / time of the transaction.</li> </ol> <p>Bottom line: Your funds are protected. Failed transactions always get refunded. For failed transactions, the protocol itself starts the refund process. If for some reason that does not work, contact support@arcana.network.</p> <p>Viewing Refund</p> <p>To view the refund, a user must open or log into the app and access the wallet. For refunds, ensure that an active session exists. The same wallet should be active as the one used to sign the intent and confirm the chain  abstracted transaction.</p> Why is liquidity fragmentation an issue and how does CA solve it? <p>Liquidity fragmentation is an issue because it makes it difficult for users to spend their assets on any chain. </p> <p>Let us take a simple case of a user's wallet that contains 3 USDC on Arbitrum and 2 USDC on Optimism. </p> <p>If the user intends to send 4 USDC on Base, it is not possible to do so through a traditional wallet. This is because there is liquidity fragmentation for  USDC in the wallet across Arbitrum and Optimism. </p> <p>To be able to send USDC on Base, user must perform several complex steps.</p> <p>First, there is no USDC on Base to be sent.</p> <p>User cannot directly spend USDC on Base. This is despite enough USDC tokens when put together on the other two chains in the same wallet account.</p> <p>To spend on Base, the user must bridge tokens from one or more source chains. That is a complex, multi-step, multi-click, time-consuming process. </p> <p>It also needs non-trivial knowhow about secure bridging and getting the best token exchange deals. </p> <p>Next, the user must to switch the network to Base and then send the tokens. </p> <p>Chain Abstraction (CA) lets user view unified balance across the source chains. CA lets users spend 4 USDC on Base with a single click. </p> <p>The user does not have to convert the tokens on Optimism or Arbitrum to Base tokens to make this transaction on Base. With unified balance,  onboarding a new chain does not necessarily mean that the user must first get tokens on the new chain. </p> <p>The user can pledge or sign an intent to send tokens from any of the source chains to the destination chain.</p> How can a Web3 developer enable unified balance for dApp users? <p>Download and install the appropriate CA SDK flavor as per the app type. </p> <ul> <li>Web3 apps: Install the Arcana CA SDK. Check out the integration example in codesandbox</li> <li>Web3 apps using the Wagmi library: Install the    Arcana CA Wagmi SDK.   Try the codesandbox integration example.</li> </ul> <p>Refer to the respective SDK quick start guide for integration details.</p> I'm a Web3 wallet user, how can I enjoy unified balance with chain abstraction? <p>Web3 wallet users can unify assets across chains and spend on any chain. Log into a Web3 app integrated with the Arcana CA SDK, use any third-party browser-based wallet to issue chain abstracted transactions. </p> <p>Alternatively, users can download and install the standalone Arcana CA wallet. It is a browser extension that can be deployed and used in the context of any supported Web3 app.</p> Why do Arcana CA wallet users need to pay gas fees to set up CA with Layer 1 chains? <p>When setting up Arcana chain abstraction to include Layer 1 chains, users need ETH to pay gas fees for signing the token allowance transaction with the Arcana vault smart contract.  The Arcana standalone CA wallet doesn't cover these Layer 1 chain gas fees. As a result, users who choose to include Layer 1 chains in their CA scope must pay these gas fees themselves to set up the CA allowance.</p> What is a CA allowance and why are allowances needed? <p>Allowance or 'Permit' in the blockchain context allows a third party  such as a smart contract, to perform transactions. This transaction happens from a user's EOA for a specified amount \u2014 without accessing the user's private key. </p> <p>In the Arcana's CA context, allowances  enable unified balance and chain abstracted transactions. This lets users  spend on any destination chain provided they have sufficient funds on the source chains. Allowance lets the protocol collect required funds from the  source chains. It uses these funds to pay for gas and the transaction amount.</p> Which chains and ERC20 tokens does the unified balance feature support for chain abstraction SDKs? <p>Refer to the latest supported chains and token list.</p> <p>For the standalone Arcana CA wallet used to demonstrate chain abstraction the supported chain and token list may vary from the SDK. It can be used only in the context of a limited set of supported apps.</p> Does integration CA SDK automatically enable an in-app CA wallet? <p>No there is no built-in in-app wallet offered by the Arcana SDKs. Web3 apps integrating with the Arcana CA SDK must use a third-party wallet for blockchain transactions.</p> How can a Web3 app enable unified balance for a user account? <p>The app must download, install and integrate with the CA-SDK. Then use the EIP-1193 provider to access the unified balance in the context of an authenticated user. See Arcana CA SDK Reference and the usage guide for details.</p> Can Arcana CA SDK work with Wagmi Web3 app? <p>For Web3 app built using Wagmi, integrate with the Arcana CA Wagmi SDK.</p> Can the Wagmi apps enable unified balance and chain abstraction? <p>Yes.  Integrate teh app with both the CA SDKs to enable unified balance and chain abstraction: * Arcana CA SDK  * Arcana CA Wagmi SDK</p> <p>The <code>ca-wagmi</code> SDK replaces the Wagmi hooks: <code>useSendTransaction</code> and  <code>useWriteContract</code>. </p> <p>It also provides hooks such as <code>useBalance</code>, <code>useBalanceModal</code> and <code>useCAFn</code>. These hooks enable unified balance plug-and-play popup modal and chain  abstracted <code>bridge</code>, <code>transfer</code> functions. </p> <p>For details see Arcana CA Wagmi SDK Quick Start Guide and the Arcana CA Wagmi SDK Reference.</p> Who is the target audience for the Arcana CA SDKs? <p>Arcana CA SDKs help Web3 dApp developers handle fragmented blockchain assets, letting users spend on any chain.</p> <p>CA SDK can integrates with dApps to offer unified balances across chains and chain abstracted transactions.</p> <p>For a complete list of real life applications of unified balance, see  use cases section.</p> Who is the target audience for the standalone Arcana CA wallet? <p>The standalone Arcana CA wallet is meant for wallet users. It is not a full featured wallet.</p> <p>It showcases chain abstracted transactions for some of the popular  Web3 apps. Users can try viewing unified balance and  trying out chain abstraction.</p> <p>CA Transaction Limit</p> <p>The standalone Arcana CA wallet has a  $100 limit for any chain abstracted transactions</p> <p>Transfers on the same chain have no such limit.</p> Give an example of how the CA SDK solves liquidity fragmentation? <p>Liquidity Fragmentation</p> <p>Suppose a user has: - Arbitrum: 3 USDC - Optimism: 4 USDC - Base: 0 USDC - Ethereum: 0.001 ETH</p> <p>The user wants to send 5 USDC to Base. </p> <p>No single chain has enough funds, so liquidity fragmentation complicates  the process. The user must figure out how to bridge, convert, and move  assets to Base, which is complex and time-consuming.</p> <p>How unified balance and chain abstraction solve this</p> <p>With chain abstraction, the user sets up allowances once.  Allowances control how much can be deposited from each source chain to Arcana vaults. Solvers provide liquidity on Base, and the protocol settles payments using these deposits.</p> <p>The user signs an intent specifying the amount to deposit from source chains for the destination chain. Arcana CA collects pledged tokens and fees based on allowances. Solvers compete to provide liquidity in the user's Base EOA. After signing, the user gets liquidity almost instantly and can complete the 5 USDC transaction on Base seamlessly.</p> Can I request gas tokens using ERC20 through Arcana Chain Abstraction?? <p>Yes, you can request gas tokens using ERC20 via Chain Abstraction.</p> <p>For example, if you have 13 USDC and 0 ETH on Optimism but need to make a 15 USDC transaction requiring 0.0000001 ETH for gas, you'll need an extra 2 USDC plus the gas fee. </p> <p>You can pledge or sign an intent to cover for the total USDC and gas fees. You can use the funds from other supported chains like Arbitrum or Base. Assumption: You have enough USDC to cover the deficit and fees.</p> <p>Once you sign the intent, Arcana CA SDK supplies the needed USDC and gas in a single transaction.</p> Can a user review intent details before issuing a chain abstracted transaction? <p>Yes.</p> <p>Users can review the intent details before issuing a CA transaction issued through the Arcana CA wallet. Apps integrated with  the CA SDK displays the intent details from within app's context. The chain abstracted transaction occurs when a user approves it. The app can enable any third-party browser-based wallet to let the user issue a chain abstracted transaction.</p> <p>Before submitting a transaction, user can click 'View Intent' to see the  intent details. Once the transaction is successful, there are options to view the intent details as well as the transaction details.</p> <p>To view the intent details later, user must note the intent identifier. Refer tot the intent details displayed in the 'View Intent' screen.  Note it before confirming the transaction. </p> <p>Use the Arcana Intent Explorer accessible at:  https://explorer.arcana.network/ to view the intent details.</p> <p>You must enter the intent ID to view details at a later time.</p> <p> View Intent Details </p> Does chain abstracted <code>transfer</code> allow funds deposit in a smart contract? Does it cause blockchain state update? <p>No. <code>transfer</code> does not support <code>data</code>. </p> <p>Use <code>request</code> with  <code>sendTransaction</code> to deposit funds to a smart contract and update the blockchain state.</p> Why isn't this a normal transaction as balance exists on the destination chain? <p>Suppose you try to send 0.2 USDC from a 0.25 USDC balance, but the transaction uses funds from other chains. This is not an error.</p> <p>A normal transaction requires both enough tokens and enough gas for fees. Even if you have enough tokens (0.2 &lt; 0.25 USDC), the remaining balance may  not cover gas fees. If native funds can't cover both the transaction and gas, the protocol pulls from other chains' allowances. This makes it a  chain-abstracted transaction instead of a normal one.</p>"},{"location":"faq/ca/faq/#ca-wallet","title":"CA Wallet","text":"Is the standalone, browser-based CA wallet meant for Web3 users? <p>Arcana offers the standalone, browser-based  wallet meant for demonstration purposes. Web3 users can use this wallet to  view unified balance and try chain abstracted transactions.</p> <p>This is not a full-featured wallet. It does not work with any Web3 app. Use this wallet with any of the supported Web3 applications.</p> Where can a user download the Arcana CA wallet? <p>Download the CA wallet in  the Chrome Store.</p> What are the available options for allowance setup? <p>There are two options:</p> <p>To use chain abstraction, you can select different types of chains. It can be a combination of L1 and L2 chains or the L2 chains only:</p> <ol> <li> <p>L1 + L2 + Avalanche </p> <p>For example:</p> <ul> <li>Ethereum, Avalanche and/or any other supported L2 EVM-compatible chains</li> <li>Ethereum and any other supported L2 EVM-compatible chains</li> <li>Fuel, Avalanche and/or any other supported L2 EVM-compatible chains</li> <li>Fuel and any other supported L2 EVM-compatible chains</li> <li>Ethereum and Fuel</li> </ul> </li> <li> <p>L2 + Avalanche</p> <p>For example,</p> <ul> <li>Avalanche and any other supported L2 EVM-compatible chains</li> <li>Any supported L2 EVM-compatible chains</li> </ul> </li> </ol> How do the allowance setup options differ in usage? <p>If you choose option 1, your wallet must have native token to cover gas fees on the L1 chain for the allowance transaction.</p> <p>If you select option 2 (Only L2 chains and/or Avalanche ) then it is not mandatory. Arcana sponsors the gas fee for the allowance transaction.</p> Why must a user set up allowance before using the CA wallet? <p>Allowances let users set the largest amount they permit for transfer from a  source chain. The chain abstraction protocol pulls these funds and deposits them into the Arcana vaults on the source chains. The protocol uses these deposits to pay for the transaction on the destination chain. </p> Why must a user have gas tokens in the wallet to set up allowance for Layer 1 blockchains? <p>Layer 1 chains such as Ethereum and Fuel require the user to pay for the gas fee and pay for the allowance set up transaction. For Layer 2 chains and Avalanche,  the gas fee required to make the allowance set up transaction is sponsored by Arcana until further notice. </p> <p>Limited Gas Sponsorship</p> <p>The gas fee sponsored for the allowance setup transaction is limited. </p> <p>For BSC chain, it is capped at $0.05. If gas fees are high at the time of allowance setup, then the allowance setup transaction may fail if the user does not have tokens to pay for the gas fee.</p> Does the Arcana CA wallet allow any CA transactions? <p>The chain abstracted transaction request for funds (RFF) limit is $100.</p> Does the Arcana CA wallet support Testnet as well as Mainnet? <p>Use the Arcana CA wallet to issue chain abstracted transactions for any of the supported Web3 apps, chains and tokens. See   here for the complete list. </p> Why is Arcana CA Wallet not shown as an option when using WalletConnect? <p>When using WalletConnect, if you do not see the </p> <ul> <li>You haven\u2019t installed the standalone Arcana    CA wallet from the Chrome Store.</li> <li>You have installed the it but the browser extension is disabled.</li> </ul> <p>If the issue persists, contact support@arcana.network.</p> Does the Arcana CA wallet support cross-chain token swaps? <p>For now, the Arcana CA Wallet allows users to combine a single type of token  across supported source chains. They can spend the unified balance of that token  on any destination chain. </p> <p>We are actively working on the cross-chain token swap feature.</p> <p>Cross-Chain Swap Functionality:</p> <ul> <li>Allows users to spend assets on a destination chain without prior liquidity.</li> <li>Enables asset combination across source chains for unified balance.</li> <li>Users can spend the combined balance in any supported token on any   destination chain.</li> </ul> Is <code>window.ethereum</code> supported by Arcana CA wallet? <p>Yes. </p> <p>Note that apps using the EIP-1193 provider that use the Arcana CA wallet may face issues sometimes if they use <code>window.ethereum</code>.</p> <p>This is because <code>window.ethereum</code> can be overridden by the latest installed wallet or the last used wallet in the browser. </p> <p>Apps using EIP-6963 will not see such an issue when using <code>window.ethereum</code>.</p> What is the <code>bridge</code> feature in the Arcana CA wallet? <p>The <code>bridge</code> feature in Arcana CA wallet allows users to move tokens in a chain abstracted manner. They can move tokens from two or more source chains to a destination chain near instantly in their wallet.</p> <p>This feature uses Arcana\u2019s intent-based chain abstraction to bridge user\u2019s funds.  No third-party bridge is involved.</p> Does the Arcana CA wallet support addition of custom ERC-20 tokens? <p>Yes.</p> <p>Users can add custom ERC-20 tokens and view token balances in the Arcana CA wallet. The wallet displays default supported tokens such as USDT, USDC, and ETH.</p> <p>Supported tokens</p> <p>Custom tokens are not supported for chain abstracted transactions and  unified balance. </p> <p>Unified balance and chain abstracted transactions are applicable for  supported apps, chains, and tokens. </p> What is allowance and why is must allowances be set up for using the Arcana CA wallet? <p>Allowances enable a third party, such as a smart contract, to perform transactions on behalf of the user. It can issue a deposit transaction from the user's wallet for a specified amount, without accessing the user's private key. </p> <p>Users must sign allowances on the source chain(s) to enable the Arcana chain abstraction protocol. This permits the Arcana Vault contract to deposit the necessary funds from the source chains. </p> <p>The deposits are done as per the user controlled allowance settings on the source chains.</p> <p>This lets the protocol to enables liquidity on the destination chain. A chain  abstracted transaction on the destination chain addresses the user's intent.</p> For some websites the Arcana CA wallet is not displayed despite having the browser extension active? <p>Arcana Network\u2019s Chain Abstraction Wallet is an injected wallet. This is same as how a wallet such as Rabby works. </p> <p>If a website does not allow injected Web3 wallets, then it will not show up. </p> <p>Many websites support one injected provider (like MetaMask)  at a time. If more than one injected wallets are active, the website might not recognize all but one, leading to others being hidden. </p> <p>Also, some websites that need user authorization for security reasons. Such websites ensure that they can accesses the wallet data once the user explicitly grants permission. Such sites may not allow the injected wallets or may be optimized for popular injected wallets such as MetaMask.</p>"},{"location":"introduction/","title":"Overview","text":"<p>Arcana offers Arcana Auth SDK that integrates with Web3 apps to enable user onboarding via social login. It allows authenticated users to sign blockchain transactions through the in-app, embedded, non-custodial Arcana wallet.</p>"},{"location":"introduction/#get-started","title":"Get Started","text":"Register AppInstall &amp; Integrate <pre><code>flowchart LR\n    subgraph Register [1.Register App]\n    direction LR\n      A0(((Step 1))) --&gt; B0([Dashboard])\n      B0 --&gt; C0[Register App] --&gt; E0[Client ID] \n      C0 -- Configure App --&gt; D0[SDK Settings]   \n    end\n\nclassDef an-highlight stroke:#3169b3,stroke-width:0.25rem;\nclass E0 an-highlight</code></pre> <pre><code>flowchart LR\n    subgraph Integrate [2.Integrate SDK with App]\n    direction LR\n      A00(((Step 2))) --&gt; F00[Install SDK]\n      F00 -- Integrate App --&gt; G00[Initialize SDK]\n      E00[ClientID] --&gt; G00\n      G00 --&gt; H00(Call SDK Functions)\n    end\n\nclassDef an-highlight stroke:#3169b3,stroke-width:0.25rem;\nclass E00 an-highlight</code></pre>"},{"location":"introduction/#usage","title":"Usage","text":"Arcana Auth SDK <pre><code>\nflowchart LR \n    subgraph Step1 [Arcana Auth SDK Usage]\n    direction LR\n        A1(((Start))) -- 1.Register App --&gt; B1(Dashboard Login)\n        B1  --&gt; C1[Get Client ID] --&gt; E1\n        A1 -- 2.Integrate App --&gt; D1[Install Auth SDK] --&gt; E1[Initialize &lt;code&gt;AuthProvider&lt;/code&gt;] --&gt; F1[Social Login Fns]\n        E1 --&gt; G1[Web3 Wallet Ops]\n    end\n\nclassDef an-highlight stroke:#3169b3,stroke-width:0.25rem;\nclass C1 an-highlight</code></pre> <p>Key Features</p> <ul> <li>Onboard users quickly, at scale, via popular social login providers. </li> <li>Provide instant access to use the in-app, non-custodial Arcana wallet. </li> <li>Easy to customize and integrate with various Web3 app types.</li> </ul> Current Version <p>Arcana CA SDK: Use v0.0.3.</p> <p>Arcana Auth SDK: Use v1.0.12. Older versions may encounter potential breaking changes that require app reconfiguration, integration code updates, and redeployment.Migrate Arcana Auth SDK v1.0.11 -&gt; v1.0.12.</p>"},{"location":"introduction/#see-also","title":"See Also","text":"<ul> <li>Wallet User Guide</li> <li>Dashboard User Guide</li> <li>Auth SDK</li> </ul>"},{"location":"migration/beta-auth-v0.3.0-migration/","title":"Arcana Auth SDK v0.2.x -&gt; v0.3.0 Migration","text":"<p>This guide is meant for developers who have already integrated apps with an older version of the Arcana Auth SDK and run them using Arcana Network Testnet. If you are new to Arcana Auth SDK, see Quick Start Guides to get started.</p> <p>When you migrate from an older version of the Arcana Auth SDK to v0.3.0, there are some breaking changes. These changes are mostly related to deploying an app on the Arcana Testnet and the use of Arcana Storage SDK (no longer supported). No breaking changes are expected in the Arcana Auth SDK  usage related to user onboarding or blockchain transaction signing functions. Also, the Arcana wallet has a revamped, better look in this release.</p>"},{"location":"migration/beta-auth-v0.3.0-migration/#what-has-changed","title":"What has Changed?","text":"<ul> <li> <p>This release does not contain Arcana Storage SDK. </p> </li> <li> <p>Arcana Blockchain is no longer listed in the list of available blockchain networks in the Arcana wallet dropdown.</p> </li> <li> <p>Now you can use the Arcana Auth SDK and the Arcana wallet on any supported EVM-compatible chain for user onboarding and signing of blockchain transactions.</p> </li> <li> <p>The blockchain transaction activity is no longer available in the form of a tab in the main Arcana wallet. You can see the activity listed in the newly added combined notification screen in the Arcana wallet .</p> </li> </ul>"},{"location":"migration/beta-auth-v0.3.0-migration/#arcana-developer-dashboard","title":"Arcana Developer Dashboard","text":"<ul> <li>In this release there are some breaking changes in the registered application database schema. If you were already using an older version of the Arcana Auth SDK, you need to re-register and configure your application again using the latest Arcana Developer Dashboard. The Client ID assigned to you earlier will not work. You need to re-register and obtain a new one. Make sure you use the new Client ID while integrating with the Arcana Auth SDK .</li> </ul>"},{"location":"migration/beta-auth-v0.3.0-migration/#arcana-auth-sdk","title":"Arcana Auth SDK","text":"<ul> <li>In this release there is no usage change in the Arcana Auth SDK. </li> <li>After re-registering your app, the dashboard will assign a new Client ID. You need to use the new Client ID during integration with the Arcana Auth SDK.</li> </ul>"},{"location":"migration/beta-auth-v0.3.0-migration/#how-to-migrate-to-v030","title":"How to Migrate to v0.3.0","text":"<ol> <li> <p>You need to re-register your app using the Arcana Developer Dashboard. This is required to obtain a fresh Client ID and use that for integrating with the Arcana Auth SDK. The older Client ID will NOT WORK with the latest Arcana Auth SDK v0.3.0 release. Follow the instructions in the Registration Guide to re-register and re-configure your app.</p> </li> <li> <p>If you were using the Arcana Storage SDK, that is no longer supported. You need to stop using Storage SDK in your app for the time being until we begin supporting Storage SDK in a future release.</p> </li> <li> <p>You need to re-integrate your app with the Arcana Auth SDK by providing the new Client ID after re-registering and configuring your application using the developer dashboard.</p> </li> <li> <p>If you had enabled the Arcana  Testnet blockchain network in Web3 wallet operations, you will need to remove this network altogether as it no longer exists. Also, the Arcana Testnet Blockchain Explorer is no longer available.  Arcana  smart contracts are deployed on Polygon now. In this release, the Arcana wallet supports all EVM-compatible chains besides the default ones that show in the drop-down. See Wallet User Guide.</p> </li> <li> <p>The wallet activity tab on the wallet token asset tab is gone. A new 'notification' tab is available in the wallet. You can see the list of all activities in the activity tab. It lists send tokens, contract deployment, and contract interaction transactions performed by the wallet user.</p> </li> </ol>"},{"location":"migration/beta-auth-v0.3.0-migration/#whats-new","title":"What's New?","text":"<p>The new improved Arcana Auth SDK now supports NFT preview, NFT transactions, and management of NFT collections. A new combined notification screen displays blockchain transactions related to smart contracts, tokens as well as NFTs. For details, see Arcana Auth SDK release notes.</p>"},{"location":"migration/latest-auth-migration-guide/","title":"Arcana Auth SDK Migration Guide (Latest)","text":"<p>New to Arcana Network? Get started with the Arcana Auth SDK Quick Start Guides. </p> <p>Using an older version and want to migrate? Read on...</p>"},{"location":"migration/latest-auth-migration-guide/#what-has-changed","title":"What has Changed?","text":"<p>If you are already using the SDK, there are no usage changes in this release.</p> <p>This new release includes support for Custom Auth and wallet UI features for off-ramping crypto to fiat.</p>"},{"location":"migration/latest-auth-migration-guide/#how-to-migrate-to-v1012","title":"How to Migrate to v1.0.12?","text":"<p>Install and upgrade to the latest Arcana Auth SDK v1.0.12. No integration code updates are required for the features in the previous release.  </p> <p>If you plan on using the Passkeys, check out the section about Passkeys and how to onboard users via passkeys in apps integrated with the Arcana Auth SDK. See how to set up user onboarding via Telegram, Apple in the setup section of the documentation. Then refer to the usage section for how to install the SDK, integrate app and onboard users depending upon the app type.</p> <p>That's all!</p>"},{"location":"migration/latest-auth-migration-guide/#previous-releases","title":"Previous Releases","text":"<p>Are you using an older version of the Arcana Auth SDK?</p> <p>Refer to the  release notes archive and Migration Guides. Upgrade to the latest version.</p>"},{"location":"migration/latest-auth-migration-guide/#questions","title":"Questions?","text":"<p>Refer to the  Arcana Auth FAQ, Troubleshooting Guide, and other developer resources.</p> <p>Can't find what you are looking for? Contact Arcana Support. </p>"},{"location":"migration/main-auth-v1.0.0-migration/","title":"Arcana Auth SDK v0.3.0 -&gt; v1.0.0 Migration","text":"<p>This guide is meant for developers who have already integrated apps with an older version of the Arcana Auth SDK and run them using Arcana Network Testnet. </p> <p>If you are new to Arcana Network, see Arcana Auth SDK Quick Start Guides to get started.</p> <p>When you migrate from using the Arcana Auth SDK  v0.3.0 to the v1.0.0 release, please note that there are a few breaking changes that require you to use Arcana Developer Dashboard  and re-register, re-configure the app settings as per the Arcana Auth SDK configuration setting requirements, and obtain a new Client ID. Only then you can re-integrate the app successfully with the Arcana Auth SDK . </p>"},{"location":"migration/main-auth-v1.0.0-migration/#what-has-changed","title":"What has Changed?","text":"<p>The following section lists changes between Arcana Auth SDK v0.3.0 and v1.0.0. </p> <p>Use Latest Release</p> <p>If you are using Arcana Auth SDK v0.2.2 or older, please see How to migrate to Arcana Auth SDK v0.3.0.</p>"},{"location":"migration/main-auth-v1.0.0-migration/#arcana-developer-dashboard","title":"Arcana Developer Dashboard","text":"<p>Earlier, by default, each registered application was associated with a 'Testnet' configuration profile and an Client ID. Now you can have a 'Testnet' as well as a 'Mainnet' configuration profile associated with your registered application. Each profile has its unique Client ID. You can deploy an app on the Arcana Testnet and run another instance (a stable version) on the Arcana Mainnet.</p>"},{"location":"migration/main-auth-v1.0.0-migration/#mainnet-configuration-profile","title":"Mainnet Configuration Profile","text":"<ul> <li> <p>By default, when any new application is registered and configured, a 'Testnet' profile is created. The new dashboard allows developers to also create a 'Mainnet' configuration profile for the app. Developers can create a Mainnet profile and switch to using the Arcana Mainnet or deploy two instances of their app, one for Testnet and the other for Mainnet.</p> </li> <li> <p>To create the 'Mainnet' profile you can choose to copy the existing 'Testnet' profile or create a new 'Mainnet' configuration profile. Note that a unique, new Client ID is assigned to the 'Mainnet' profile whether it is copied or created afresh.</p> </li> <li> <p>To deploy an app on the Arcana Mainnet, developers are required to perform two things:</p> <ul> <li>First, use the dashboard to create a 'Mainnet' configuration profile for the app and obtain a new Client ID.</li> <li>Second, the developers must also re-integrate their app and update the code where they instantiate the <code>AuthProvider</code> appropriately so that the 'Mainnet' Client ID is used and the <code>network</code> parameter is initialized as <code>mainnet</code> in the <code>AuthProvider</code> constructor.</li> </ul> </li> </ul>"},{"location":"migration/main-auth-v1.0.0-migration/#keyspace-in-mainnet-deployments","title":"Keyspace in Mainnet Deployments","text":"<ul> <li>The 'Mainnet' configuration profile for the app has an additional setting meant for selecting the Keyspace type. Developers can choose between the default App-specific Keys or Global Keys. Global Keyspace enables a better user experience whereby the user is assigned the same wallet address across applications in the Arcana ecosystem in a secure manner. Enabling the global keys feature requires developer verification and whitelisting. For details, see 'How to Configure Keyspace' section in the Dashboard User Guide.</li> </ul>"},{"location":"migration/main-auth-v1.0.0-migration/#usage-tracking","title":"Usage Tracking","text":"<ul> <li>In this release, the Developer Dashboard tracks application usage data in terms of MAU, both for Arcana Testnet as well as Mainnet deployments. Billing is applicable only for Mainnet deployments and bills are generated at the end of the month for Arcana Mainnet usage.</li> </ul>"},{"location":"migration/main-auth-v1.0.0-migration/#arcana-auth-sdk","title":"Arcana Auth SDK","text":"<p>The Arcana Auth SDK v1.0.0 supports deploying apps on the Arcana  Mainnet. As there are breaking changes in the App database schema, you need to re-register your apps using the Arcana Developer Dashboard and obtain a new Client ID before you can integrate the app with the Arcana Auth SDK .  This is required irrespective of whether you chose to deploy your app on the Arcana  Testnet or the Mainnet.</p> <p>To deploy an app on the Arcana  Mainnet, you need to first login into the Arcana Developer dashboard, create a 'Mainnet' configuration profile for your app and choose the requisite 'Keyspace' type. In addition to creating the 'Mainnet' configuration profile, developers need to update the Arcana Auth SDK  integration code for creating a new <code>AuthProvider</code> as follows:</p> <ul> <li>Use the Client ID specified to the 'Mainnet' configuration profile in the dashboard</li> <li>Set the <code>network</code> parameter in the <code>AuthProvider</code> constructor to 'mainnet'</li> </ul>"},{"location":"migration/main-auth-v1.0.0-migration/#how-to-migrate-to-v100","title":"How to Migrate to v1.0.0?","text":"<p>Do not jump into installing, and upgrading the Arcana Auth SDK  in your sources and running your app.</p> <p>To successfully use the Arcana Auth SDK, you need to first re-create your app configuration profile using the Arcana Developer Dashboard and then integrate your app with the Arcana Auth SDK for onboarding users and enabling the Arcana wallet. </p> <p>If you wish to deploy your app on Arcana Testnet, follow steps 1 and 3.  To deploy your app on Arcana  Mainnet, follow all three steps:</p> <ol> <li> <p>Reconfigure &amp; Get Client ID: If you are using v0.3.0, you would already have created a 'Testnet' configuration profile for your app. When you log into the dashboard, this profile will not show up by default. Due to breaking changes in the Arcana Auth SDK release v1.0.0, you will be required to re-register your app using the Arcana Developer Dashboard. When you re-register and create a new profile for the app, by default, it is assigned as a 'Testnet' configuration. This step is mandatory irrespective of whether you want to deploy your app on Arcana  Testnet or Mainnet or both.</p> </li> <li> <p>Mainnet Configuration: To deploy your app on the Arcana  Mainnet, you must first create a 'Mainnet' configuration profile using the Arcana Developer Dashboard. See instructions  here. Once you have the 'Mainnet' configuration profile ready, copy the new Client ID assigned to the 'Mainnet' configuration profile. This will be required during Arcana Auth SDK  integration later. At the time of 'Mainnet' profile creation, you need to specify whether you would like to use the App-specific Keys (default) or use the Global Keys feature for your app. To enable the global keys feature, developers must submit a verification form and get approval. Wait to onboard users until you receive a response to your verification request. Otherwise, the wallet address assigned to your app users may change after the Global Keys feature takes effect. If you do not choose Global Keys, your 'Mainnet' profile is configured to use App-specific keys by default. What this means is that your app users will see different wallet addresses across different apps in the Arcana ecosystem. For details, see Global Keys.</p> <p>Update Redirect URI for Mainnet</p> <p>You must update the OAuth redirect URI values for all the social providers configured for your 'Mainnet' profile. Use the respective social provider console to update callback URL values for Mainnet. Copy the new redirect URI value from the application's 'Mainnet' configuration settings dashboard page and add it to the list of redirect URIs setup in the OAuth configuration settings for your provider.  You would have earlier added the redirect URI for the 'Testnet' configuration profile, now update the 'Mainnet' URI too. That's all.</p> </li> <li> <p>Install &amp; Integrate: Install and upgrade the Arcana Auth SDK to v1.0.0. Integrate the Arcana Auth SDK and create a new <code>AuthProvider</code> instance by specifying the Client ID. If you wish to deploy your app on the Arcana Testnet, provide the Client ID listed in the 'Testnet' configuration profile of your app in the dashboard. Also, you need to set the <code>network</code> parameter in the <code>AuthProvider</code> constructor to <code>testnet</code>. This is important because, by default, Arcana Auth SDK v1.0.0 has the <code>network</code> parameter set to using 'mainnet'. Similarly, if you want to deploy your app on the Arcana  Mainnet, then use the Client ID assigned to the 'Mainnet' configuration profile of your app in the dashboard and set the <code>network</code> parameter to 'mainnet'. </p> </li> </ol> <p>Refer to the examples below to see how to integrate and deploy your app on the Arcana  Testnet and Mainnet after successfully registering and configuring the app.</p>"},{"location":"migration/main-auth-v1.0.0-migration/#example-deploy-on-testnet","title":"Example: Deploy on Testnet","text":"<p>Register your app using the Arcana Developer Dashboard. By default, the 'Testnet' configuration profile is created. You can provide the social provider settings as per your user onboarding requirements. Save the Client ID assigned to your app displayed on the top right of the dashboard screen. This will be required during integration with the Arcana Auth SDK  as shown below:</p> <pre><code>import {AuthProvider} from \"@arcana/auth\";\n\nconst provider = new AuthProvider(\n  \"xar_test_87f34a9c7879cd4b726ba36a99e164837d70143a\", {  // testnet Client ID\n  // network: 'testnet',  // optional\n  chainConfig: {\n    chainId: '80002',      // selected chain in the wallet network dropdown UI\n    rpcUrl: 'https://rpc.ankr.com/polygon_amoy',  // RPC URL of the selected chain in the wallet network dropdown UI\n  },\n  alwaysVisible: true,\n  setWindowProvider: true,\n  debug: true,\n  position: 'right',\n  theme: 'dark',\n});\n</code></pre> <p>Once a user authenticates, the following wallet UI is displayed when the app is deployed on the Arcana Testnet.</p> Testnet Wallet"},{"location":"migration/main-auth-v1.0.0-migration/#example-deploy-on-mainnet","title":"Example: Deploy on Mainnet","text":"<p>Register your app using the Arcana Developer Dashboard. By default, the 'Testnet' configuration profile is created. Make sure you create a 'Mainnet' profile and save the Client ID assigned to your app for the 'Mainnet' configuration. It is displayed on the top right of the dashboard screen.</p> <p>To bring up your app on Arcana  Mainnet, in your integration code, use the <code>Mainnet</code> Client ID and specify the <code>network</code> parameter as 'mainnet' while instantiating the <code>AuthProvider</code> as shown below:</p> <pre><code>import {AuthProvider} from \"@arcana/auth\";\n\nconst provider = new AuthProvider(\n  \"xar_live_d7c88d9b033d100e4200d21a5c4897b896e60063\", {  //mainnet Client ID\n  // network: 'mainnet',  // optional\n  chainConfig: {\n    chainId: '137',      // selected chain in the wallet network dropdown UI\n    rpcUrl: 'https://polygon-rpc.com/',  // RPC URL of the selected chain in the wallet network dropdown UI\n  },\n  alwaysVisible: true,\n  setWindowProvider: true,\n  debug: true,\n  position: 'right',\n  theme: 'dark',\n});\n</code></pre> <p>Once a user authenticates, the following wallet UI is displayed when the app is deployed on the Arcana Mainnet.</p> Mainnet Wallet"},{"location":"migration/main-auth-v1.0.0-migration/#whats-new","title":"What's New?","text":"<p>Besides Testnet/Mainnet and Global Keyspace features, the Arcana Auth SDK v1.0.0 uses a new, improved asynchronous distributed key generation (ADKG) subsystem. In addition to the DKG nodes operated by Arcana, two nodes are run and managed by Comdex and LugaNodes. </p> <p>For more details, see Arcana Auth SDK v1.0.0 release notes for details.</p>"},{"location":"migration/main-auth-v1.0.1-migration/","title":"Arcana Auth SDK v1.0.0 -&gt; v1.0.1 Migration","text":"<p>This guide is meant for developers who have already integrated apps with Arcana Auth SDK v1.0.0 and run them using Arcana Testnet. </p> <p>If you are new to Arcana Network, see Arcana Auth SDK Quick Start Guides to get started.</p>"},{"location":"migration/main-auth-v1.0.1-migration/#what-has-changed","title":"What has Changed?","text":"<p>The following section lists changes between Arcana Auth SDK v1.0.0 and v1.0.1. </p>"},{"location":"migration/main-auth-v1.0.1-migration/#arcana-developer-dashboard","title":"Arcana Developer Dashboard","text":"<p>No changes or updates in the dashboard usage.</p>"},{"location":"migration/main-auth-v1.0.1-migration/#arcana-auth-sdk","title":"Arcana Auth SDK","text":"<p>When you migrate from using the Arcana Auth SDK v1.0.0 to the v1.0.1 release, there is no breaking change or reconfiguration required. The default setting of the <code>network</code> parameter in the <code>AuthProvider</code> constructor has changed. Earlier it was set to 'mainnet' but now it is set to 'testnet' by default.</p>"},{"location":"migration/main-auth-v1.0.1-migration/#how-to-migrate-to-v101","title":"How to Migrate to v1.0.1?","text":"<ol> <li> <p>If you are deploying your app on the Arcana Testnet, make sure that the app integration code uses the Client ID specified in the 'Testnet' configuration profile in the app dashboard. You can set the <code>network</code> parameter in the <code>AuthProvider</code> constructor as 'testnet' but it is not essential since the default setting in the Arcana Auth SDK v1.0.1 is 'testnet'.</p> </li> <li> <p>If you are deploying your app on the Arcana  Mainnet, make sure that the app integration code uses the Client ID assigned to the 'Mainnet' configuration profile in the app dashboard. Also, you need to specify the <code>network</code> parameter in the <code>AuthProvider</code> constructor as 'mainnet' in order to deploy your app on the Arcana  Mainnet. This is important because, by default, the Arcana Auth SDK uses 'testnet' as the default <code>network</code> value.</p> </li> <li> <p>Upgrade your Arcana Auth SDK to v1.0.1 and you are good to go. </p> </li> </ol>"},{"location":"migration/main-auth-v1.0.1-migration/#example-deploy-on-testnet","title":"Example: Deploy on Testnet","text":"<p>If you have not already registered, only then register your app using the Arcana Developer Dashboard. By default, the 'Testnet' configuration profile is created. You can provide the social provider settings as per your user onboarding requirements. Save the Client ID assigned to your app displayed on the top right of the dashboard screen. This will be required during integration with the Arcana Auth SDK as shown below:</p> <pre><code>import {AuthProvider} from \"@arcana/auth\";\n\nconst provider = new AuthProvider(\n  \"xar_test_87f34a9c7879cd4b726ba36a99e164837d70143a\", {  // testnet Client ID\n  // network: 'testnet',  // optional\n  chainConfig: {\n    chainId: '80002',      // selected chain in the wallet network dropdown UI\n    rpcUrl: 'https://rpc.ankr.com/polygon_amoy',  // RPC URL of the selected chain in the wallet network dropdown UI\n  },\n  alwaysVisible: true,\n  setWindowProvider: true,\n  debug: true,\n  position: 'right',\n  theme: 'dark',\n});\n</code></pre> <p>Once a user authenticates, the following wallet UI is displayed when the app is deployed on the Arcana Testnet.</p> Testnet Wallet"},{"location":"migration/main-auth-v1.0.1-migration/#example-deploy-on-mainnet","title":"Example: Deploy on Mainnet","text":"<p>If you have not already registered your app using theArcana Developer Dashboard , only then register it. By default, the 'Testnet' configuration profile is created and associated with a 'Testnet' Client ID. If you want to deploy on the Arcana  Mainnet, then make sure you create a 'Mainnet' profile using the Arcana Developer Dashboard. Save the Client ID assigned to your app for the 'Mainnet' configuration. It is displayed on the top right of the dashboard screen when you select 'Mainnet' from the dropdown or when you click on the 'Mainnet' button displayed on the app card in the Manage Apps screen.</p> <p>In the app integration code, use the <code>Mainnet</code> Client ID and specify the <code>network</code> parameter as 'mainnet' while instantiating the <code>AuthProvider</code> as shown below:</p> <pre><code>import {AuthProvider} from \"@arcana/auth\";\n\nconst provider = new AuthProvider(\n  \"xar_live_d7c88d9b033d100e4200d21a5c4897b896e60063\", {  //mainnet Client ID\n  // network: 'mainnet',  // optional\n  chainConfig: {\n    chainId: '137',      // selected chain in the wallet network dropdown UI\n    rpcUrl: 'https://polygon-rpc.com/',  // RPC URL of the selected chain in the wallet network dropdown UI\n  },\n  alwaysVisible: true,\n  setWindowProvider: true,\n  debug: true,\n  position: 'right',\n  theme: 'dark',\n});\n</code></pre> <p>Once a user authenticates, the following wallet UI is displayed when the app is deployed on the Arcana Mainnet.</p> Mainnet Wallet"},{"location":"migration/main-auth-v1.0.1-migration/#whats-new","title":"What's New?","text":"<p>This release has no new features.</p> <p>For more details about this release, see Arcana Auth SDK v1.0.1 release notes for details.</p>"},{"location":"migration/main-auth-v1.0.10-migration/","title":"Arcana Auth SDK v1.0.9 -&gt; v1.0.10 Migration","text":"<p>New to Arcana Network? Visit see Arcana Auth SDK Quick Start Guides to get started. </p> <p>Using an older version and want to migrate? Read on...</p>"},{"location":"migration/main-auth-v1.0.10-migration/#what-has-changed","title":"What has Changed?","text":"<p>In this release there are no usage changes from the previous version of the SDK.</p> <p>This new release includes support for Web3 gaming apps based on the Unity framework, support for MultiversX chain in the Arcana wallet, and minor bug fixes.</p>"},{"location":"migration/main-auth-v1.0.10-migration/#how-to-migrate-to-v1010","title":"How to Migrate to v1.0.10?","text":"<p>Install the latest Arcana Auth SDK v1.0.10. No integration code updates are required for the features in the previous release.  </p>"},{"location":"migration/main-auth-v1.0.10-migration/#multiversx-support","title":"MultiversX Support","text":"<p>If you wish to use this new release and add support for MultiversX in your app, there may be some changes related to the configuration of MultiversX as the default chain in the dashboard. Note that the supported Web3 wallet operations for the MultiversX chain are different from those for the EVM-compatible chains. See  MultiversX Quick Start Guide for more details.</p> <p>That's all!</p>"},{"location":"migration/main-auth-v1.0.11-migration/","title":"Arcana Auth SDK v1.0.10 -&gt; v1.0.11 Migration","text":"<p>New to Arcana Network? Get started with the Arcana Auth SDK Quick Start Guides. </p> <p>Using an older version and want to migrate? Read on...</p>"},{"location":"migration/main-auth-v1.0.11-migration/#what-has-changed","title":"What has Changed?","text":"<p>In this release there are no usage changes from the previous version of the SDK.</p> <p>This new release includes support for Custom Auth and wallet UI features for off-ramping crypto to fiat.</p>"},{"location":"migration/main-auth-v1.0.11-migration/#how-to-migrate-to-v1011","title":"How to Migrate to v1.0.11?","text":"<p>Install and upgrade to the latest Arcana Auth SDK v1.0.11. No integration code updates are required for the features in the previous release.  </p> <p>If you plan on using the Custom Auth or wallet off-ramping feature, check out the following documentation updates:</p> <ul> <li>What is Custom Auth?</li> <li>How to configure Custom Auth feature usage via the Arcana Developer Dashboard?</li> <li>How to integrate an app that uses custom user authentication and enable Arcana Auth SDK and signing of blockchain transactions for authenticated users?</li> <li>How to buy/sell crypto when using Arcana wallet? </li> </ul> <p>That's all!</p>"},{"location":"migration/main-auth-v1.0.12-migration/","title":"Arcana Auth SDK v1.0.11 -&gt; v1.0.12 Migration","text":"<p>New to Arcana Network? Get started with the Arcana Auth SDK Quick Start Guides. </p> <p>Using an older version and want to migrate? Read on...</p>"},{"location":"migration/main-auth-v1.0.12-migration/#what-has-changed","title":"What has Changed?","text":"<p>If you are already using the SDK, there are no usage changes in this release.</p> <p>This new release includes support for Custom Auth and wallet UI features for off-ramping crypto to fiat.</p>"},{"location":"migration/main-auth-v1.0.12-migration/#how-to-migrate-to-v1012","title":"How to Migrate to v1.0.12?","text":"<p>Install and upgrade to the latest Arcana Auth SDK v1.0.12. No integration code updates are required for the features in the previous release.  </p> <p>If you plan on using the Passkeys, check out the section about Passkeys and how to onboard users via passkeys in apps integrated with the Arcana Auth SDK. See how to set up user onboarding via Telegram, Apple in the setup section of the documentation. Then refer to the usage section for how to install the SDK, integrate app and onboard users depending upon the app type.</p> <p>That's all!</p>"},{"location":"migration/main-auth-v1.0.2-migration/","title":"Arcana Auth SDK v1.0.1 -&gt; v1.0.2 Migration","text":"<p>This guide is meant for developers who have already integrated apps with an older version of the Arcana Auth SDK and run them using Arcana Testnet. </p> <p>If you are new to Arcana Network, see Arcana Auth SDK Quick Start Guides to get started.</p> <p>When you migrate from using the Arcana Auth SDK  v1.0.1 to the latest v1.0.2 release, there is no major update besides minor bug fixes and wallet UI updates.</p>"},{"location":"migration/main-auth-v1.0.2-migration/#what-has-changed","title":"What has Changed?","text":"<p>The following section lists changes between Arcana Auth SDK v1.0.1 and v1.0.2. </p>"},{"location":"migration/main-auth-v1.0.2-migration/#arcana-developer-dashboard","title":"Arcana Developer Dashboard","text":"<p>App Address is now referred to as Client ID in the dashboard. The format of the unique identifier associated with all registered apps has changed. </p>"},{"location":"migration/main-auth-v1.0.2-migration/#arcana-auth-sdk","title":"Arcana Auth SDK","text":"<ul> <li>Arcana wallet  now supports fiat/on-ramp feature that allows users to buy cryptocurrency and tokens.</li> <li>The wallet UI has a new minimized widget.</li> <li>A bug in the previous release allowed users to log into a different app using the same tab where they had logged in without having to explicitly log in to a different app in the same tab. This is now fixed. For details, see the release notes.</li> </ul>"},{"location":"migration/main-auth-v1.0.2-migration/#how-to-migrate-to-v102","title":"How to Migrate to v1.0.2?","text":"<p>Upgrade the Arcana Auth SDK to the latest package v1.0.2. No other change is required. You do not need to re-register your apps via the dashboard. Developers can continue to use the old App Address obtained for using v1.0.0/v1.0.1 with the latest Arcana Auth SDK.  However, if you re-register your app and get a new Client ID, you cannot use older versions of the Arcana Auth SDK  and are required to migrate to the latest Arcana Auth SDK v1.0.2 or higher.</p> <p>Client ID</p> <p>Earlier, the documentation may have referred to the unique Arcana identifier assigned to each app after registration as App Address.  In the latest release, we refer to it as Client ID. </p>"},{"location":"migration/main-auth-v1.0.2-migration/#whats-new","title":"What's New?","text":"<p>See Arcana Auth SDK v1.0.2 release notes for details.</p>"},{"location":"migration/main-auth-v1.0.3-migration/","title":"Arcana Auth SDK v1.0.2 -&gt; v1.0.3 Migration","text":"<p>This guide is meant for developers who have already integrated apps with an older version of the Arcana Auth SDK and run them using Arcana Testnet. </p> <p>If you are new to Arcana Network, see Arcana Auth SDK Quick Start Guides to get started.</p> <p>When you migrate from using the Arcana Auth SDK v1.0.2 to the latest v1.0.3 release, there is no breaking change.  </p>"},{"location":"migration/main-auth-v1.0.3-migration/#what-has-changed","title":"What has Changed?","text":"<p>No Usage Changes.</p>"},{"location":"migration/main-auth-v1.0.3-migration/#how-to-migrate-to-v103","title":"How to Migrate to v1.0.3?","text":"<p>Upgrade the Arcana Auth SDK from v1.0.2 to v1.0.3 and re-run your Web3 app.</p>"},{"location":"migration/main-auth-v1.0.3-migration/#whats-new","title":"What's New?","text":"<p>See Arcana Auth SDK v1.0.3 release notes for details.</p>"},{"location":"migration/main-auth-v1.0.4-migration/","title":"Arcana Auth SDK v1.0.3 -&gt; v1.0.4 Migration","text":"<p>This guide is meant for developers who have already integrated apps with v1.0.3 of the Arcana Auth SDK and deploy them using Arcana Testnet or Mainnet. </p> <p>If you are new to Arcana Network, see Arcana Auth SDK Quick Start Guides to get started.</p>"},{"location":"migration/main-auth-v1.0.4-migration/#backward-compatibility","title":"Backward Compatibility","text":"<p>The latest release of the Arcana Auth SDK does not cause any breaking changes for most of the Web3 apps that may have integrated with the earlier release v1.0.3 of the Arcana Auth SDK. Those apps should continue to work with no changes to the app code. Some changes are required in the Arcana Developer Dashboard settings to ensure smooth operation. If the app has explicitly specified a default chain via the <code>chainConfig</code> option in the <code>AuthProvider</code> then make sure the chain appears in the list of blockchains configured in the Arcana Developer Dashboard. If the chain does not show up, it can be manually added via the chain management configuration settings in the dashboard. See the chain management section below for details.</p>"},{"location":"migration/main-auth-v1.0.4-migration/#same-wallet-address","title":"Same Wallet Address","text":"<p>Apps using Arcana Auth SDK v1.0.3 or the latest v1.0.4 should see no change in the user wallet address. This is true for all types of apps and supported frameworks, irrespective of whether they are using the global or app-specific keys. Apps deployed earlier will continue to work on the Arcana Testnet and Mainnet. </p>"},{"location":"migration/main-auth-v1.0.4-migration/#new-release-what-has-changed","title":"New Release: What has Changed?","text":""},{"location":"migration/main-auth-v1.0.4-migration/#wagmi-or-rainbowkit-apps","title":"Wagmi or RainbowKit Apps","text":"<p>Earlier, apps using <code>auth-wagmi</code> package v0.0.4 were not required to install the <code>auth</code> package v1.0.3 but this has changed in the current release.</p> <p>Now Wagmi / RainbowKit Apps need to install both the packages and then as part of integrating with the Arcana Auth SDK, first create <code>AuthProvider</code> using the Client ID. Then use the <code>AuthProvider</code> to create the <code>ArcanaConnector</code>. </p> <p>For details, see how to onboard users in Web3 apps using  Wagmi or  RainbowKit wallet connectors.</p>"},{"location":"migration/main-auth-v1.0.4-migration/#chain-management","title":"Chain Management","text":"<p>The latest release allows developers more flexibility as they can configure blockchains displayed in the Arcana wallet dropdown list and set one of them as the default chain by either using the Arcana Developer Dashboard or programmatically through <code>chainConfig</code> setting and JSON-RPC calls to add and switch chains. </p> <p>Earlier, developers could programmatically manage chains only via the add/switch chain functions and the default chain setting was done via the <code>chainConfig</code> option of the <code>AuthProvider</code>. Now this can also be managed using the dashboard. For details, see  how to configure chain settings for the wallet via the dashboard. </p> <p>In the latest release v1.0.4, developers can use the Arcana Developer Dashboard to configure blockchains and specify a default chain. Later, in the app integration code, they can override the default chain programmatically using the <code>chainConfig</code> parameter. The default chain configuration setting in the Arcana Developer Dashboard can be overridden with the <code>chainConfig</code> option while instantiating the <code>AuthProvider</code> only if the default chain selected in the <code>chainConfig</code> option is present in the list of chains configured through the Arcana Developer Dashboard. If the selected chain is not part of the Arcana Developer Dashboard blockchain settings then the default chain configured in the Arcana Developer Dashboard setting takes precedence and is displayed in the wallet UI. The rest of the dashboard configured ones show in the dropdown list.</p> Chain Configuration Example <p>Example I</p> <p>Dashboard setting for App A:  <code>Polygon, Ethereum, Shardeum, Arbitrum (default selection)</code></p> <p><code>chainConfig</code> option in the <code>AuthProvider</code>: <code>Shardeum</code></p> <p>In this case, the Arcana wallet UI will display <code>Shardeum</code> as the default and other chains in the dropdown list as Polygon, Ethereum, and Arbitrum. </p> <p>Example II</p> <p>Dashboard setting for App A:  <code>Polygon, Ethereum, Shardeum, Arbitrum (default selection)</code></p> <p><code>chainConfig</code> option in the <code>AuthProvider</code>: <code>Avalanche</code></p> <p>In this case, the Arcana wallet UI will display <code>Arbitrum</code> as the default and other chains in the dropdown list as Polygon, Ethereum, and Shardeum. </p>"},{"location":"migration/main-auth-v1.0.4-migration/#transaction-summary-view","title":"Transaction Summary View","text":"<p>When a blockchain transaction is triggered either by the app programmatically or via a wallet user action, a transaction notification pops up in the wallet context displaying the transaction summary along with the option to approve or reject the request. Only when the user clicks 'v' icon on the top right, the notification details are displayed. Earlier, the notification details were displayed by default.</p>"},{"location":"migration/main-auth-v1.0.4-migration/#how-to-migrate-to-v104","title":"How to Migrate to v1.0.4?","text":"<p>We highly recommend that Web3 apps that are integrated with v1.0.3 releases of the Arcana Auth SDK migrate to the latest Arcana Auth SDK v1.0.4 release.</p> <p>For vanilla HTML/CSS/JS apps or React apps that do not use <code>window.ethereum</code> setting, no code changes are required. Just install and upgrade to the latest v1.0.4 release and redeploy the app. </p> <p>However, if the apps use <code>window.ethereum</code> browser setting or wallet connectors such as Wagmi or RainbowKit then migrating to the latest release may require some integration code changes. In the case of Wagmi or RainbowKit apps, it requires not only upgrading the <code>auth-wagmi</code> package but also installing an additional SDK package and some new code to use the SDK.  </p>"},{"location":"migration/main-auth-v1.0.4-migration/#apps-using-windowsethereum","title":"Apps using <code>windows.ethereum</code>","text":"<p>Previously, Web3 desktop apps could integrate with the Arcana Auth SDK and directly access the standard EIP-1193 Ethereum provider via <code>window.ethereum</code> in the web browser. In the latest release of the Arcana Auth SDK, <code>window.ethereum</code> is not automatically set to the provider. To enable this feature, specify <code>setWindowProvider=true</code> when creating the <code>AuthProvider</code>.</p> <p>For details, see Arcana Auth SDK Usage Guide.</p>"},{"location":"migration/main-auth-v1.0.4-migration/#apps-using-chain-enum","title":"Apps using <code>CHAIN</code> enum","text":"<p>If you are upgrading any app that is using <code>CHAIN</code> enum in the <code>chainConfig</code> option of the <code>AuthProvider</code> to v1.0.4, then there is a breaking change. </p> <p>Update the integration code to not use the <code>CHAIN</code> enum as it is no longer supported. Instead, use the chain identifier of the chain that you are specifying in the <code>chainConfig</code> parameter. For example:</p> <pre><code>const auth = new AuthProvider('xar_test_87f34xxxxxxxxxxxxxxxxxxxxxxxxxxx\u00df7d70143a', {\n  network: \"testnet\", //defaults to 'testnet'\n  position: \"right\", //defaults to right\n  theme: \"dark\", //defaults to dark\n  alwaysVisible: true, //defaults to true which is Full UI mode\n  chainConfig: {\n    chainId: \"80002\", //defaults to Ethereum \n    rpcUrl: \"https://rpc.ankr.com/polygon_amoy\" //defaults to 'https://rpc.ankr.com/eth'\n  }\n});\n</code></pre>"},{"location":"migration/main-auth-v1.0.4-migration/#wagmi-or-rainbowkit-apps_1","title":"Wagmi or RainbowKit Apps","text":"<p>For Wagmi or RainbowKit Apps, see how to onboard users in Web3 apps using  Wagmi or  RainbowKit wallet connectors. </p>"},{"location":"migration/main-auth-v1.0.4-migration/#apps-using-chainconfig-setting-in-authprovider","title":"Apps using <code>chainConfig</code> setting in <code>AuthProvider</code>","text":"<p>Apps using the <code>chainConfig</code> setting to set the default chain in the Arcana wallet dropdown list must ensure that it is included in the list of configured blockchains in the Arcana Developer Dashboard. The <code>chainConfig</code> parameter in the <code>AuthProvider</code> setting will only work if the chain is part of the configured chains in the Arcana Developer Dashboard. Otherwise, the wallet user may see a different default chain according to the Arcana Developer Dashboard settings. To ensure the <code>chainConfig</code> setting takes effect, the specified chain can be manually added through the Arcana Developer Dashboard interface. For details, see the chain management section above and refer to the list of supported chains for the wallet.</p>"},{"location":"migration/main-auth-v1.0.4-migration/#whats-new","title":"What's New?","text":"<p>See Arcana Auth SDK v1.0.4 release notes for details.</p>"},{"location":"migration/main-auth-v1.0.5-migration/","title":"Arcana Auth SDK v1.0.4 -&gt; v1.0.5 Migration","text":"<p>This guide is meant for developers who have already integrated apps with v1.0.4 of the Arcana Auth SDK and deploy them using Arcana Testnet or Mainnet. </p> <p>If you are new to Arcana Network, see Arcana Auth SDK Quick Start Guides to get started.</p>"},{"location":"migration/main-auth-v1.0.5-migration/#backward-compatibility","title":"Backward Compatibility","text":"<p>The latest release of the Arcana Auth SDK does not cause any breaking changes for apps that have already integrated with v1.0.4 of the Arcana Auth SDK. Install the latest version and upgrade your app. </p>"},{"location":"migration/main-auth-v1.0.5-migration/#same-wallet-address","title":"Same Wallet Address","text":"<p>Apps using Arcana Auth SDK v1.0.4 should see no change in the user wallet address irrespective of whether they continue to use the older version on upgrade to v1.0.5 release. This is true for all types of apps and supported frameworks, irrespective of whether they are using the global or app-specific keys. Apps deployed earlier will continue to work on the Arcana Testnet and Mainnet. </p>"},{"location":"migration/main-auth-v1.0.5-migration/#new-release-what-has-changed","title":"New Release: What has Changed?","text":"<p>The latest SDK release has no usage changes in the former features. New features have been added that allow user onboarding via Steam and Firebase.</p>"},{"location":"migration/main-auth-v1.0.5-migration/#how-to-migrate-to-v105","title":"How to Migrate to v1.0.5?","text":"<p>We highly recommend that Web3 apps that are integrated with v1.0.4 releases of the Arcana Auth SDK migrate to the latest Arcana Auth SDK v1.0.5 release.</p> <p>Install the latest Arcana Auth SDK v1.0.5 release and upgrade your app. No other integration code changes are required.</p> <p>Apps using older versions of the Arcana Auth SDK must refer to the migration guides and upgrade to the latest release if they wish to enable Steam of Firebase user onboarding.</p>"},{"location":"migration/main-auth-v1.0.5-migration/#whats-new","title":"What's New?","text":"<p>See Arcana Auth SDK v1.0.5 release notes for details.</p>"},{"location":"migration/main-auth-v1.0.6-migration/","title":"Arcana Auth SDK v1.0.5 -&gt; v1.0.6 Migration","text":"<p>This guide is meant for developers who have already integrated apps with v1.0.5 of the Arcana Auth SDK and deploy them using Arcana Testnet or Mainnet.</p> <p>If you are new to Arcana Network, see Arcana Auth SDK Quick Start Guides to get started.</p>"},{"location":"migration/main-auth-v1.0.6-migration/#backward-compatibility","title":"Backward Compatibility","text":"<p>The latest release of the Arcana Auth SDK does not cause any breaking changes for apps that have already integrated with v1.0.4 of the Arcana Auth SDK. Install the latest version and upgrade your app. </p>"},{"location":"migration/main-auth-v1.0.6-migration/#same-wallet-address","title":"Same Wallet Address","text":"<p>Apps using Arcana Auth SDK v1.0.5 should see no change in the user wallet address irrespective of whether they continue to use the older version on the upgrade to the v1.0.6 release. This is true for all types of apps and supported frameworks, irrespective of whether they are using the global or app-specific keys. Apps deployed earlier will continue to work on the Arcana Testnet and Mainnet. </p>"},{"location":"migration/main-auth-v1.0.6-migration/#new-release-what-has-changed","title":"New Release: What has Changed?","text":"<p>The latest SDK release has no usage changes in the former features. New features have been added that allow user onboarding via Steam and Firebase.</p>"},{"location":"migration/main-auth-v1.0.6-migration/#how-to-migrate-to-v106","title":"How to Migrate to v1.0.6?","text":"<p>We highly recommend that Web3 apps that are integrated with v1.0.5 releases of the Arcana Auth SDK migrate to the latest Arcana Auth SDK v1.0.6 release.</p> <p>Install the latest Arcana Auth SDK v1.0.6 release and upgrade your app. No other integration code changes are required.</p> <p>Apps using older versions of the Arcana Auth SDK must refer to the migration guides and upgrade to the latest release if they wish to enable Steam of Firebase user onboarding.</p>"},{"location":"migration/main-auth-v1.0.6-migration/#whats-new","title":"What's New?","text":"<p>See Arcana Auth SDK v1.0.6 release notes for details.</p>"},{"location":"migration/main-auth-v1.0.7-migration/","title":"Arcana Auth SDK v1.0.6 -&gt; v1.0.7 Migration","text":"<p>This guide is meant for developers who have already integrated apps with v1.0.6 of the Arcana Auth SDK and deploy them using Arcana Testnet or Mainnet.</p> <p>If you are new to Arcana Network, see Arcana Auth SDK Quick Start Guides to get started.</p>"},{"location":"migration/main-auth-v1.0.7-migration/#backward-compatibility","title":"Backward Compatibility","text":"<p>The latest release of the Arcana Auth SDK does not cause any breaking changes for apps that have already integrated with v1.0.6 of the Arcana Auth SDK. Install the latest version and upgrade your app.</p>"},{"location":"migration/main-auth-v1.0.7-migration/#same-wallet-address","title":"Same Wallet Address","text":"<p>Apps using Arcana Auth SDK v1.0.6 should see no change in the user wallet address irrespective of whether they continue to use the older version on the upgrade to the v1.0.7 release. This is true for all types of apps and supported frameworks, irrespective of whether they are using the global or app-specific keys. Apps deployed earlier will continue to work on the Arcana Testnet and Mainnet. </p>"},{"location":"migration/main-auth-v1.0.7-migration/#new-release-what-has-changed","title":"New Release: What has Changed?","text":"<p>Besides a few enhancements Arcana wallet UI and bug fixes, there are no usage changes in the latest release.</p>"},{"location":"migration/main-auth-v1.0.7-migration/#how-to-migrate-to-v107","title":"How to Migrate to v1.0.7?","text":"<p>We highly recommend that Web3 apps that are integrated with v1.0.6 releases of the Arcana Auth SDK migrate to the latest Arcana Auth SDK v1.0.7 release.</p> <p>Install the latest Arcana Auth SDK v1.0.7 release and upgrade your app. No other integration code changes are required.</p> <p>Apps using older versions of the Arcana Auth SDK must refer to the migration guides and upgrade to the latest release if they wish to enable Steam of Firebase user onboarding.</p>"},{"location":"migration/main-auth-v1.0.7-migration/#whats-new","title":"What's New?","text":"<p>See Arcana Auth SDK v1.0.7 release notes for details.</p>"},{"location":"migration/main-auth-v1.0.8-migration/","title":"Arcana Auth SDK v1.0.7 -&gt; v1.0.8 Migration","text":"<p>This guide is meant for developers who have already integrated apps with v1.0.7 of the Arcana Auth SDK and deploy them using Arcana Testnet or Mainnet.</p> <p>If you are new to Arcana Network, see Arcana Auth SDK Quick Start Guides to get started.</p>"},{"location":"migration/main-auth-v1.0.8-migration/#backward-compatibility","title":"Backward Compatibility","text":"<p>The latest release of the Arcana Auth SDK does not cause any breaking changes for apps that have already integrated with v1.0.7 of the Arcana Auth SDK. Install the latest version and upgrade your app.</p>"},{"location":"migration/main-auth-v1.0.8-migration/#same-wallet-address","title":"Same Wallet Address","text":"<p>Apps using Arcana Auth SDK v1.0.7 should see no change in the user wallet address irrespective of whether they continue to use the older version on the upgrade to the v1.0.8 release. This is true for all types of apps and supported frameworks, irrespective of whether they are using the global or app-specific keys. Apps deployed earlier will continue to work on the Arcana Testnet and Mainnet. </p>"},{"location":"migration/main-auth-v1.0.8-migration/#new-release-what-has-changed","title":"New Release: What has Changed?","text":"<p>Arcana Auth SDK release has no major changes, a few enhancements and a bug fix for email validation. Usage has not changed in the latest release. For details, see Arcana Auth SDK v1.0.8 release notes.</p>"},{"location":"migration/main-auth-v1.0.8-migration/#how-to-migrate-to-v108","title":"How to Migrate to v1.0.8?","text":"<p>We highly recommend that Web3 apps that are integrated with v1.0.7 releases of the Arcana Auth SDK migrate to the latest Arcana Auth SDK v1.0.8 release.</p> <p>Install the latest Arcana Auth SDK v1.0.8 release and upgrade your app. No other integration code changes are required.</p> <p>Apps using older versions of the Arcana Auth SDK must refer to the migration guides and upgrade to the latest release if they wish to enable Steam of Firebase user onboarding.</p>"},{"location":"migration/main-auth-v1.0.8-migration/#whats-new","title":"What's New?","text":"<p>See Arcana Auth SDK v1.0.8 release notes for details.</p>"},{"location":"migration/main-auth-v1.0.9-migration/","title":"Arcana Auth SDK v1.0.8 -&gt; v1.0.9 Migration","text":"<p>New to Arcana Network? see Arcana Auth SDK Quick Start Guides to get started. </p> <p>Using an older version and want to migrate? Read on...</p>"},{"location":"migration/main-auth-v1.0.9-migration/#what-has-changed","title":"What has Changed?","text":"<p>This is a major release of the Arcana Auth SDK since the last release. The updates include:</p> <ul> <li>Arcana Auth SDK</li> <li>Global Keys feature does not require setting up social logins via the social provider's console</li> <li> <p>Enhanced security to block clickjacking</p> </li> <li> <p>New auth-core SDK allows greater customization flexibility with custom Wallet UI</p> </li> </ul>"},{"location":"migration/main-auth-v1.0.9-migration/#global-keys","title":"Global Keys","text":"<p>Web3 apps using the app-specific keys (default) keyspace do not have to make any changes.</p> <p>If the app developer selects  global keys while configuring the app via the Arcana Developer Dashboard, the social auth settings for enabling the social login providers are no longer required.</p> <p>For details, see Arcana Auth SDK v1.0.9 release notes.</p>"},{"location":"migration/main-auth-v1.0.9-migration/#backward-compatibility","title":"Backward Compatibility","text":"<p>The latest release of the Arcana Auth SDK does not cause any breaking changes for apps integrated with v1.0.11 of the Arcana Auth SDK. Install the latest version and upgrade.</p> <p>Apps using older versions of the Arcana Auth SDK must refer to the migration guides and upgrade to the latest release if they wish to enable Steam of Firebase user onboarding.</p>"},{"location":"migration/main-auth-v1.0.9-migration/#same-wallet-address","title":"Same Wallet Address","text":"<p>Apps migrating to the Arcana Auth SDK v1.0.11 should see no change in the user wallet address, irrespective of whether they continue to use the older version or upgrade to this latest release. This is true for all types of apps and supported frameworks, irrespective of whether they are using the global or app-specific keys. Apps deployed earlier will continue to work on the Arcana Testnet and Mainnet. </p>"},{"location":"migration/main-auth-v1.0.9-migration/#how-to-migrate-to-v109","title":"How to Migrate to v1.0.9?","text":"<p>Install the latest Arcana Auth SDK v1.0.9 and upgrade your app with no changes to the integration code.</p> <p>That's all!</p>"},{"location":"migration/archives/","title":"Migration Guide Archives","text":"<p>Always use the latest Arcana Auth SDK.</p> <p>For those using an older version of the SDK, refer to the appropriate migration guide:</p> Auth SDK <p>  Auth SDK v1.0.11 -&gt; v1.0.12</p> <p>  Auth SDK v1.0.10 -&gt; v1.0.11</p> <p>  Auth SDK v1.0.9 -&gt; v1.0.10</p> <p>  Auth SDK v1.0.8 -&gt; v1.0.9</p> <p>  Auth SDK v1.0.7 -&gt; v1.0.8</p> <p>  Auth SDK v1.0.6 -&gt; v1.0.7</p> <p>  Auth SDK v1.0.5 -&gt; v1.0.6</p> <p>  Auth SDK v1.0.4 -&gt; v1.0.5</p> <p>  Auth SDK v1.0.3 -&gt; v1.0.4</p> <p>  Auth SDK v1.0.2 -&gt; v1.0.3</p> <p>  Auth SDK v1.0.1 -&gt; v1.0.2</p> <p>  Auth SDK v1.0.0 -&gt; v1.0.1</p> <p>  Auth SDK v0.3.0 -&gt; v1.0.0</p> <p>  Auth SDK v0.2.x -&gt; v0.3.0</p>"},{"location":"partner-docs/auth/","title":"Auth: Partner Docs","text":"<ul> <li> <p> MultiversX</p> <ul> <li>Arcana Auth on MultiversX</li> </ul> </li> <li> <p> Linea</p> <ul> <li>Social Login with Arcana</li> </ul> </li> <li> <p> Caduceus</p> <ul> <li>Social Login with Arcana</li> </ul> </li> <li> <p> Peaq</p> <ul> <li>Social Login with Arcana</li> </ul> </li> </ul>"},{"location":"partner-docs/ca/","title":"CA: Partner Docs","text":"<ul> <li> <p> Linea</p> <ul> <li>Cross-Chain with Arcana</li> </ul> </li> </ul>"},{"location":"quick-start/auth-ca-wagmi-quick-start/","title":"Get Started: Auth+CA","text":"<p>Follow this guide to onboard users in a Web3 app via social login and enable chain abstracted transactions. It explains how Web3 apps built using the Wagmi library can integrate with the Arcana SDKs for social login and chain abstraction. </p> Arcana Auth Wagmi SDKArcana CA Wagmi SDK <ul> <li> <p>Integrate with the Arcana Auth Wagmi SDK to enable user onboarding via social login in Web3 apps. </p> </li> <li> <p>Once authenticated, users can instantly access the in-app, built-in Arcana wallet to sign blockchain transactions.</p> </li> </ul> <ul> <li>Integrate with the Arcana CA Wagmi SDK and let users spend on any chain with unified balance. </li> <li>The SDK implements Wagmi <code>useSendTransaction</code> and <code>useWriteContract</code> hooks so that the Web3 apps can seamlessly switch to using these same hooks from the Arcana CA Wagmi SDK for enabling chain abstracted transactions. </li> <li>It offers additional hooks to enable unified balance: <code>useBalance</code>, <code>useBalanceModal</code>.</li> <li>The <code>useCAFn</code> hook allows chain abstracted <code>bridge</code> and <code>transfer</code> functionality for supported chains and tokens.</li> </ul> <p>No Fuel support in <code>ca-wagmi</code> SDK</p> <p>The Arcana CA Wagmi SDK doesn't support Fuel blockchain yet. Chain abstraction works for other supported chains and tokens in Wagmi-based Web3 apps.</p>"},{"location":"quick-start/auth-ca-wagmi-quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before installing and integrating with the Arcana Auth Wagmi SDK, developers need to configure the authentication settings.</p> <ul> <li>App must be registered via the Arcana Developer Dashboard: https://dashboard.arcana.network </li> <li>Optionally configure auth settings such as social login,  wallet user experience, etc.</li> </ul>"},{"location":"quick-start/auth-ca-wagmi-quick-start/#1-install","title":"1. Install","text":"<p>Download the Arcana Auth Wagmi SDK and install it as a dependency for Web3 app:</p> npmyarn <p>Wagmi 2.0</p> <pre><code>npm install --save @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>npm install --save @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre> <p>Wagmi 2.0</p> <pre><code>yarn add @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>yarn add @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre> <p>Download the Arcana CA Wagmi SDK and install it as a dependency for Web3 app:</p> <pre><code>npm install --save @arcana/ca-sdk @arcana/ca-wagmi\n</code></pre>"},{"location":"quick-start/auth-ca-wagmi-quick-start/#2-integrate","title":"2. Integrate","text":"<p>The Web3 app must add code to integrate the social login and chain abstraction features offered by the respective Arcana SDKs.</p>"},{"location":"quick-start/auth-ca-wagmi-quick-start/#social-login","title":"Social Login","text":"<p>To enable social login, you need to integrate with the Arcana Auth SDK and add code to create the <code>AuthProvider</code>. Use it to onboard Web3 app users via the configured Arcana Wagmi connector. Once authenticated, the users can automatically access the built-in, in-app Arcana wallet and sign blockchain transactions.</p>"},{"location":"quick-start/auth-ca-wagmi-quick-start/#authprovider","title":"AuthProvider","text":"<pre><code>import { AuthProvider } from \"@arcana/auth\";\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\"\n\nconst auth = new AuthProvider('your-client-id');\n\nconst connector = new ArcanaConnector({ auth });\n</code></pre> Wagmi 2.0Wagmi 1.0 <pre><code>//\n// For apps using Wagmi versions v2.a.b and auth-wagmi v3.x.y\n//\n\nimport { http, createConfig } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\nimport { coinbaseWallet, injected, walletConnect } from 'wagmi/connectors'\nimport { AuthProvider } from '@arcana/auth'\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\"\n\nlet auth: AuthProvider | null;\n\nif (!auth) {\n  auth = new AuthProvider(\n    \"Your-app-Client-ID\"\n  );\n}\n\nconst connector = new ArcanaConnector({ auth });\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [\n    injected(),\n    coinbaseWallet({ appName: 'Create Wagmi' }),\n    walletConnect({ projectId: import.meta.env.VITE_WC_PROJECT_ID }),\n    connector(),\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n\ndeclare module 'wagmi' {\n  interface Register {\n    config: typeof config\n  }\n}\n...\n</code></pre> <pre><code>//   \n// For apps using Wagmi versions v1.x.y and auth-wagmi v2.a.b\n//\n\nimport { configureChains, createConfig, WagmiConfig } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { polygon, polygonAmoy } from \"wagmi/chains\";\nimport { useAccount, useConnect, useDisconnect, useBalance } from 'wagmi'\nimport \"../styles/globals.css\";\nimport { AuthProvider } from '@arcana/auth'\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\"\n\nlet auth: AuthProvider | null;\n\nif (!auth) {\n  auth = new AuthProvider(\n    \"Your-app-Client-ID\"\n  );\n}\n\nconst { chains, provider, webSocketProvider } = configureChains(\n  [mainnet, polygon, polygonAmoy],\n  [publicProvider()],\n  { targetQuorum: 1 }\n);\n\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: auth,\n    },\n  });\n};\n\nconst { chains, publicClient } = configureChains(\n  [polygon, polygonAmoy],\n  [publicProvider()]\n);\n\nexport const wagmiEntity = createConfig({\n  autoConnect: true,\n  connectors: [connector(chains)],\n  publicClient,\n});\n...\n</code></pre>"},{"location":"quick-start/auth-ca-wagmi-quick-start/#onboard-users","title":"Onboard Users","text":"Wagmi 2.0Wagmi 1.0 <pre><code>//\n// For apps using Wagmi versions v2.a.b and auth-wagmi v3.x.y\n//\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { Buffer } from 'buffer'\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { WagmiProvider } from 'wagmi'\n\nimport App from './App.tsx'\nimport { config } from './wagmi.ts'\n\nimport './index.css'\n\nglobalThis.Buffer = Buffer\n\nconst queryClient = new QueryClient()\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  &lt;React.StrictMode&gt;\n    &lt;WagmiProvider config={config}&gt;\n      &lt;QueryClientProvider client={queryClient}&gt;\n        &lt;App /&gt;\n      &lt;/QueryClientProvider&gt;\n    &lt;/WagmiProvider&gt;\n  &lt;/React.StrictMode&gt;,\n)\n</code></pre> <pre><code>//\n// For apps using Wagmi versions v1.a.b and auth-wagmi v2.x.y\n//\nfunction App({ Component, pageProps }: AppProps) {\n  return (\n    &lt;WagmiConfig config={wagmiEntity}&gt;\n      &lt;Component {...pageProps} /&gt;\n    &lt;/WagmiConfig&gt;\n  );\n}\n</code></pre>"},{"location":"quick-start/auth-ca-wagmi-quick-start/#sign-transactions","title":"Sign Transactions","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p> <p>That's all! </p> <p>The Auth-CA-Wagmi app is ready to onboard users and allow them to sign blockchain transactions.</p> <p>For details, see Auth Wagmi SDK Reference.</p> <p>Next, you need to integrate the Web3 app with the Arcana CA Wagmi SDK to enable chain abstracted transactions via unified balance.</p>"},{"location":"quick-start/auth-ca-wagmi-quick-start/#chain-abstraction","title":"Chain Abstraction","text":"<p>To enable unified balance and chain abstracted transactions in a Web3 app using the Wagmi library, you need to integrate with the Arcana CA Wagmi SDK and create the <code>CAProvider</code>.  Use it to configure the Wagmi connector.</p> <p>Make sure you import the following functions from the ca-wagmi and not from the wagmi SDK.</p> <ul> <li><code>useSendTransaction</code> - Chain abstracted Send Transaction</li> <li><code>useWriteContract</code> - Chain abstracted Write Contract</li> </ul> <p>The Arcana CA Wagmi SDK also provides the following additional hooks to enable unified balance and chain abstracted transactions:</p> <ul> <li><code>useBalance</code> - Unify the specified token balance across chains - USDC, USDT, ETH</li> <li><code>useBalances</code> - Unify the token balance across chains - USDC, USDT, ETH for all supported token types</li> <li><code>useBalanceModal</code> - Display a plug and play widget containing the unified balance</li> <li><code>useCAFn</code> - Allow chain abstracted token bridge and transfer functions</li> <li><code>useGetMyIntent</code> - Get a list of intents created for the user</li> </ul> <p>Refer to the following sample integration code for usage details.</p> main.tsxApp.tsxaccount.tsxutils/config.tswallet-options.ts <pre><code>import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { WagmiProvider } from 'wagmi'\nimport { CA } from \"@arcana/ca-sdk\";\nimport { CAProvider } from '@arcana/ca-wagmi'\nimport App from \"./App.tsx\";\nimport { config } from \"./utils/config\";\n\nconst ca = new CA();\nconst queryClient = new QueryClient()\n\ncreateRoot(document.getElementById(\"root\")!).render(\n    &lt;StrictMode&gt;\n        &lt;WagmiProvider config={config}&gt;\n            &lt;QueryClientProvider client={queryClient}&gt;\n                &lt;CAProvider client={ca}&gt;\n                    &lt;App /&gt;\n                &lt;/CAProvider&gt;\n            &lt;/QueryClientProvider&gt;\n        &lt;/WagmiProvider&gt;\n    &lt;/StrictMode&gt;\n);\n</code></pre> <pre><code>import \"./App.css\";\nimport { useAccount } from \"wagmi\";\n\nimport { Account } from \"./account\";\nimport { WalletOptions } from \"./wallet-options\";\n\nfunction ConnectWallet() {\n    const { isConnected } = useAccount();\n    if (isConnected) return &lt;Account /&gt;;\n    return &lt;WalletOptions /&gt;;\n}\n\nfunction App() {\nreturn (\n    &lt;div className=\"min-h-screen bg-white dark:bg-gray-900 flex\"&gt;\n    &lt;div className=\" align-center m-auto min-w-md max-w-md p-6 bg-white border border-gray-200 rounded-lg shadow-sm dark:bg-gray-800 dark:border-gray-700\"&gt;\n        &lt;ConnectWallet /&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n);\n}\n\nexport default App;\n</code></pre> <pre><code>import {\n    useAccount,\n    useDisconnect,\n    useEnsName,\n    useSwitchChain,\n// useSendTransaction //DO NOT use from the wagmi SDK\n} from \"wagmi\";\nimport {\n    useBalanceModal,\n    useSendTransaction, //Note: Use from ca-wagmi SDK\n    useWriteContract,\n    useUnifiedBalance,\n} from \"@arcana/ca-wagmi\";\n\nimport { useState } from \"react\";\nimport Decimal from \"decimal.js\";\nimport { erc20Abi } from \"viem\";\n\nexport function Account() {\n    const { sendTransaction } = useSendTransaction();\n    const [allLoading, setLoading] = useState(false);\n    const { address } = useAccount();\n    const { disconnect } = useDisconnect();\n    const { data: ensName } = useEnsName({ address });\n    const { showModal, hideModal } = useBalanceModal();\n    const { loading, getAssetBalance } = useUnifiedBalance();\n    if (!loading) {\n        console.log({ assetBalance: getAssetBalance(\"ETH\") });\n    }\n    const { switchChainAsync } = useSwitchChain();\n    const { writeContract } = useWriteContract();\n\n    const handleSubmit = async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; {\n        e.preventDefault();\n        setLoading(true);\n        const form = e.currentTarget;\n        try {\n            const formData = new FormData(form);\n\n            const toFV = formData.get(\"to\");\n            const chainFV = formData.get(\"chain\");\n            const assetFV = formData.get(\"asset\");\n            const amountFV = formData.get(\"amount\");\n            if (!toFV || !chainFV || !assetFV || !amountFV) {\n                throw new Error(\"missing params\");\n            }\n            const to = toFV as `0x${string}`;\n            const chain = Number(chainFV);\n            const asset = assetFV as \"usdc\" | \"usdt\" | \"eth\";\n\n            await switchChainAsync({ chainId: chain });\n\n            let amount = new Decimal(amountFV as string);\n            if (asset.toLowerCase() === \"ETH\".toLowerCase()) {\n                amount = amount.mul(new Decimal(10).pow(18));\n                const value = BigInt(amount.toString());\n                sendTransaction(\n                    {\n                        to,\n                        value,\n                    },\n                    {\n                        onSuccess(hash) {\n                            createSuccessToast(chain, hash);\n                            form.reset();\n                            setLoading(false);\n                            console.log(\"success\");\n                        },\n                        onSettled() {\n                            console.log(\"settled\");\n                        },\n                        onError(error) {\n                            console.log({ error });\n                            form.reset();\n                            setLoading(false);\n                        },\n                    }\n                );\n            } else {\n                const chainData = chainToCurrency[chain];\n                const s = chainData[asset === \"usdc\" ? 0 : 1];\n                if (!s) {\n                    throw new Error(\"asset not supported\");\n                }\n                writeContract(\n                    {\n                        address: s,\n                        abi: erc20Abi,\n                        functionName: \"transfer\",\n                        args: [to, BigInt(amount.mul(new Decimal(10).pow(6)).toString())],\n                    },\n                    {\n                        onSuccess(hash) {\n                            createSuccessToast(chain, hash);\n                            form.reset();\n                            setLoading(false);\n                            console.log(\"success\");\n                        },\n                        onError(error) {\n                            form.reset();\n                            setLoading(false);\n                            console.log({ error });\n                        },\n                    }\n                );\n            }\n        } catch (e) {\n            form.reset();\n            console.log({ e });\n            setLoading(false);\n        }\n    };\n\n    return (\n        &lt;&gt;\n            {loading ? (\n                &lt;div&gt;\n                    &lt;p&gt;Loading...&lt;/p&gt;\n                &lt;/div&gt;   \n            ) : (\n                &lt;&gt;\n                    &lt;p&gt;\n                        {address &amp;&amp; ensName ? `${ensName} (${address})` : address}\n                    &lt;/p&gt;\n                    &lt;div&gt;\n                        &lt;button onClick={() =&gt; disconnect()}&gt;\n                            Disconnect\n                        &lt;/button&gt;\n                        &lt;button onClick={() =&gt; showModal()}&gt; //Display Unified Balance\n                            Show balances\n                        &lt;/button&gt;\n                    &lt;/div&gt;\n                    &lt;div className=\"mb-4 m-auto\"&gt;&lt;/div&gt;\n                    &lt;form onSubmit={handleSubmit}&gt;\n                        &lt;div&gt;\n                            &lt;label&gt;\n                                To\n                            &lt;/label&gt;\n                            &lt;input\n                                name=\"to\"\n                                type=\"text\"\n                                placeholder=\"0x...\"\n                                required\n                            /&gt;\n                        &lt;/div&gt;\n                        &lt;div&gt;\n                            &lt;label&gt;\n                                Destination Chain\n                            &lt;/label&gt;\n                            &lt;select\n                                required\n                                name=\"chain\"\n                                id=\"chain\"\n                                defaultValue={\"\"}\n                            &gt;\n                                &lt;option value=\"\" disabled&gt;\n                                    Select a chain\n                                &lt;/option&gt;\n                                &lt;option value=\"42161\"&gt;Arbitrum One&lt;/option&gt;\n                                &lt;option value=\"59144\"&gt;Linea&lt;/option&gt;\n                                &lt;option value=\"534352\"&gt;Scroll&lt;/option&gt;\n                                &lt;option value=\"10\"&gt;Optimism&lt;/option&gt;\n                                &lt;option value=\"8453\"&gt;Base&lt;/option&gt;\n                                &lt;option value=\"1\"&gt;Ethereum&lt;/option&gt;\n                                &lt;option value=\"137\"&gt;Polygon POS&lt;/option&gt;\n                            &lt;/select&gt;\n                        &lt;/div&gt;\n                        &lt;div&gt;\n                            &lt;label&gt;\n                                Asset\n                            &lt;/label&gt;\n                            &lt;select\n                                name=\"asset\"\n                                id=\"asset\"\n                                defaultValue={\"\"}\n                            &gt;\n                                &lt;option value=\"\" disabled&gt;\n                                    Select an asset\n                                &lt;/option&gt;\n                                &lt;option value=\"usdt\"&gt;USDT&lt;/option&gt;\n                                &lt;option value=\"usdc\"&gt;USDC&lt;/option&gt;\n                                &lt;option value=\"eth\"&gt;ETH&lt;/option&gt;\n                            &lt;/select&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"mb-5\"&gt;\n                            &lt;label&gt;\n                                Amount\n                            &lt;/label&gt;\n                            &lt;input\n                                name=\"amount\"\n                                type=\"text\"\n                                id=\"amount\"\n                                required\n                            /&gt;\n                        &lt;/div&gt;\n                        &lt;button\n                            type=\"submit\"\n                            disabled={allLoading}\n                        &gt;\n                            {allLoading ? \"Loading...\" : \"Submit\"}\n                        &lt;/button&gt;\n                    &lt;/form&gt;\n                &lt;/&gt;\n            )\n        &lt;/&gt;\n    );\n}      \n</code></pre> <pre><code>import { http, createConfig } from \"wagmi\";\nimport {\n    mainnet,\n    optimism,\n    base,\n    arbitrum,\n    scroll,\n    linea,\n    polygon,\n} from \"wagmi/chains\";\nimport { injected } from \"wagmi/connectors\";\n\nexport const config = createConfig({\n    chains: [mainnet, optimism, arbitrum, base, scroll, linea, polygon],\n    connectors: [injected()],\n    transports: {\n        [mainnet.id]: http(),\n        [optimism.id]: http(),\n        [arbitrum.id]: http(),\n        [base.id]: http(),\n        [scroll.id]: http(),\n        [linea.id]: http(),\n        [polygon.id]: http(),\n    },\n});\n</code></pre> <pre><code>import * as React from \"react\";\nimport { Connector, useConnect } from \"wagmi\";\n\nexport function WalletOptions() {\n    const { connectors, connect } = useConnect();\n    console.log({ connectors });\n    return (\n        &lt;&gt;\n        &lt;h3&gt;Wallets&lt;/h3&gt;\n        &lt;hr&gt;&lt;/hr&gt;\n        {connectors\n            .filter((c) =&gt; c.id !== \"injected\")\n                .map((connector) =&gt; (\n                    &lt;WalletOption\n                        key={connector.uid}\n                        connector={connector}\n                        onClick={() =&gt; connect({ connector })}/&gt;\n                ))}\n        &lt;/&gt;\n    );\n}\n\nfunction WalletOption({\n    connector,\n    onClick,\n    }: {\n    connector: Connector;\n    onClick: () =&gt; void;\n    }) {\n    const [ready, setReady] = React.useState(false);\n\n    React.useEffect(() =&gt; {\n        (async () =&gt; {\n        const provider = await connector.getProvider();\n        setReady(!!provider);\n        })();\n    }, [connector]);\n\n    return (\n        &lt;&gt;\n        &lt;div&gt;\n            &lt;button\n            disabled={!ready}\n            type=\"button\"\n            onClick={onClick}\n            &gt;\n            &lt;img\n                src={connector.icon}\n                className=\"w-4 h-4 me-2 -ms-1 text-[#626890]\"\n                aria-hidden=\"true\"\n            /&gt;\n            {connector.name}\n            &lt;/button&gt;\n        &lt;/div&gt;\n        &lt;/&gt;\n    );\n}\n</code></pre> <p>For details, see Arcana CA Wagmi SDK Reference.</p> <p>Finished. </p> <p>The Auth-CA-Wagmi app is all set to let users spend on any chain via unified balance and chain abstracted transactions.</p>"},{"location":"quick-start/auth-ca-wagmi-quick-start/#see-also","title":"See Also","text":"<p>Sample Integration CodeSandbox </p> <p>Arcana Auth Wagmi SDK Quick Links</p> <ul> <li>Auth Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana CA Wagmi SDK Quick Links</p> <ul> <li>Supported Chains, tokens</li> <li>Arcana CA Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul>"},{"location":"quick-start/auth-core-quick-start/","title":"Get Started: Auth-Core","text":"<p>Integrate Web3 apps with Arcana Auth-Core SDK and assign keys to authenticated users. Build custom login UI to onboard users. Add code for a custom, in-app wallet UI and allow authenticated users to sign blockchain transactions securely.</p> <p>Limited Auth Capabilities</p> <ul> <li>No built-in plug-and-play login UI feature </li> <li>No built-in Arcana wallet UI</li> <li>No support for Global keys, only app-specific keys (default) allowed. </li> <li>No support for enhanced wallet security via MFA.</li> </ul>"},{"location":"quick-start/auth-core-quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>App must be registered via the Arcana Developer Dashboard: https://dashboard.arcana.network </li> <li>Optionally configure auth settings such as social login,  wallet user experience, etc.</li> </ul> Wallet UI Mode Setting <p>To use the Arcana Auth-Core SDK, developers must implement a Custom Wallet UIcustom wallet UI.</p> <p>The Wallet UI Mode Arcana Developer Dashboard configuration setting chosen by the developer during app registration is ignored for apps integrated with the Arcana Auth-Core SDK. </p> <p> Wallet UI Mode </p>"},{"location":"quick-start/auth-core-quick-start/#1-install-sdk","title":"1. Install SDK","text":"npmyarn <pre><code>npm install --save @arcana/auth-core\n</code></pre> <pre><code>yarn add @arcana/auth-core\n</code></pre>"},{"location":"quick-start/auth-core-quick-start/#2-integrate","title":"2. Integrate","text":"<pre><code>const { AuthProvider, SocialLoginType, CURVE } = window.arcana.auth_core;\n// or\nimport { AuthProvider, CURVE } from '@arcana/auth-core';\n</code></pre> <pre><code>const clientId = \"xar_test_d24f70cd300823953dfa2a7f5b7c7c113356b1ad\"; // obtained after app registration via dashboard\nconst auth = new AuthProvider({\n   curve: CURVE.ED25519, // defaults to CURVE.SECP256K1\n   appId: clientId,\n   redirectUri: ''   /* can be ignored for redirect flow if same as login page */ \n});\n</code></pre>"},{"location":"quick-start/auth-core-quick-start/#onboard-users","title":"Onboard Users","text":""},{"location":"quick-start/auth-core-quick-start/#social-login","title":"Social Login","text":"<pre><code>await auth.loginWithSocial(SocialLoginType.google);\n// Check if a user is logged in\nconst loggedIn = auth.isLoggedIn();\n// Get User Account Details\nconst userInfo = auth.getUserInfo();\n...\n</code></pre> <p>Configure Social Login</p> <p>The login providers specified in <code>SocialLoginType</code> parameter must be  configured via the dashboard.</p>"},{"location":"quick-start/auth-core-quick-start/#sign-transactions","title":"Sign Transactions","text":"<p>Use <code>AuthProvider</code>, a standard Ethereum EIP-1193 provider, and allow authenticated users to sign blockchain transactions. Build a custom wallet UI and wire it to appropriate Web3 wallet operations on configured chains.</p> <pre><code>import { AuthProvider, CURVE } from '@arcana/auth-core';\nimport { ethers } from 'ethers'\n\nconst auth = await AuthProvider.init({\n   appId: `${clientId}`, /* obtained after registering the app with the Arcana Developer Dashboard */\n   curve: CURVE.ED25519, // defaults to CURVE.SECP256K1\n   redirectUri:'SPECIFY_URI'    /* can be ignored for redirect flow if same as login page */\n});\n\n...\n\nconst login = async () =&gt; {\nconst arcanaProvider = await auth.loginWithSocial(SocialLoginType.google);\nif (auth.isLoggedIn()) {\n    const info = await auth.getUserInfo();\n}\n};\n\n...\n\ngoogleLoginBtn.addEventListener('click', () =&gt; {\n  login('google');\n});\n  \u00af\n...\n\ntry {\n\n  const provider = new ethers.providers.Web3Provider(arcanaProvider)\n  await provider.getBlockNumber() //Or perform any other Web3 operation such as sign message, send transaction\n    // 14983200\n} catch (e) {\n    // log error\n}\n...\n</code></pre>"},{"location":"quick-start/auth-core-quick-start/#advanced-usage","title":"Advanced Usage","text":"UI Flow Mode <p>When instantiating the <code>AuthProvider</code> you can configure it to use appropriate UI flow such that the authenticated user is redirected to a different app page after login, if required.</p>  Passwordless Onboarding <p>In addition to social login, onboard users via passwordless option.</p> <pre><code>const result = await auth.loginWithPasswordlessStart({\n  email: 'abc@example.com'\n});\n</code></pre> <p>Then on the redirect page, handle passwordless login as follows:</p> <pre><code>await auth.handleRedirect();\n</code></pre> Onboarding via Cognito, Firebase <p>Web3 apps integrating with Arcana Auth-Core SDK cannot use Cognito or Firebase for onboarding users. These providers are not supported in the current release.</p> <p>Contact our Arcana  support if you need this feature.</p> Status and User Information <p>Check Login Status</p> <pre><code>const loggedIn = auth.isLoggedIn(); /* boolean response */\n</code></pre> <p>Get User Info</p> <p>After successful authentication, the user information is saved in memory. It gets copied in the current session storage before the page unload event. User information is fetched again to memory and removed from the session storage after a successful page reload.</p> <pre><code>const userInfo = auth.getUserInfo();\n\n/* \n  UserInfo: {\n    loginType: 'google',\n    userInfo: {\n      id: 'abc@example.com',\n      name: 'ABC DEF',\n      email: '',\n      picture: ''\n    },\n    privateKey: ''\n  }\n*/\n</code></pre> <p>Get Public Key</p> <pre><code>const publicKey = await auth.getPublicKey({\n  verifier: SocialLoginType.google,\n  id: `abc@example.com`,\n}); \n</code></pre> <p>Logout</p> <pre><code>await auth.logout();\n</code></pre>"},{"location":"quick-start/auth-core-quick-start/#see-also","title":"See Also","text":"<p>'Auth-Core' integration example: See <code>sample-auth-core</code> submodule in SDK Example GitHub repository.</p> <p>Arcana Auth-Core SDK Quick Links</p> <ul> <li>Arcana Auth-Core SDK Usage Guide</li> <li>Arcana Auth-Core SDK Reference</li> <li>Changelog</li> <li>Download SDK Private, Limited Access</li> </ul>"},{"location":"quick-start/ca-quick-start/","title":"Web Apps","text":"<p>Integrate with the Arcana CA SDK. Enable unified-balance in 'Web' apps. Let the app users spend anywhere with chain abstracted transactions.</p>"},{"location":"quick-start/ca-quick-start/#1-install","title":"1. Install","text":"<pre><code>npm install --save @arcana/ca-sdk\n</code></pre>"},{"location":"quick-start/ca-quick-start/#2-integrate","title":"2. Integrate","text":"<p>The process for integrating the SDK differs for dApps that need to support both EVM and non-EVM chains, such as Fuel.</p> EVM onlyEVM + Fuel <pre><code>import { CA } from '@arcana/ca-sdk';\nconst provider = window.ethereum;\nconst ca = new CA();\n//Set the EVM provider  \nca.setEVMProvider(provider);\n\n//Initialize ca\nawait ca.init();\n\n//Get CA enabled provider\nconst providerWithCA = ca.getEVMProviderWithCA();\n\n//Use providerWithCA to issue chain enabled transactions\nawait providerWithCA.request({\n    method: \"eth_sendTransaction\",\n    params: [\n        {\n        to: \"0xEa46Fb4b4Dc7755BA29D09Ef2a57C67bab383A2f\",\n        from: \"0x7f521A827Ce5e93f0C6D773525c0282a21466f8d\",\n        value: \"0x001\",\n        },\n    ],\n});\n</code></pre> <pre><code>import { CA } from '@arcana/ca-sdk';\nconst provider = window.ethereum;\nconst ca = new CA();\n//Set the EVM provider  \nca.setEVMProvider(provider);\n\n//Initialize ca\nawait ca.init();\n\n//connector refers to https://github.com/FuelLabs/fuel-connectors/wiki\nawait ca.setFuelConnector(connector);\nconst { provider, connector: CAconnector } = await ca.getFuelWithCA();\n\nconst address = CAconnector.currentAccount()!;\nconst account = new Account(address, provider, CAconnector);\n\n//chain abstraction enabled transfer\nawait account.transfer(\n    \"0xE78655DfAd552fc3658c01bfb427b9EAb0c628F54e60b54fDA16c95aaAdE797A\",\n    1000000,\n    \"0xa0265fb5c32f6e8db3197af3c7eb05c48ae373605b8165b6f4a51c5b0ba4812e\",\n);\n</code></pre> <p><code>ca.init()</code></p> <p>Use <code>await</code> until the <code>init()</code> call is complete. Then call  any other <code>CA</code> method listed in the Arcana CA SDK Reference.</p>"},{"location":"quick-start/ca-quick-start/#3-unified-balance","title":"3. Unified Balance","text":"<p>Get chain abstracted unified balance in the user's EOA.</p> <pre><code>//total chain abstracted unified balance across all chains/tokens\nconst balances = await ca.getUnifiedBalances();\n//total balance for a specific token across all chains \nconst usdtBalance = await ca.getUnifiedBalance(\"usdt\");\n</code></pre>"},{"location":"quick-start/ca-quick-start/#4-ca-transaction","title":"4. CA Transaction","text":"<p>Web3 apps use the standard EIP-1193 provider to issue <code>request</code>  call for transactions. To chain abstract these transactions,  use <code>getEVMProviderWithCA</code>. It returns a CA enabled provider.</p> <p>Replace the standard provider with the CA enabled one. This enables chains abstraction for <code>eth_sendTransaction</code> operations via <code>request</code> call.</p> <pre><code>const providerWithCA = ca.getEVMProviderWithCA();\n\nawait providerWithCA.request({\n  method: \"eth_sendTransaction\",\n  params: [\n    {\n      to: \"0xEa46Fb4b4Dc7755BA29D09Ef2a57C67bab383A2f\",\n      from: \"0x7f521A827Ce5e93f0C6D773525c0282a21466f8d\",\n      value: \"0x001\",\n    },\n  ],\n});\n</code></pre>"},{"location":"quick-start/ca-quick-start/#5-advanced","title":"5. Advanced","text":"<p>The SDK also provides functions to:</p> <ul> <li>View user intents</li> <li>Issue chain abstracted <code>bridge</code> and <code>transfer</code> functions </li> </ul> <p>Learn more...</p> <p>Finished. </p> <p>The 'Web' app is all set to let users spend on any chain via unified balance and chain abstracted transactions.</p>"},{"location":"quick-start/ca-quick-start/#see-also","title":"See Also","text":"<p>Arcana CA SDK Quick Links</p> <ul> <li>Arcana CA SDK Reference</li> <li>CA FAQ</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try CA SDK Demo </p>"},{"location":"quick-start/ca-wagmi-quick-start/","title":"Get Started: Wagmi Apps","text":"<p>Integrate Web3 Wagmi apps with the Arcana CA Wagmi SDK to enable:</p> <ul> <li>Unified-balance</li> <li>Chain abstracted transactions</li> </ul> <p>Replace the <code>useSendTransaction</code> and <code>useWriteContract</code> hooks from the Wagmi library. Instead, use the ones provided by the SDK. They support chain abstracted transactions.</p> <p>Use the plug-and-play UI modal. It shows the unified balance in the Wagmi app context.</p> <p>No Fuel support in <code>ca-wagmi</code> SDK</p> <p>The Arcana CA Wagmi SDK doesn't support Fuel blockchain yet. Chain abstraction works for other supported chains and tokens in Wagmi-based Web3 apps.</p>"},{"location":"quick-start/ca-wagmi-quick-start/#1-install","title":"1. Install","text":"<pre><code>npm install --save @arcana/ca-sdk @arcana/ca-wagmi\n</code></pre>"},{"location":"quick-start/ca-wagmi-quick-start/#2-integrate","title":"2. Integrate","text":"<pre><code>    import { StrictMode } from \"react\";\n    import { createRoot } from \"react-dom/client\";\n    import { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n    import { WagmiProvider } from 'wagmi'\n    import { CA } from \"@arcana/ca-sdk\";\n    import { CAProvider } from '@arcana/ca-wagmi'\n    import App from \"./App.tsx\";\n    import { config } from \"./utils/config\";\n\n    const ca = new CA();\n    const queryClient = new QueryClient()\n\n    createRoot(document.getElementById(\"root\")!).render(\n        &lt;StrictMode&gt;\n            &lt;WagmiProvider config={config}&gt;\n                &lt;QueryClientProvider client={queryClient}&gt;\n                    &lt;CAProvider client={ca}&gt;\n                        &lt;App /&gt;\n                    &lt;/CAProvider&gt;\n                &lt;/QueryClientProvider&gt;\n            &lt;/WagmiProvider&gt;\n        &lt;/StrictMode&gt;\n    );\n</code></pre> <p>See Arcana CA Wagmi SDK Reference for details.</p>"},{"location":"quick-start/ca-wagmi-quick-start/#3-unified-balance","title":"3. Unified Balance","text":"<p>The <code>useBalanceModal</code> hook displays the unified balance plug and play widget.</p> <pre><code>import { useBalanceModal } from \"@arcana/ca-wagmi\"\n\nconst { showModal, hideModal } = useBalanceModal()\n</code></pre>"},{"location":"quick-start/ca-wagmi-quick-start/#4-ca-transactions","title":"4. CA Transactions","text":"<p>Import <code>useSendTransaction</code> and <code>useWriteContract</code> hooks from the ca-wagmi, not from the wagmi SDK, to enable chain abstracted transactions.</p>"},{"location":"quick-start/ca-wagmi-quick-start/#usesendtransaction","title":"<code>useSendTransaction</code>","text":"<pre><code>import {\n    useSendTransaction //Note: Use from ca-wagmi SDK\n} from \"@arcana/ca-wagmi\";\n\nconst { sendTransaction } = useSendTransaction();\n...\nsendTransaction(\n    {\n        to,\n        value,\n    },\n    {\n        onSuccess(hash) {\n            createSuccessToast(chain, hash);\n            form.reset();\n            setLoading(false);\n            console.log(\"success\");\n        },\n        onSettled() {\n            console.log(\"settled\");\n        },\n        onError(error) {\n            console.log({ error });\n            form.reset();\n            setLoading(false);\n        },\n    }\n);\n...\n</code></pre>"},{"location":"quick-start/ca-wagmi-quick-start/#usewritecontract","title":"<code>useWriteContract</code>","text":"<pre><code>import {\n    useWriteContract\n} from \"@arcana/ca-wagmi\";\n\nconst { writeContract } = useWriteContract();\n\n...\n\nwriteContract(\n    {\n        address: s,\n        abi: erc20Abi,\n        functionName: \"transfer\",\n        args: [to, BigInt(amount.mul(new Decimal(10).pow(6)).toString())],\n    },\n    {\n        onSuccess(hash) {\n            createSuccessToast(chain, hash);\n            form.reset();\n            setLoading(false);\n            console.log(\"success\");\n        },\n        onError(error) {\n            form.reset();\n            setLoading(false);\n            console.log({ error });\n        },\n    }\n);\n\n...\n</code></pre>"},{"location":"quick-start/ca-wagmi-quick-start/#5-advanced","title":"5. Advanced","text":"<p>The SDK also provides chain abstraction hooks to:</p> <ul> <li>Get unified balance for a specific token</li> <li>View user intents</li> <li>Issue chain abstracted <code>bridge</code> and <code>transfer</code> functions </li> </ul> <p> Learn more...</p> <p>Finished. </p> <p>The 'CA-Wagmi' app is all set to let users spend on any chain via unified balance and chain abstracted transactions.</p> <p>Refer to the following sample integration code for usage details.</p> main.tsxApp.tsxaccount.tsxutils/config.tswallet-options.ts <pre><code>import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { WagmiProvider } from 'wagmi'\nimport { CA } from \"@arcana/ca-sdk\";\nimport { CAProvider } from '@arcana/ca-wagmi'\nimport App from \"./App.tsx\";\nimport { config } from \"./utils/config\";\n\nconst ca = new CA();\nconst queryClient = new QueryClient()\n\ncreateRoot(document.getElementById(\"root\")!).render(\n    &lt;StrictMode&gt;\n        &lt;WagmiProvider config={config}&gt;\n            &lt;QueryClientProvider client={queryClient}&gt;\n                &lt;CAProvider client={ca}&gt;\n                    &lt;App /&gt;\n                &lt;/CAProvider&gt;\n            &lt;/QueryClientProvider&gt;\n        &lt;/WagmiProvider&gt;\n    &lt;/StrictMode&gt;\n);\n</code></pre> <pre><code>import \"./App.css\";\nimport { useAccount } from \"wagmi\";\n\nimport { Account } from \"./account\";\nimport { WalletOptions } from \"./wallet-options\";\n\nfunction ConnectWallet() {\n    const { isConnected } = useAccount();\n    if (isConnected) return &lt;Account /&gt;;\n    return &lt;WalletOptions /&gt;;\n}\n\nfunction App() {\nreturn (\n    &lt;div className=\"min-h-screen bg-white dark:bg-gray-900 flex\"&gt;\n    &lt;div className=\" align-center m-auto min-w-md max-w-md p-6 bg-white border border-gray-200 rounded-lg shadow-sm dark:bg-gray-800 dark:border-gray-700\"&gt;\n        &lt;ConnectWallet /&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n);\n}\n\nexport default App;\n</code></pre> <pre><code>import {\n    useAccount,\n    useDisconnect,\n    useEnsName,\n    useSwitchChain,\n// useSendTransaction //DO NOT use from the wagmi SDK\n} from \"wagmi\";\nimport {\n    useBalanceModal,\n    useSendTransaction, //Note: Use from ca-wagmi SDK\n    useWriteContract,\n    useUnifiedBalance,\n} from \"@arcana/ca-wagmi\";\n\nimport { useState } from \"react\";\nimport Decimal from \"decimal.js\";\nimport { erc20Abi } from \"viem\";\n\nexport function Account() {\n    const { sendTransaction } = useSendTransaction();\n    const [allLoading, setLoading] = useState(false);\n    const { address } = useAccount();\n    const { disconnect } = useDisconnect();\n    const { data: ensName } = useEnsName({ address });\n    const { showModal, hideModal } = useBalanceModal();\n    const { loading, getAssetBalance } = useUnifiedBalance();\n    if (!loading) {\n        console.log({ assetBalance: getAssetBalance(\"ETH\") });\n    }\n    const { switchChainAsync } = useSwitchChain();\n    const { writeContract } = useWriteContract();\n\n    const handleSubmit = async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; {\n        e.preventDefault();\n        setLoading(true);\n        const form = e.currentTarget;\n        try {\n            const formData = new FormData(form);\n\n            const toFV = formData.get(\"to\");\n            const chainFV = formData.get(\"chain\");\n            const assetFV = formData.get(\"asset\");\n            const amountFV = formData.get(\"amount\");\n            if (!toFV || !chainFV || !assetFV || !amountFV) {\n                throw new Error(\"missing params\");\n            }\n            const to = toFV as `0x${string}`;\n            const chain = Number(chainFV);\n            const asset = assetFV as \"usdc\" | \"usdt\" | \"eth\";\n\n            await switchChainAsync({ chainId: chain });\n\n            let amount = new Decimal(amountFV as string);\n            if (asset.toLowerCase() === \"ETH\".toLowerCase()) {\n                amount = amount.mul(new Decimal(10).pow(18));\n                const value = BigInt(amount.toString());\n                sendTransaction(\n                    {\n                        to,\n                        value,\n                    },\n                    {\n                        onSuccess(hash) {\n                            createSuccessToast(chain, hash);\n                            form.reset();\n                            setLoading(false);\n                            console.log(\"success\");\n                        },\n                        onSettled() {\n                            console.log(\"settled\");\n                        },\n                        onError(error) {\n                            console.log({ error });\n                            form.reset();\n                            setLoading(false);\n                        },\n                    }\n                );\n            } else {\n                const chainData = chainToCurrency[chain];\n                const s = chainData[asset === \"usdc\" ? 0 : 1];\n                if (!s) {\n                    throw new Error(\"asset not supported\");\n                }\n                writeContract(\n                    {\n                        address: s,\n                        abi: erc20Abi,\n                        functionName: \"transfer\",\n                        args: [to, BigInt(amount.mul(new Decimal(10).pow(6)).toString())],\n                    },\n                    {\n                        onSuccess(hash) {\n                            createSuccessToast(chain, hash);\n                            form.reset();\n                            setLoading(false);\n                            console.log(\"success\");\n                        },\n                        onError(error) {\n                            form.reset();\n                            setLoading(false);\n                            console.log({ error });\n                        },\n                    }\n                );\n            }\n        } catch (e) {\n            form.reset();\n            console.log({ e });\n            setLoading(false);\n        }\n    };\n\n    return (\n        &lt;&gt;\n            {loading ? (\n                &lt;div&gt;\n                    &lt;p&gt;Loading...&lt;/p&gt;\n                &lt;/div&gt;   \n            ) : (\n                &lt;&gt;\n                    &lt;p&gt;\n                        {address &amp;&amp; ensName ? `${ensName} (${address})` : address}\n                    &lt;/p&gt;\n                    &lt;div&gt;\n                        &lt;button onClick={() =&gt; disconnect()}&gt;\n                            Disconnect\n                        &lt;/button&gt;\n                        &lt;button onClick={() =&gt; showModal()}&gt; //Display Unified Balance\n                            Show balances\n                        &lt;/button&gt;\n                    &lt;/div&gt;\n                    &lt;div className=\"mb-4 m-auto\"&gt;&lt;/div&gt;\n                    &lt;form onSubmit={handleSubmit}&gt;\n                        &lt;div&gt;\n                            &lt;label&gt;\n                                To\n                            &lt;/label&gt;\n                            &lt;input\n                                name=\"to\"\n                                type=\"text\"\n                                placeholder=\"0x...\"\n                                required\n                            /&gt;\n                        &lt;/div&gt;\n                        &lt;div&gt;\n                            &lt;label&gt;\n                                Destination Chain\n                            &lt;/label&gt;\n                            &lt;select\n                                required\n                                name=\"chain\"\n                                id=\"chain\"\n                                defaultValue={\"\"}\n                            &gt;\n                                &lt;option value=\"\" disabled&gt;\n                                    Select a chain\n                                &lt;/option&gt;\n                                &lt;option value=\"42161\"&gt;Arbitrum One&lt;/option&gt;\n                                &lt;option value=\"59144\"&gt;Linea&lt;/option&gt;\n                                &lt;option value=\"534352\"&gt;Scroll&lt;/option&gt;\n                                &lt;option value=\"10\"&gt;Optimism&lt;/option&gt;\n                                &lt;option value=\"8453\"&gt;Base&lt;/option&gt;\n                                &lt;option value=\"1\"&gt;Ethereum&lt;/option&gt;\n                                &lt;option value=\"137\"&gt;Polygon POS&lt;/option&gt;\n                            &lt;/select&gt;\n                        &lt;/div&gt;\n                        &lt;div&gt;\n                            &lt;label&gt;\n                                Asset\n                            &lt;/label&gt;\n                            &lt;select\n                                name=\"asset\"\n                                id=\"asset\"\n                                defaultValue={\"\"}\n                            &gt;\n                                &lt;option value=\"\" disabled&gt;\n                                    Select an asset\n                                &lt;/option&gt;\n                                &lt;option value=\"usdt\"&gt;USDT&lt;/option&gt;\n                                &lt;option value=\"usdc\"&gt;USDC&lt;/option&gt;\n                                &lt;option value=\"eth\"&gt;ETH&lt;/option&gt;\n                            &lt;/select&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"mb-5\"&gt;\n                            &lt;label&gt;\n                                Amount\n                            &lt;/label&gt;\n                            &lt;input\n                                name=\"amount\"\n                                type=\"text\"\n                                id=\"amount\"\n                                required\n                            /&gt;\n                        &lt;/div&gt;\n                        &lt;button\n                            type=\"submit\"\n                            disabled={allLoading}\n                        &gt;\n                            {allLoading ? \"Loading...\" : \"Submit\"}\n                        &lt;/button&gt;\n                    &lt;/form&gt;\n                &lt;/&gt;\n            )\n        &lt;/&gt;\n    );\n}      \n</code></pre> <pre><code>import { http, createConfig } from \"wagmi\";\nimport {\n    mainnet,\n    optimism,\n    base,\n    arbitrum,\n    scroll,\n    linea,\n    polygon,\n} from \"wagmi/chains\";\nimport { injected } from \"wagmi/connectors\";\n\nexport const config = createConfig({\n    chains: [mainnet, optimism, arbitrum, base, scroll, linea, polygon],\n    connectors: [injected()],\n    transports: {\n        [mainnet.id]: http(),\n        [optimism.id]: http(),\n        [arbitrum.id]: http(),\n        [base.id]: http(),\n        [scroll.id]: http(),\n        [linea.id]: http(),\n        [polygon.id]: http(),\n    },\n});\n</code></pre> <pre><code>import * as React from \"react\";\nimport { Connector, useConnect } from \"wagmi\";\n\nexport function WalletOptions() {\n    const { connectors, connect } = useConnect();\n    console.log({ connectors });\n    return (\n        &lt;&gt;\n        &lt;h3&gt;Wallets&lt;/h3&gt;\n        &lt;hr&gt;&lt;/hr&gt;\n        {connectors\n            .filter((c) =&gt; c.id !== \"injected\")\n                .map((connector) =&gt; (\n                    &lt;WalletOption\n                        key={connector.uid}\n                        connector={connector}\n                        onClick={() =&gt; connect({ connector })}/&gt;\n                ))}\n        &lt;/&gt;\n    );\n}\n\nfunction WalletOption({\n    connector,\n    onClick,\n    }: {\n    connector: Connector;\n    onClick: () =&gt; void;\n    }) {\n    const [ready, setReady] = React.useState(false);\n\n    React.useEffect(() =&gt; {\n        (async () =&gt; {\n        const provider = await connector.getProvider();\n        setReady(!!provider);\n        })();\n    }, [connector]);\n\n    return (\n        &lt;&gt;\n        &lt;div&gt;\n            &lt;button\n            disabled={!ready}\n            type=\"button\"\n            onClick={onClick}\n            &gt;\n            &lt;img\n                src={connector.icon}\n                className=\"w-4 h-4 me-2 -ms-1 text-[#626890]\"\n                aria-hidden=\"true\"\n            /&gt;\n            {connector.name}\n            &lt;/button&gt;\n        &lt;/div&gt;\n        &lt;/&gt;\n    );\n}\n</code></pre> `useCAFn`: Chain Abstracted Bridge and Transfer"},{"location":"quick-start/ca-wagmi-quick-start/#see-also","title":"See Also","text":"<p>Arcana CA Wagmi SDK Quick Links</p> <ul> <li>Supported Chains, tokens</li> <li>Arcana CA Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try CA Wagmi SDK CodeSandbox </p>"},{"location":"quick-start/flutter-quick-start/","title":"Get Started: Flutter Apps","text":"<p>Integrate 'Flutter' apps with Arcana Auth Flutter SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"quick-start/flutter-quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>App must be registered via the Arcana Developer Dashboard: https://dashboard.arcana.network </li> <li>Optionally configure auth settings such as social login,  wallet user experience, etc.</li> </ul> <p>Flutter Version</p> <p>We support Flutter v3.15.0 or higher</p>"},{"location":"quick-start/flutter-quick-start/#2-install","title":"2. Install","text":"<p>The Arcana Auth Flutter SDK is a Flutter plugin. It is available for download at 'Pub.dev' as the <code>arcana_auth_flutter</code> package. </p> <p>Add the following line to the dependencies section in your app's <code>pubspec.yaml</code> file:</p> pubspec.yaml<pre><code>dependencies:\n  flutter:       # Required for every Flutter project\n    sdk: flutter # Required for every Flutter project\n  flutter_localizations: # Required to enable localization\n    sdk: flutter         # Required to enable localization\n  arcana_auth_flutter: ^0.0.6 \n</code></pre>"},{"location":"quick-start/flutter-quick-start/#2-integrate","title":"2. Integrate","text":"<pre><code>import 'package:arcana_sdk/arcana_sdk.dart';\n\nfinal auth = AuthProvider(clientId:\"xar_xxxx_...\");\nauth.init(context: context);\n</code></pre>"},{"location":"quick-start/flutter-quick-start/#onboard-users","title":"Onboard Users","text":"<pre><code>auth.loginWithSocial(\"google\").then((_) =&gt; {\n// On login Success\n}).catchError(...);\n</code></pre>"},{"location":"quick-start/flutter-quick-start/#sign-transactions","title":"Sign Transactions","text":"<p>The <code>AuthProvider</code> supports the JSON-RPC requests for the following Web3 operations in Flutter apps:</p> EIP-1193 RequestSendTransaction <pre><code>auth.request(method: \"...\", params: [...]).then(() =&gt; ...);\n</code></pre> <pre><code>auth.sendTransaction({ to: \"\", value: \"\" }).then((hash) =&gt; ...);\n</code></pre> <p>That's all! </p> <p>The 'Flutter' app is ready to onboard users and allow them to sign blockchain transactions.</p>"},{"location":"quick-start/flutter-quick-start/#4-advanced-usage","title":"4. Advanced Usage","text":"Flutter SDK Usage LoginUser InfoWallet VisibilityCache <p>Social Login</p> <pre><code>auth.loginWithSocial(\"google\").then((_) =&gt; {\n// On login Success\n}).catchError(...);\n</code></pre> <p>OTP Login</p> <pre><code>auth.loginWithOTP(\"${email_id}\").then((_) =&gt; {\n// On login Success\n}).catchError(...);\n</code></pre> <p>Logout</p> <pre><code>auth.logout().then((_) =&gt; {\n// On logout\n});\n</code></pre> <p>Get User Address</p> <pre><code>auth.getAccount().then((account) =&gt; ...);\n</code></pre> <p>Get User Details</p> <pre><code>auth.getUserInfo().then((UserInfo info) =&gt; ...);\n</code></pre> <p>Show/Hide Wallet UI</p> <pre><code>auth.showWallet();\n</code></pre> <pre><code>auth.hideWallet();\n</code></pre> <p>Check Wallet Visibility</p> <pre><code>var isVisible = auth.isVisible();\n</code></pre> <p>Clear Cache</p> <pre><code>auth.clearCache();\n</code></pre> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"quick-start/flutter-quick-start/#see-also","title":"See also","text":"<p>'Flutter' integration example: See <code>sample-auth-flutter</code> submodule in SDK Example GitHub repository.</p> <p>Arcana Auth Flutter SDK Quick Links</p> <ul> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"quick-start/mvx-quick-start/","title":"Get Started: MultiversX Apps","text":"<p>Integrate 'MultiversX' apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p> <p>MultiversX chains are pre-configured and instantly accessible to authenticated users via the Arcana wallet.</p>"},{"location":"quick-start/mvx-quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the MultiversX app as instructed in the MultiversX Configuration Guide. Get a unique Client ID and use it for app integration.</p> </li> <li> <p>Configure social login providers to onboard users and customize the user experience for blockchain signing via the wallet settings. </p> </li> </ul>"},{"location":"quick-start/mvx-quick-start/#1-install","title":"1. Install","text":"npmyarn <pre><code>npm install --save @arcana/auth\n</code></pre> <pre><code>yarn add @arcana/auth\n</code></pre>"},{"location":"quick-start/mvx-quick-start/#2-integrate","title":"2. Integrate","text":"<pre><code>import { AuthProvider } from '@arcana/auth'\n</code></pre> <pre><code>const auth = new AuthProvider(\n  \"xar_test_445007f942xxxxxxxxxxxxxxxxxx484cAfd2\", // App client ID\n  { \n    alwaysVisible: false,     // default: true, wallet always visible\n    connectOptions: {\n      compact: true           // default: false, regular plug-and-play login UI\n    },\n    position: 'left',         // default: right\n    setWindowProvider: true,  // default: false, window.ethereum not set\n    theme: 'light',           // default: dark\n})\n</code></pre> <pre><code>try {\n  await auth.init()\n} catch (e) {\n  // Handle exception case\n}\n</code></pre> <p>Initialize First!</p> <p>The app must use <code>await</code> until the <code>init()</code> call is complete, before invoking any of the other Arcana Auth SDK functions listed in Auth SDK Reference.</p>"},{"location":"quick-start/mvx-quick-start/#onboard-users","title":"Onboard Users","text":"<pre><code>await auth.connect();\n</code></pre> Plug-and-Play Login UI"},{"location":"quick-start/mvx-quick-start/#sign-transactions","title":"Sign Transactions","text":"<pre><code>  // For authenticated users, add code for signing message\n\n  const personalSign = await provider.request({\n    method: 'mvx_signMessage',\n    params: {\n      message: 'SignMessage to test MultiversX signmessage',\n      address: from,\n    },\n  })\n\n  // Returns signature object\n  // {signature: \"some-sig\"}\n</code></pre> <p>For the MultiversX chain, the following methods are supported:</p> <ul> <li><code>mvx_signMessage</code></li> <li><code>mvx_signTransaction</code></li> <li><code>mvx_signTransactions</code></li> <li><code>getAccounts</code></li> <li><code>getPublicKey</code></li> </ul> <p>Refer to other supported Web3 wallet operations for details.</p> <p>That's all! </p> <p>The 'MultiversX' app is ready to onboard users and allow them to sign blockchain transactions.</p>"},{"location":"quick-start/mvx-quick-start/#3-advanced-usage","title":"3. Advanced Usage","text":"<code>AuthProvider</code> Optional Parameters <p>Besides Client ID input parameter, you can optionally customize these settings in the <code>AuthProvider</code> constructor:</p> <p><code>position</code>:  wallet position within the app context - <code>left</code>|<code>right</code></p> <p><code>theme</code>: wallet theme - <code>light</code>|<code>dark</code></p> <p><code>connectOptions</code>: compact mode for the built-in plug-and-play login UI - <code>true</code>|<code>false</code></p> <pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> <p>See <code>AuthProvider</code> constructor parameters for details.</p> Wallet Customization <p>Manage the user experience for signing blockchain transactions by configuring SDK usage. Specify the theme, branding settings of the in-app built-in Arcana wallet UI. Use wallet visibility and decide when to display the wallet UI in the app. Configure keyspace and enable the user experience of having the same wallet address across multiple apps integrated with the Arcana Auth SDK.</p> <p>You can also replace the built-in wallet UI with a  custom wallet UI.</p> Custom Login UI <p>You can onboard users through a custom login UI instead of the built-in plug-and-play one. See how to use custom login UI and onboard users in a 'MultiversX' app.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"quick-start/mvx-quick-start/#see-also","title":"See Also","text":"<p>'MultiversX' integration example: See <code>'</code>sample-auth-multiversx<code>'</code> submodule in SDK Example GitHub repository.</p> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"quick-start/near-quick-start/","title":"Get Started: Near Apps","text":"<p>Integrate 'Near' apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p> <p>Near chains are pre-configured and instantly accessible to authenticated users via the Arcana wallet.</p>"},{"location":"quick-start/near-quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the Near app as instructed in the Near Configuration Guide. Get a unique Client ID and use it for app integration.</p> </li> <li> <p>Configure social login providers to onboard users and customize the user experience for blockchain signing via the wallet settings. </p> </li> </ul>"},{"location":"quick-start/near-quick-start/#1-install","title":"1. Install","text":"npmyarn <pre><code>npm install --save @arcana/auth\n</code></pre> <pre><code>yarn add @arcana/auth\n</code></pre>"},{"location":"quick-start/near-quick-start/#2-integrate","title":"2. Integrate","text":"<pre><code>import { AuthProvider } from '@arcana/auth'\n</code></pre> <pre><code>const auth = new AuthProvider(\n  \"xar_test_445007f942xxxxxxxxxxxxxxxxxx484cAfd2\", // App client ID\n  { \n    alwaysVisible: false,     // default: true, wallet always visible\n    connectOptions: {\n      compact: true           // default: false, regular plug-and-play login UI\n    },\n    position: 'left',         // default: right\n    setWindowProvider: true,  // default: false, window.ethereum not set\n    theme: 'light',           // default: dark\n})\n</code></pre> <pre><code>try {\n  await auth.init()\n} catch (e) {\n  // Handle exception case\n}\n</code></pre> <p>Initialize First!</p> <p>The app must use <code>await</code> until the <code>init()</code> call is complete, before invoking any of the other Arcana Auth SDK functions listed in Auth SDK Reference.</p>"},{"location":"quick-start/near-quick-start/#onboard-users","title":"Onboard Users","text":"<pre><code>await auth.connect();\n</code></pre> Plug-and-Play Login UI"},{"location":"quick-start/near-quick-start/#sign-transactions","title":"Sign Transactions","text":"<pre><code>  // For authenticated users, add code for signing message\n\n  import base58 from \"bs58\";\n\n  const message = base58.encode(Buffer.from(\"This is a test message for trying 'SignMessage'.\"));\n\n  const signedMessage = await auth.provider.request({\n    method: \"near_signMessage\",\n    params: { message },\n  });\n\n  console.log(signedMessage);\n</code></pre> <p>For the Near chain, the following methods are supported:</p> <ul> <li><code>getAccounts</code></li> <li><code>near_signMessage</code></li> <li><code>near_signAndSendTransaction</code></li> </ul> <p>Refer to other supported Web3 wallet operations for details.</p> <p>That's all! </p> <p>The 'Near' app is ready to onboard users and allow them to sign blockchain transactions.</p>"},{"location":"quick-start/near-quick-start/#3-advanced-usage","title":"3. Advanced Usage","text":"<code>AuthProvider</code> Optional Parameters <p>Besides Client ID input parameter, you can optionally customize these settings in the <code>AuthProvider</code> constructor:</p> <p><code>position</code>:  wallet position within the app context - <code>left</code>|<code>right</code></p> <p><code>theme</code>: wallet theme - <code>light</code>|<code>dark</code></p> <p><code>connectOptions</code>: compact mode for the built-in plug-and-play login UI - <code>true</code>|<code>false</code></p> <pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> <p>See <code>AuthProvider</code> constructor parameters for details.</p> Wallet Customization <p>Manage the user experience for signing blockchain transactions by configuring SDK usage. Specify the theme, branding settings of the in-app built-in Arcana wallet UI. Use wallet visibility and decide when to display the wallet UI in the app. Configure keyspace and enable the user experience of having the same wallet address across multiple apps integrated with the Arcana Auth SDK.</p> <p>You can also replace the built-in wallet UI with a  custom wallet UI.</p> Custom Login UI <p>You can onboard users through a custom login UI instead of the built-in plug-and-play one. See how to use custom login UI and onboard users in a 'Near' app.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"quick-start/near-quick-start/#see-also","title":"See Also","text":"<p>'Near' integration example: See <code>'</code>sample-auth-near<code>'</code> submodule in SDK Example GitHub repository.</p> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"quick-start/rainbowkit-quick-start/","title":"Get Started: RainbowKit Apps","text":"<p>RainbowKit is a React Hooks library for Ethereum for connecting Web3 apps to multiple wallets and chains. </p> <p>Integrate 'RainbowKit' apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"quick-start/rainbowkit-quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>App must be registered via the Arcana Developer Dashboard: https://dashboard.arcana.network </li> <li>Optionally configure auth settings such as social login,  wallet user experience, etc.</li> </ul> <p>RainbowKit Version</p> <p>We support Web3 apps using RainbowKit v1.3.0 or higher.</p>"},{"location":"quick-start/rainbowkit-quick-start/#1-install-sdks","title":"1. Install SDKs","text":"npmyarn <p>Wagmi 2.0</p> <pre><code>npm install --save @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>npm install --save @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre> <p>Wagmi 2.0</p> <pre><code>yarn add @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>yarn add @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre>"},{"location":"quick-start/rainbowkit-quick-start/#2-integrate","title":"2. Integrate","text":"<pre><code>// Set up Arcana Auth \n\nimport { AuthProvider } from \"@arcana/auth\";\n\nlet auth = null;\n\nexport const getAuthProvider = () =&gt; {\n  if (!auth) {\n    auth = new AuthProvider(\n      \"xar_live_d7c88d9b033d100e4200d21a5c4897b896e60063\"\n    );\n  }\n  return auth;\n};\n</code></pre> Wagmi 2.0Wagmi 1.0 <pre><code>//\n// For apps using Wagmi versions v2.a.b and auth-wagmi v3.x.y\n//\n\nimport { http, createConfig } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\nimport { coinbaseWallet, injected, walletConnect } from 'wagmi/connectors'\nimport { AuthProvider } from '@arcana/auth'\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\"\n\nlet auth: AuthProvider | null;\n\nif (!auth) {\n  auth = new AuthProvider(\n    \"Your-app-Client-ID\"\n  );\n}\n\nconst connector = new ArcanaConnector({ auth });\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [\n    injected(),\n    coinbaseWallet({ appName: 'Create Wagmi' }),\n    walletConnect({ projectId: import.meta.env.VITE_WC_PROJECT_ID }),\n    connector(),\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n\ndeclare module 'wagmi' {\n  interface Register {\n    config: typeof config\n  }\n}\n...\n</code></pre> <pre><code>//   \n// For apps using Wagmi versions v1.x.y and auth-wagmi v2.a.b\n//\n\nimport { configureChains, createConfig, WagmiConfig } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { polygon, polygonAmoy } from \"wagmi/chains\";\nimport { useAccount, useConnect, useDisconnect, useBalance } from 'wagmi'\nimport \"../styles/globals.css\";\nimport { AuthProvider } from '@arcana/auth'\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\"\n\nlet auth: AuthProvider | null;\n\nif (!auth) {\n  auth = new AuthProvider(\n    \"Your-app-Client-ID\"\n  );\n}\n\nconst { chains, provider, webSocketProvider } = configureChains(\n  [mainnet, polygon, polygonAmoy],\n  [publicProvider()],\n  { targetQuorum: 1 }\n);\n\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: auth,\n    },\n  });\n};\n\nconst { chains, publicClient } = configureChains(\n  [polygon, polygonAmoy],\n  [publicProvider()]\n);\n\nexport const wagmiEntity = createConfig({\n  autoConnect: true,\n  connectors: [connector(chains)],\n  publicClient,\n});\n...\n</code></pre>"},{"location":"quick-start/rainbowkit-quick-start/#onboard-users","title":"Onboard Users","text":"<pre><code>//This example uses Arcana Rainbow connector and MetaMask\n\nimport { connectorsForWallets } from \"@rainbow-me/rainbowkit\";\nimport { metaMaskWallet } from \"@rainbow-me/rainbowkit/wallets\";\nimport { getAuthProvider } from \"./getArcanaAuth\";\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\";\n\nimport { sequenceLogo } from \"./logo\";\n\nexport const ArcanaRainbowConnector = ({ chains }) =&gt; {\n  return {\n    id: \"arcana-auth\",\n    name: \"Login with Email/Social\",\n    iconUrl: sequenceLogo,\n    iconBackground: \"#101010\",\n    createConnector: () =&gt; {\n      const connector = new ArcanaConnector({\n        chains,\n        options: {\n          auth: getAuthProvider()\n        }\n      });\n      return {\n        connector\n      };\n    }\n  };\n};\n\nconst connectors = (chains) =&gt;\n  connectorsForWallets([\n    {\n      groupName: \"Recommended\",\n      wallets: [ArcanaRainbowConnector({ chains }), metaMaskWallet({ chains })]\n    }\n  ]);\n\nexport { connectors };\n</code></pre> Wagmi 2.0Wagmi 1.0 <pre><code>// Note:  \n// This sample code is for \n// wagmi versions 1.x.x and auth-wagmi 2.0.0\n\nimport { configureChains, createConfig, WagmiConfig } from \"wagmi\";\nimport { polygon, mainnet, optimism, arbitrum } from \"wagmi/chains\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { RainbowKitProvider } from \"@rainbow-me/rainbowkit\";\nimport { connectors } from \"./wallet\";\nimport { useAccount, useConnect } from 'wagmi'\nimport { Connect } from \"./Connect\";\n\nconst { chains, publicClient } = configureChains(\n  [mainnet, polygon, optimism, arbitrum],\n  [publicProvider()]\n);\n\nconst wagmiEntity = createConfig({\n  connectors: connectors(chains),\n  autoConnect: true,\n  publicClient,\n});\n...\n</code></pre> <pre><code>// Note:  \n// This sample code is for \n// wagmi versions &lt;1.x.x and auth-wagmi &lt;2.0.0\n\nimport \"../styles/globals.css\";\nimport \"@rainbow-me/rainbowkit/styles.css\";\n\nimport { configureChains, createClient, WagmiConfig } from \"wagmi\";\nimport { polygon, mainnet } from \"wagmi/chains\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { RainbowKitProvider } from \"@rainbow-me/rainbowkit\";\nimport { connectors } from \"../utils/wallet\";\n\nconst { chains, provider } = configureChains(\n  [mainnet, polygon],\n  [publicProvider()]\n);\n\nconst wagmiEntity = createClient({\n  connectors: connectors(chains),\n  autoConnect: true,\n  provider,\n});\n...\n</code></pre> <p>Use <code>WagmiConfig</code> and <code>RainbowKitProvider</code> components in the app to enable social login through the configured providers in the RainbowKit app.</p> Wagmi 2.0Wagmi 1.0 <pre><code>// Pass wagmi client configured with ArcanaRainbowKitConnector to the RainbowKit Context Provider\nexport default function App({ Component, pageProps }) {\n  return (\n    &lt;WagmiConfig config={wagmiEntity}&gt;\n      &lt;RainbowKitProvider chains={chains}&gt;\n        &lt;Component {...pageProps} /&gt;\n      &lt;/RainbowKitProvider&gt;\n    &lt;/WagmiConfig&gt;\n  );\n}\n</code></pre> <pre><code>// Pass wagmi client configured with ArcanaRainbowKitConnector to the RainbowKit Context Provider\nexport default function App({ Component, pageProps }) {\n  return (\n    &lt;WagmiConfig client={wagmiEntity}&gt;\n      &lt;RainbowKitProvider chains={chains}&gt;\n        &lt;Component {...pageProps} /&gt;\n      &lt;/RainbowKitProvider&gt;\n    &lt;/WagmiConfig&gt;\n  );\n}\n</code></pre>"},{"location":"quick-start/rainbowkit-quick-start/#sign-transactions","title":"Sign Transactions","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p> <p>That's all! </p> <p>The 'RainbowKit' app is ready to onboard users and allow them to sign blockchain transactions.</p>"},{"location":"quick-start/rainbowkit-quick-start/#3-advanced-usage","title":"3. Advanced Usage","text":"<code>AuthProvider</code> Optional Parameters <p>Besides Client ID input parameter, you can optionally customize these settings in the <code>AuthProvider</code> constructor:</p> <p><code>position</code>:  wallet position within the app context - <code>left</code>|<code>right</code></p> <p><code>theme</code>: wallet theme - <code>light</code>|<code>dark</code></p> <p><code>connectOptions</code>: compact mode for the built-in plug-and-play login UI - <code>true</code>|<code>false</code></p> <pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> <p>See <code>AuthProvider</code> constructor parameters for details.</p> Wallet Customization <p>Manage the user experience for signing blockchain transactions by configuring SDK usage. Specify the theme, branding settings of the in-app built-in Arcana wallet UI. Use wallet visibility and decide when to display the wallet UI in the app. Configure keyspace and enable the user experience of having the same wallet address across multiple apps integrated with the Arcana Auth SDK.</p> <p>You can also replace the built-in wallet UI with a  custom wallet UI.</p> Custom Login UI <p>You can onboard users through a custom login UI instead of the built-in plug-and-play one. See how to use custom login UI and onboard users in a 'RainbowKit' app.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"quick-start/rainbowkit-quick-start/#see-also","title":"See Also","text":"<p>'RainbowKit' integration example: See <code>sample-auth-rainbowkit`,`sample-auth-rainbow-viem</code> submodule in SDK Example GitHub repository.</p> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth Wagmi SDK Quick Links</p> <ul> <li>Auth Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"quick-start/react-native-quick-start/","title":"Get Started: React-Native Apps","text":"<p>Integrate 'React-Native' apps with Arcana Auth React-Native SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"quick-start/react-native-quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>App must be registered via the Arcana Developer Dashboard: https://dashboard.arcana.network </li> <li>Optionally configure auth settings such as social login,  wallet user experience, etc.</li> </ul> <p>React-Native Version</p> <p>We support React-Native v0.71.8 or higher</p>"},{"location":"quick-start/react-native-quick-start/#1-install","title":"1. Install","text":"<pre><code>npm i @arcana/auth-react-native\n(cd ios &amp;&amp; pod install)\n</code></pre> <p>Auto-Linking</p> <p>You are not required to manually link this module, as it supports React Native auto-linking.</p>"},{"location":"quick-start/react-native-quick-start/#2-integrate","title":"2. Integrate","text":"<pre><code>import React, { useState } from \"react\";\nimport { Button, View } from \"react-native\";\nimport Auth from \"@arcana/auth-react-native\";\n\nexport default function App() {\n  const authRef = React.useRef(null);\n\n  return (\n    &lt;View &gt;\n      &lt;Auth clientId=\"xar_test_xxx\" theme=\"light\" ref={authRef} /&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>"},{"location":"quick-start/react-native-quick-start/#onboard-users","title":"Onboard Users","text":"<pre><code>// For logging in\nconst loginWithGoogle = () =&gt; {\n  if(authRef !== null){\n    authRef.current.loginWithSocial('google').then(() =&gt; {\n      // logged in\n    }).catch(err =&gt; {\n      // already logged in\n      // or error during login\n    }) \n  }\n}\n</code></pre>"},{"location":"quick-start/react-native-quick-start/#sign-transactions","title":"Sign Transactions","text":"SendTransactionEIP 1193 Request <pre><code>// For sending transaction\nconst sendTransaction = async data =&gt; {\n  if(authRef !== null){\n    return await authRef.current.sendTransaction(data);\n  }\n};\n\n// For getting current account balance\nconst getBalance = async () =&gt; {\n  if(authRef !== null){\n    return await authRef.current.getBalance();\n  }\n};\n</code></pre> <pre><code>// EIP 1193 request method\nconst request = async (method, params) =&gt; {\n  if(authRef !== null){\n    return await authRef.current.request({ method, params });\n  }\n};\n</code></pre>"},{"location":"quick-start/react-native-quick-start/#3-advanced-usage","title":"3.  Advanced Usage","text":"<code>AuthProvider</code> Optional Parameters <p>Besides Client ID input parameter, you can optionally customize these settings in the <code>AuthProvider</code> constructor:</p> <p><code>position</code>:  wallet position within the app context - <code>left</code>|<code>right</code></p> <p><code>theme</code>: wallet theme - <code>light</code>|<code>dark</code></p> <p><code>connectOptions</code>: compact mode for the built-in plug-and-play login UI - <code>true</code>|<code>false</code></p> <pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> <p>See <code>AuthProvider</code> constructor parameters for details.</p> React-Native SDK Usage LoginUser InfoEvent Handling <p>Google Login</p> <pre><code>// For logging in\nconst loginWithGoogle = () =&gt; {\n  if(authRef !== null){\n    authRef.current.loginWithSocial('google').then(() =&gt; {\n      // logged in\n    }).catch(err =&gt; {\n      // already logged in\n      // or error during login\n    }) \n  }\n}\n</code></pre> <p>Logout</p> <p>Add code to provide user log out option via the <code>logout</code> method or let authenticated users log out using the wallet UI logout option in the 'User Profile' tab.</p> <pre><code>// Logout User from session\nconst logout = () =&gt; {\n  if(authRef !== null){\n    authRef.current.logout().then(() =&gt; {\n      // on logout\n    });\n  }\n};\n</code></pre> <p>Show/Hide Wallet</p> <p>Once the user logs into the app, they can instantly access the Arcana wallet. Developers can choose to show and hide the wallet as required by the app.</p> <pre><code>// For showing wallet\nconst showWallet = () =&gt; {\n  if(authRef !== null){\n    authRef.current.showWallet();\n  }\n}\n\n// For hiding wallet\nconst hideWallet = () =&gt; {\n  if(authRef !== null){\n    authRef.current.hideWallet();\n  }\n}\n</code></pre> <pre><code>// For getting logged in user info\nconst getUserInfo = async () =&gt; {\n  if(authRef !== null){\n    return authRef.current.getUserInfo();\n  }\n};\n</code></pre> <pre><code>// For getting current account\nconst getAccount = async () =&gt; {\n  if(authRef !== null){\n    return await authRef.current.getAccount();\n  }\n};\n</code></pre> <pre><code>return (\n    &lt;View &gt;\n      &lt;Button\n        title={\"Get User Info\"}\n        onPress={() =&gt;\n          getUserInfo()\n        }\n      /&gt;\n      &lt;Button\n        title={\"Send Transaction\"}\n        onPress={() =&gt;\n          sendTransaction({ to: '', value: '', data: '' })\n        }\n      /&gt;\n        &lt;Button\n        title={\"Get Account\"}\n        onPress={() =&gt;\n          getAccount()\n        }\n      /&gt;\n\n        &lt;Button\n        title={\"Send Request\"}\n        onPress={() =&gt;{\n          sendRequest({ method:\"\", params:[] })\n        }}\n      /&gt;\n      &lt;Button\n        title={\"log out\"}\n        onPress={() =&gt; logout()}\n      /&gt;\n      &lt;Auth\n          clientId=\"xar_test_....\"\n          theme=\"dark\"\n          ref={authRef}\n      /&gt;\n    &lt;/View&gt;\n  );\n</code></pre> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"quick-start/react-native-quick-start/#see-also","title":"See also","text":"<p>'React-Native' integration example: See <code>sample-auth-react-native</code> submodule in SDK Example GitHub repository.</p> <p>Arcana Auth React-Native SDK Quick Links</p> <ul> <li>Release notes</li> <li>Changelog</li> <li>Download auth-react-native</li> </ul>"},{"location":"quick-start/react-nextjs-quick-start/","title":"Get Started: React/Next.js Apps","text":"<p>Integrate 'React/Next.js' apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"quick-start/react-nextjs-quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>App must be registered via the Arcana Developer Dashboard: https://dashboard.arcana.network </li> <li>Optionally configure auth settings such as social login,  wallet user experience, etc.</li> </ul> <p>Supported Versions: React/NextJS, TypeScript</p> <ul> <li>React 18.00 or higher</li> <li>TypeScript 5.00 or higher</li> </ul>"},{"location":"quick-start/react-nextjs-quick-start/#1-install-sdks","title":"1. Install SDKs","text":"npmyarn <pre><code>npm install --save @arcana/auth @arcana/auth-react\n</code></pre> <pre><code>yarn add @arcana/auth  @arcana/auth-react\n</code></pre>"},{"location":"quick-start/react-nextjs-quick-start/#2-integrate","title":"2. Integrate","text":"<code>index.js</code><code>App.js</code> <pre><code>import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AuthProvider } from \"@arcana/auth\";\nimport { ProvideAuth } from \"@arcana/auth-react\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nconst provider = new AuthProvider(\n  \"xar_live_d7c88d9b033d100e4200d21a5c4897b896e60063\"\n);\n\nroot.render(\n  &lt;StrictMode&gt;\n    &lt;ProvideAuth provider={provider}&gt;\n      &lt;App /&gt;\n    &lt;/ProvideAuth&gt;\n  &lt;/StrictMode&gt;\n);\n</code></pre> <pre><code>import React from \"react\";\nimport { Auth } from \"@arcana/auth-react\";\n\nexport default function App() {\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;h1&gt;Sample Auth React App&lt;/h1&gt;\n      &lt;Auth /&gt;\n    &lt;/div&gt;\n  );\n</code></pre>"},{"location":"quick-start/react-nextjs-quick-start/#onboard-users","title":"Onboard Users","text":"<code>index.js</code><code>App.js</code> <pre><code>import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { AuthProvider } from \"@arcana/auth\";\nimport { ProvideAuth } from \"@arcana/auth-react\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nconst provider = new AuthProvider(\n  \"xar_live_d7c88d9b033d100e4200d21a5c4897b896e60063\",\n  {\n    network: \"mainnet\",\n    theme: \"light\",\n    connectOptions: {\n      compact: true,\n    },\n    chainConfig: {\n      chainId: \"80001\"\n    }\n  }\n); //See SDK Reference Guide for optional parameters\n\nroot.render(\n  &lt;StrictMode&gt;\n    &lt;ProvideAuth provider={provider}&gt;\n      &lt;App /&gt;\n    &lt;/ProvideAuth&gt;\n  &lt;/StrictMode&gt;\n);\n</code></pre> <pre><code>import { Auth } from \"@arcana/auth-react\";\n\n// Use &lt;Auth/&gt; to use the built-in, plug &amp; play login UI\nfunction App() {\n  const [theme, setTheme] = React.useState(\"light\");\n  return (\n    &lt;div&gt;\n      &lt;Auth theme={theme} /&gt;\n    &lt;/div&gt;\n)}\n\nexport default App;\n</code></pre>"},{"location":"quick-start/react-nextjs-quick-start/#sign-transactions","title":"Sign Transactions","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p> <p>That's all! </p> <p>The 'React/Next.js' app is ready to onboard users and allow them to sign blockchain transactions.</p>"},{"location":"quick-start/react-nextjs-quick-start/#3-advanced-usage","title":"3. Advanced Usage","text":"<code>AuthProvider</code> Optional Parameters <p>Besides Client ID input parameter, you can optionally customize these settings in the <code>AuthProvider</code> constructor:</p> <p><code>position</code>:  wallet position within the app context - <code>left</code>|<code>right</code></p> <p><code>theme</code>: wallet theme - <code>light</code>|<code>dark</code></p> <p><code>connectOptions</code>: compact mode for the built-in plug-and-play login UI - <code>true</code>|<code>false</code></p> <pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> <p>See <code>AuthProvider</code> constructor parameters for details.</p> Wallet Customization <p>Manage the user experience for signing blockchain transactions by configuring SDK usage. Specify the theme, branding settings of the in-app built-in Arcana wallet UI. Use wallet visibility and decide when to display the wallet UI in the app. Configure keyspace and enable the user experience of having the same wallet address across multiple apps integrated with the Arcana Auth SDK.</p> <p>You can also replace the built-in wallet UI with a  custom wallet UI.</p> Custom Login UI <p>You can onboard users through a custom login UI instead of the built-in plug-and-play one. See how to use custom login UI and onboard users in a 'React/Next.js' app.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"quick-start/react-nextjs-quick-start/#see-also","title":"See Also","text":"<p>'React/Next.js' integration example: See <code>sample-auth-react, sample-auth-nextjs</code> submodule in SDK Example GitHub repository.</p> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth React SDK Quick Links</p> <ul> <li>Arcana Auth React SDK Reference Guide</li> <li>Auth SDK Reference</li> <li>Arcana Auth SDK Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"quick-start/solana-quick-start/","title":"Get Started: Solana Apps","text":"<p>Integrate 'Solana' apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p> <p>Solana chains are pre-configured and instantly accessible to authenticated users via the Arcana wallet.</p>"},{"location":"quick-start/solana-quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the Solana app as instructed in the Solana Configuration Guide. Get a unique Client ID and use it for app integration.</p> </li> <li> <p>Configure social login providers to onboard users and customize the user experience for blockchain signing via the wallet settings. </p> </li> </ul>"},{"location":"quick-start/solana-quick-start/#1-install","title":"1. Install","text":"npmyarn <pre><code>npm install --save @arcana/auth\n</code></pre> <pre><code>yarn add @arcana/auth\n</code></pre>"},{"location":"quick-start/solana-quick-start/#2-integrate","title":"2. Integrate","text":"<pre><code>import { AuthProvider } from '@arcana/auth'\n</code></pre> <pre><code>const auth = new AuthProvider(\n  \"xar_test_445007f942xxxxxxxxxxxxxxxxxx484cAfd2\", // App client ID\n  { \n    alwaysVisible: false,     // default: true, wallet always visible\n    connectOptions: {\n      compact: true           // default: false, regular plug-and-play login UI\n    },\n    position: 'left',         // default: right\n    setWindowProvider: true,  // default: false, window.ethereum not set\n    theme: 'light',           // default: dark\n})\n</code></pre> <pre><code>try {\n  await auth.init()\n} catch (e) {\n  // Handle exception case\n}\n</code></pre> <p>Initialize First!</p> <p>The app must use <code>await</code> until the <code>init()</code> call is complete, before invoking any of the other Arcana Auth SDK functions listed in Auth SDK Reference.</p> <p>Solana apps can use the <code>auth.provider</code> to make standard JSON RPC calls in the context of an authenticated user.</p> <pre><code>const provider = auth.provider;\n</code></pre> <p>Use the Solana provider for issuing Solana Web3 wallet operations in the context of an authenticated user. </p> <pre><code>const solanaP = auth.solana;\n</code></pre>"},{"location":"quick-start/solana-quick-start/#onboard-users","title":"Onboard Users","text":"<pre><code>await auth.connect();\n</code></pre> Plug-and-Play Login UI"},{"location":"quick-start/solana-quick-start/#sign-transactions","title":"Sign Transactions","text":"<p>Use the standard EIP-1193 provider, <code>auth.provider</code>, for issuing Solana JSON-RPC calls in the context of the authenticated user. Use <code>auth.solana</code> Solana provider for issuing supported Web3 wallet operations on the Solana chain.</p> <pre><code>  const message = `Sign below to authenticate with CryptoCorgis to avoid digital dognappers`;\n  const encodedMessage = new TextEncoder().encode(message);\n  // To get a proper signature, the second parameter in signMessage call \n  // can be either \"hex\" or \"utf8\", depending on what kind of message we are signing. \n  // For plaintext, use \"utf8\"; \n  // For hex message, use \"hex\"\n  try {\n    const signature = await solanaP.signMessage(encodedMessage, \"hex\");\n    window.solanaSig = signature;\n    console.log(signature);\n  } catch (e) {\n    console.error(e);\n  }\n</code></pre> <p>For Solana, the following Web3 wallet operations are supported:</p> <ul> <li><code>signMessage</code></li> <li><code>signTransaction</code></li> <li><code>signAllTransactions</code></li> <li><code>signAndSendTransaction</code></li> </ul> <p>Refer to other supported Web3 wallet operations for details.</p> <p>That's all! </p> <p>The 'Solana' app is ready to onboard users and allow them to sign blockchain transactions.</p>"},{"location":"quick-start/solana-quick-start/#3-advanced-usage","title":"3. Advanced Usage","text":"<code>AuthProvider</code> Optional Parameters <p>Besides Client ID input parameter, you can optionally customize these settings in the <code>AuthProvider</code> constructor:</p> <p><code>position</code>:  wallet position within the app context - <code>left</code>|<code>right</code></p> <p><code>theme</code>: wallet theme - <code>light</code>|<code>dark</code></p> <p><code>connectOptions</code>: compact mode for the built-in plug-and-play login UI - <code>true</code>|<code>false</code></p> <pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> <p>See <code>AuthProvider</code> constructor parameters for details.</p> Wallet Customization <p>Manage the user experience for signing blockchain transactions by configuring SDK usage. Specify the theme, branding settings of the in-app built-in Arcana wallet UI. Use wallet visibility and decide when to display the wallet UI in the app. Configure keyspace and enable the user experience of having the same wallet address across multiple apps integrated with the Arcana Auth SDK.</p> <p>You can also replace the built-in wallet UI with a  custom wallet UI.</p> Custom Login UI <p>You can onboard users through a custom login UI instead of the built-in plug-and-play one. See how to use custom login UI and onboard users in a 'Solana' app.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"quick-start/solana-quick-start/#see-also","title":"See Also","text":"<p>'Solana' integration example: See <code>sample-auth-solana</code> submodule in SDK Example GitHub repository.</p> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"quick-start/unity-quick-start/","title":"Get Started: Unity Apps","text":"<p>Early Preview Release</p> <p>This feature of the Arcana Auth SDK is available only for Arcana Testnet as an early preview. Use it with caution. We are actively working on adding more functionality and fixes before making a formal release.</p> <p>Integrate Web3 'Unity' gaming apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"quick-start/unity-quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Register the app and configure auth usage settings via the Arcana Developer Dashboard. Get a unique Client ID before integrating the app.</p> </li> <li> <p>Configure social login providers to onboard users and customize the user experience for blockchain signing via the wallet settings. </p> </li> </ul>"},{"location":"quick-start/unity-quick-start/#1-unity-setup-auth-install","title":"1. Unity Setup, Auth Install","text":"<ul> <li> <p>Install NuGetForUnity.</p> </li> <li> <p>In the NuGet Toolbar at the top, click NuGet &gt; Manage NuGet packages. Manage NuGet Packages</p> </li> <li> <p>Install the following packages by STA: <code>Nethereum.Web3</code>, <code>WebsocketSharp.Core</code></p> </li> <li> <p>Use the Unity Editor Project Settings window to edit package settings for your project. Click Edit &gt; Project Settings &gt; Package Manager.</p> <ul> <li> <p>Edit Project Settings with URL https://npm-registry.arcana.network/ and set the scope to <code>com.cysharp.unitask, dev.voltstro</code> Edit Project Settings</p> </li> <li> <p>Add another new scoped registry with URL https://unitynuget-registry.azurewebsites.net and set the scope to <code>org.nuget</code>. Add Scoped Registry</p> </li> </ul> </li> <li> <p>In the NuGet window, use the NuGet Toolbar at the top, and click Window &gt; Package Manager &gt; Add Package by Name. Add Package by Name</p> </li> <li> <p>Add the following packages: <code>com.cysharp.unitask</code>, <code>`dev.voltstro.unitywebbrowser.engine.cef</code></p> <ul> <li> <p>Windows:  <code>dev.voltstro.unitywebbrowser.engine.cef.win.x64</code></p> </li> <li> <p>Linux: <code>dev.voltstro.unitywebbrowser.engine.cef.linux.x64</code></p> </li> <li> <p>MacOS: <code>dev.voltstro.unitywebbrowser.engine.cef.macos.x64</code></p> </li> </ul> </li> </ul> <p>See Unity Web Browser package list for details.</p> <ul> <li> <p>Download the Arcana Auth Unity SDK package: https://npm-registry.arcana.network/. Unzip the contents and copy them to the Assets folder of the Unity Project.</p> </li> <li> <p>Search for ArcanaSDK prefab in the 'Project Window' of the Unity Editor. Click Assets &gt; ArcanaSDK &gt; Prefabs &gt; ArcanaSDK. Drag this prefab into the project 'Hierarchy' and configure the prefab as shown here: Configure Arcana Prefab</p> </li> </ul>"},{"location":"quick-start/unity-quick-start/#2-integrate","title":"2. Integrate","text":"<pre><code>using ArcanaSDK;\n\nawait arcanaSDK.InitializeSDK(env, \"unique_clientID_for_registed_app\");\n</code></pre>"},{"location":"quick-start/unity-quick-start/#onboard-users","title":"Onboard Users","text":"<pre><code>// After initializing the SDK\n\nif (loginMethod == LoginMethod.Passwordless)\n  arcanaSDK.LoginWithOTP(email);\nelse\n  arcanaSDK.LoginWithSocial(loginMethod);\n</code></pre>"},{"location":"quick-start/unity-quick-start/#sign-transactions","title":"Sign Transactions","text":"<p>Use <code>Request</code> method to initiate Web3 Wallet operation requests. </p> <pre><code>responseTextField.text = \"\";\nif (parameters.text != null)\n{\n  response = (await arcanaSDK.Request(new RequestParams {\n      Method = method.text,\n      Params = JsonConvert.DeserializeObject&lt;object[]&gt;(parameters.text)\n  })).ToString();\n}\nelse\n{\n  response = (await arcanaSDK.Request(new RequestParams {\n      Method = method.text,\n  })).ToString();\n}\n</code></pre> <p>That's all! </p> <p>The 'Unity' app is ready to onboard users and allow them to sign blockchain transactions.</p>"},{"location":"quick-start/unity-quick-start/#3-advanced-usage","title":"3. Advanced Usage","text":"<code>AuthProvider</code> Optional Parameters <p>Besides Client ID input parameter, you can optionally customize these settings in the <code>AuthProvider</code> constructor:</p> <p><code>position</code>:  wallet position within the app context - <code>left</code>|<code>right</code></p> <p><code>theme</code>: wallet theme - <code>light</code>|<code>dark</code></p> <p><code>connectOptions</code>: compact mode for the built-in plug-and-play login UI - <code>true</code>|<code>false</code></p> <pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> <p>See <code>AuthProvider</code> constructor parameters for details.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"quick-start/unity-quick-start/#see-also","title":"See also","text":"<p>'Unity' integration example: See <code>sample-auth-unity</code> submodule in SDK Example GitHub repository.</p>"},{"location":"quick-start/vanilla-web-apps-quick-start/","title":"Get Started: HTML/CSS/JS Apps","text":"<p>Integrate 'HTML/CSS/JS' apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"quick-start/vanilla-web-apps-quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>App must be registered via the Arcana Developer Dashboard: https://dashboard.arcana.network </li> <li>Optionally configure auth settings such as social login,  wallet user experience, etc.</li> </ul>"},{"location":"quick-start/vanilla-web-apps-quick-start/#1-install","title":"1. Install","text":"npmyarn <pre><code>npm install --save @arcana/auth\n</code></pre> <pre><code>yarn add @arcana/auth\n</code></pre>"},{"location":"quick-start/vanilla-web-apps-quick-start/#2-integrate","title":"2. Integrate","text":"<pre><code>import { AuthProvider } from '@arcana/auth'\n</code></pre> <pre><code>const auth = new AuthProvider(\n  \"xar_test_445007f942xxxxxxxxxxxxxxxxxx484cAfd2\", // App client ID\n)\n</code></pre> <pre><code>try {\n  await auth.init()\n} catch (e) {\n  // Handle exception case\n}\n</code></pre> <p>Initialize First!</p> <p>The app must use <code>await</code> until the <code>init()</code> call is complete, before invoking any of the other Arcana Auth SDK functions listed in the Auth SDK Reference.</p>"},{"location":"quick-start/vanilla-web-apps-quick-start/#onboard-users","title":"Onboard Users","text":"<pre><code>await auth.connect();\n</code></pre> Plug-and-Play Login UI"},{"location":"quick-start/vanilla-web-apps-quick-start/#sign-transactions","title":"Sign Transactions","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p> <p>That's all! </p> <p>The 'HTML/CSS/JS' app is ready to onboard users and allow them to sign blockchain transactions.</p>"},{"location":"quick-start/vanilla-web-apps-quick-start/#3-advanced-usage","title":"3. Advanced Usage","text":"<code>AuthProvider</code> Optional Parameters <p>Besides Client ID input parameter, you can optionally customize these settings in the <code>AuthProvider</code> constructor:</p> <p><code>position</code>:  wallet position within the app context - <code>left</code>|<code>right</code></p> <p><code>theme</code>: wallet theme - <code>light</code>|<code>dark</code></p> <p><code>connectOptions</code>: compact mode for the built-in plug-and-play login UI - <code>true</code>|<code>false</code></p> <pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> <p>See <code>AuthProvider</code> constructor parameters for details.</p> Wallet Customization <p>Manage the user experience for signing blockchain transactions by configuring SDK usage. Specify the theme, branding settings of the in-app built-in Arcana wallet UI. Use wallet visibility and decide when to display the wallet UI in the app. Configure keyspace and enable the user experience of having the same wallet address across multiple apps integrated with the Arcana Auth SDK.</p> <p>You can also replace the built-in wallet UI with a  custom wallet UI.</p> Custom Login UI <p>You can onboard users through a custom login UI instead of the built-in plug-and-play one. See how to use custom login UI and onboard users in a 'HTML/CSS/JS' app.</p> Compact Login Modal <p>When using built-in plug-and-play login UI, you can select the compact modal instead of the regular one.</p> <p> Login UI Options </p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"quick-start/vanilla-web-apps-quick-start/#see-also","title":"See Also","text":"<p>'HTML/CSS/JS' integration example: See <code>sample-auth-html-css-js</code> submodule in SDK Example GitHub repository.</p> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"quick-start/vue-quick-start/","title":"Get Started: Vue Apps","text":"<p>Integrate 'Vue' apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"quick-start/vue-quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>App must be registered via the Arcana Developer Dashboard: https://dashboard.arcana.network </li> <li>Optionally configure auth settings such as social login,  wallet user experience, etc.</li> </ul> <p>Supported Vue Version</p> <p>We support apps using Vue v3.3 or higher.</p>"},{"location":"quick-start/vue-quick-start/#1-install","title":"1. Install","text":"npmyarn <pre><code>npm install --save @arcana/auth\n</code></pre> <pre><code>yarn add @arcana/auth\n</code></pre>"},{"location":"quick-start/vue-quick-start/#2-integrate","title":"2. Integrate","text":"<pre><code>import { AuthProvider } from '@arcana/auth'\n</code></pre> <pre><code>const auth = new AuthProvider(\n  \"xar_test_445007f942xxxxxxxxxxxxxxxxxx484cAfd2\", // App client ID\n)\n</code></pre> <pre><code>try {\n  await auth.init()\n} catch (e) {\n  // Handle exception case\n}\n</code></pre> <p>Initialize First!</p> <p>The app must use <code>await</code> until the <code>init()</code> call is complete, before invoking any of the other Arcana Auth SDK functions listed in the Auth SDK Reference.</p>"},{"location":"quick-start/vue-quick-start/#onboard-users","title":"Onboard Users","text":"<pre><code>await auth.connect();\n</code></pre> Plug-and-Play Login UI"},{"location":"quick-start/vue-quick-start/#sign-transactions","title":"Sign Transactions","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p> <p>That's all! </p> <p>The 'Vue' app is ready to onboard users and allow them to sign blockchain transactions.</p>"},{"location":"quick-start/vue-quick-start/#3-advanced-usage","title":"3. Advanced Usage","text":"<code>AuthProvider</code> Optional Parameters <p>Besides Client ID input parameter, you can optionally customize these settings in the <code>AuthProvider</code> constructor:</p> <p><code>position</code>:  wallet position within the app context - <code>left</code>|<code>right</code></p> <p><code>theme</code>: wallet theme - <code>light</code>|<code>dark</code></p> <p><code>connectOptions</code>: compact mode for the built-in plug-and-play login UI - <code>true</code>|<code>false</code></p> <pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> <p>See <code>AuthProvider</code> constructor parameters for details.</p> Wallet Customization <p>Manage the user experience for signing blockchain transactions by configuring SDK usage. Specify the theme, branding settings of the in-app built-in Arcana wallet UI. Use wallet visibility and decide when to display the wallet UI in the app. Configure keyspace and enable the user experience of having the same wallet address across multiple apps integrated with the Arcana Auth SDK.</p> <p>You can also replace the built-in wallet UI with a  custom wallet UI.</p> Custom Login UI <p>You can onboard users through a custom login UI instead of the built-in plug-and-play one. See how to use custom login UI and onboard users in a 'Vue' app.</p> Compact Login Modal <p>When using built-in plug-and-play login UI, you can select the compact modal instead of the regular one.</p> <p> Login UI Options </p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"quick-start/vue-quick-start/#see-also","title":"See Also","text":"<p>'Vue' integration example: See <code>'</code>sample-auth-vue<code>'</code> submodule in SDK Example GitHub repository.</p> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"quick-start/wagmi-quick-start/","title":"Get Started: Wagmi Apps","text":"<p>Wagmi is an open-source collection of React Hooks that enables developers to interact with the Ethereum blockchain.</p> <p>Integrate 'Wagmi' apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"quick-start/wagmi-quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>App must be registered via the Arcana Developer Dashboard: https://dashboard.arcana.network </li> <li>Optionally configure auth settings such as social login,  wallet user experience, etc.</li> </ul>"},{"location":"quick-start/wagmi-quick-start/#1-install-sdks","title":"1. Install SDKs","text":"npmyarn <p>Wagmi 2.0</p> <pre><code>npm install --save @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>npm install --save @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre> <p>Wagmi 2.0</p> <pre><code>yarn add @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>yarn add @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre>"},{"location":"quick-start/wagmi-quick-start/#2-integrate","title":"2. Integrate","text":"<pre><code>import { AuthProvider } from \"@arcana/auth\";\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\"\n\nconst auth = new AuthProvider('your-client-id');\n\nconst connector = new ArcanaConnector({ auth });\n</code></pre> Wagmi 2.0Wagmi 1.0 <pre><code>//\n// For apps using Wagmi versions v2.a.b and auth-wagmi v3.x.y\n//\n\nimport { http, createConfig } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\nimport { coinbaseWallet, injected, walletConnect } from 'wagmi/connectors'\nimport { AuthProvider } from '@arcana/auth'\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\"\n\nlet auth: AuthProvider | null;\n\nif (!auth) {\n  auth = new AuthProvider(\n    \"Your-app-Client-ID\"\n  );\n}\n\nconst connector = new ArcanaConnector({ auth });\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [\n    injected(),\n    coinbaseWallet({ appName: 'Create Wagmi' }),\n    walletConnect({ projectId: import.meta.env.VITE_WC_PROJECT_ID }),\n    connector(),\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n\ndeclare module 'wagmi' {\n  interface Register {\n    config: typeof config\n  }\n}\n...\n</code></pre> <pre><code>//   \n// For apps using Wagmi versions v1.x.y and auth-wagmi v2.a.b\n//\n\nimport { configureChains, createConfig, WagmiConfig } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { polygon, polygonAmoy } from \"wagmi/chains\";\nimport { useAccount, useConnect, useDisconnect, useBalance } from 'wagmi'\nimport \"../styles/globals.css\";\nimport { AuthProvider } from '@arcana/auth'\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\"\n\nlet auth: AuthProvider | null;\n\nif (!auth) {\n  auth = new AuthProvider(\n    \"Your-app-Client-ID\"\n  );\n}\n\nconst { chains, provider, webSocketProvider } = configureChains(\n  [mainnet, polygon, polygonAmoy],\n  [publicProvider()],\n  { targetQuorum: 1 }\n);\n\nexport const connector = (chains: Chain[]) =&gt; {\n  return new ArcanaConnector({\n    chains,\n    options: {\n      auth: auth,\n    },\n  });\n};\n\nconst { chains, publicClient } = configureChains(\n  [polygon, polygonAmoy],\n  [publicProvider()]\n);\n\nexport const wagmiEntity = createConfig({\n  autoConnect: true,\n  connectors: [connector(chains)],\n  publicClient,\n});\n...\n</code></pre>"},{"location":"quick-start/wagmi-quick-start/#onboard-users","title":"Onboard Users","text":"Wagmi 2.0Wagmi 1.0 <pre><code>//\n// For apps using Wagmi versions v2.a.b and auth-wagmi v3.x.y\n//\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { Buffer } from 'buffer'\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { WagmiProvider } from 'wagmi'\n\nimport App from './App.tsx'\nimport { config } from './wagmi.ts'\n\nimport './index.css'\n\nglobalThis.Buffer = Buffer\n\nconst queryClient = new QueryClient()\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  &lt;React.StrictMode&gt;\n    &lt;WagmiProvider config={config}&gt;\n      &lt;QueryClientProvider client={queryClient}&gt;\n        &lt;App /&gt;\n      &lt;/QueryClientProvider&gt;\n    &lt;/WagmiProvider&gt;\n  &lt;/React.StrictMode&gt;,\n)\n</code></pre> <pre><code>//\n// For apps using Wagmi versions v1.a.b and auth-wagmi v2.x.y\n//\nfunction App({ Component, pageProps }: AppProps) {\n  return (\n    &lt;WagmiConfig config={wagmiEntity}&gt;\n      &lt;Component {...pageProps} /&gt;\n    &lt;/WagmiConfig&gt;\n  );\n}\n</code></pre>"},{"location":"quick-start/wagmi-quick-start/#sign-transactions","title":"Sign Transactions","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p> <p>That's all! </p> <p>The 'Wagmi' app is ready to onboard users and allow them to sign blockchain transactions.</p>"},{"location":"quick-start/wagmi-quick-start/#3-advanced-usage","title":"3. Advanced Usage","text":"<code>AuthProvider</code> Optional Parameters <p>Besides Client ID input parameter, you can optionally customize these settings in the <code>AuthProvider</code> constructor:</p> <p><code>position</code>:  wallet position within the app context - <code>left</code>|<code>right</code></p> <p><code>theme</code>: wallet theme - <code>light</code>|<code>dark</code></p> <p><code>connectOptions</code>: compact mode for the built-in plug-and-play login UI - <code>true</code>|<code>false</code></p> <pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> <p>See <code>AuthProvider</code> constructor parameters for details.</p> Wallet Customization <p>Manage the user experience for signing blockchain transactions by configuring SDK usage. Specify the theme, branding settings of the in-app built-in Arcana wallet UI. Use wallet visibility and decide when to display the wallet UI in the app. Configure keyspace and enable the user experience of having the same wallet address across multiple apps integrated with the Arcana Auth SDK.</p> <p>You can also replace the built-in wallet UI with a  custom wallet UI.</p> Custom Login UI <p>You can onboard users through a custom login UI instead of the built-in plug-and-play one. See how to use custom login UI and onboard users in a 'Wagmi' app.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"quick-start/wagmi-quick-start/#see-also","title":"See Also","text":"<p>'Wagmi' integration example: See <code>sample-auth-wagmi-2`, `sample-auth-wagmi-viem`, `sample-auth-wagmi</code> submodule in SDK Example GitHub repository.</p> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth Wagmi SDK Quick Links</p> <ul> <li>Auth Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"quick-start/walletconnect-quick-start/","title":"Get Started: WalletConnect Apps","text":"<p>WalletConnect is a Web3 framework to connect an app with various wallet options.  </p> <p>Integrate 'WalletConnect' apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"quick-start/walletconnect-quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>App must be registered via the Arcana Developer Dashboard: https://dashboard.arcana.network </li> <li>Optionally configure auth settings such as social login,  wallet user experience, etc.</li> </ul> <p>Supported WalletConnect, Wagmi Versions</p> <ul> <li>WalletConnect 1.7.8</li> <li>Wagmi v2.0 or higher</li> </ul>"},{"location":"quick-start/walletconnect-quick-start/#1-install","title":"1. Install","text":"npmyarn <p>Wagmi 2.0</p> <pre><code>npm install --save @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>npm install --save @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre> <p>Wagmi 2.0</p> <pre><code>yarn add @arcana/auth-wagmi@3.0.0 @arcana/auth@1.0.12\n</code></pre> <p>Wagmi 1.0</p> <pre><code>yarn add @arcana/auth-wagmi@2.0.0 @arcana/auth\n</code></pre>"},{"location":"quick-start/walletconnect-quick-start/#2-integrate","title":"2. Integrate","text":"<code>ArcanaConnector.ts</code><code>wagmi.ts</code> <pre><code>// Set up Arcana Auth \n\nimport { AuthProvider } from \"@arcana/auth\";\n\nlet auth: AuthProvider | null;\n\nconst getAuthProvider = () =&gt; {\n  if (!auth) {\n    auth = new AuthProvider(\n      \"xar_test_b2dde12aad64eb35d72b2c80926338e178b1fa3f\"\n    );\n  }\n  return auth;\n};\n\nexport { getAuthProvider };\n</code></pre> <pre><code>//This example uses Arcana Wallet connector and Coinbase Wallet\n\nimport { http, createConfig } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\nimport { coinbaseWallet, injected, walletConnect } from 'wagmi/connectors'\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\";\nimport { getAuthProvider } from './arcanaConnector';\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [\n    injected(),\n    coinbaseWallet({ appName: 'Create Wagmi' }),\n    walletConnect({\n      projectId: '3fcc6bba6f1de962d911bb5b5c3dba68', //WalletConnect ProjectID\n    }),\n    ArcanaConnector(\n      {\n        auth: getAuthProvider(),\n      }\n    )\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n\ndeclare module 'wagmi' {\n  interface Register {\n    config: typeof config\n  }\n}\n</code></pre>"},{"location":"quick-start/walletconnect-quick-start/#onboard-users","title":"Onboard Users","text":"<code>main.ts</code> <pre><code>//Use \"`auth-wagmi` version &gt; v2.0.0\"\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { Buffer } from 'buffer'\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { WagmiProvider } from 'wagmi'\nimport App from './App.tsx'\nimport { config } from './wagmi.ts'\n\nimport './index.css'\n\nglobalThis.Buffer = Buffer\n\nconst queryClient = new QueryClient()\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  &lt;React.StrictMode&gt;\n    &lt;WagmiProvider config={config}&gt;\n      &lt;QueryClientProvider client={queryClient}&gt;\n        &lt;App /&gt;\n      &lt;/QueryClientProvider&gt;\n    &lt;/WagmiProvider&gt;\n  &lt;/React.StrictMode&gt;,\n)\n</code></pre>"},{"location":"quick-start/walletconnect-quick-start/#sign-transactions","title":"Sign Transactions","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p> <p>That's all! </p> <p>The 'WalletConnect' app is ready to onboard users and allow them to sign blockchain transactions.</p>"},{"location":"quick-start/walletconnect-quick-start/#3-advanced-usage","title":"3. Advanced Usage","text":"<code>AuthProvider</code> Optional Parameters <p>Besides Client ID input parameter, you can optionally customize these settings in the <code>AuthProvider</code> constructor:</p> <p><code>position</code>:  wallet position within the app context - <code>left</code>|<code>right</code></p> <p><code>theme</code>: wallet theme - <code>light</code>|<code>dark</code></p> <p><code>connectOptions</code>: compact mode for the built-in plug-and-play login UI - <code>true</code>|<code>false</code></p> <pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> <p>See <code>AuthProvider</code> constructor parameters for details.</p> Custom Login UI <p>You can onboard users through a custom login UI instead of the built-in plug-and-play one. See how to use custom login UI and onboard users in a 'WalletConnect' app.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"quick-start/walletconnect-quick-start/#see-also","title":"See Also","text":"<p>'WalletConnect' integration example: See <code>sample-auth-walletconnect</code> submodule in SDK Example GitHub repository.</p> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth Wagmi SDK Quick Links</p> <ul> <li>Auth Wagmi SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Try Demo App </p>"},{"location":"quick-start/web3-react-quick-start/","title":"Get Started: Web3-React Apps","text":"<p>Web3-React is a React framework for Ethereum that connects Web3 apps to multiple wallets and chains. </p> <p>Integrate Web3 apps with Arcana Auth SDK and onboard users via social login. Enable users to sign blockchain transactions with the in-app Arcana wallet.</p>"},{"location":"quick-start/web3-react-quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>App must be registered via the Arcana Developer Dashboard: https://dashboard.arcana.network </li> <li>Optionally configure auth settings such as social login,  wallet user experience, etc.</li> </ul> <p>Web3-React Version</p> <p>We support apps using Web3-react v8.2.0 or higher.</p>"},{"location":"quick-start/web3-react-quick-start/#1-install-sdks","title":"1. Install SDKs","text":"npmyarn <pre><code>npm install --save @arcana/auth-web3-react @arcana/auth\n</code></pre> <pre><code>yarn add @arcana/auth-web3-react @arcana/auth\n</code></pre>"},{"location":"quick-start/web3-react-quick-start/#2-integrate","title":"2. Integrate","text":"<pre><code>import { initializeConnector } from \"@web3-react/core\";\nimport { ArcanaConnector } from \"@arcana/auth-web3-react\";\nimport { AuthProvider } from \"@arcana/auth\";\nimport { URLS } from \"../chains\";\n\nconst auth = new AuthProvider(\n  \"xar_test_b2ddexxxxxxxxxxxxxxxxxxxx8b1fa3f\"  //App client ID via Dashboard\n);\nexport const [arcanaConnect, hooks] = initializeConnector&lt;ArcanaConnector&gt;(\n  (actions) =&gt;\n    new ArcanaConnector(auth, {\n      actions,\n    })\n);\n...\n</code></pre>"},{"location":"quick-start/web3-react-quick-start/#onboard-users","title":"Onboard Users","text":"<pre><code>import { useEffect, useState } from \"react\";\n\nimport { MAINNET_CHAINS } from \"../../chains\";\nimport { hooks, arcanaConnect } from \"../../connectors/arcanaWallet\";\nimport { Card } from \"../Card\";\n\nconst CHAIN_IDS = Object.keys(MAINNET_CHAINS).map(Number);\n\nconst {\n  useChainId,\n  useAccounts,\n  useIsActivating,\n  useIsActive,\n  useProvider,\n  useENSNames,\n} = hooks;\n\nexport default function ArcanaConnectCard() {\n  const chainId = useChainId();\n  const accounts = useAccounts();\n  const isActivating = useIsActivating();\n\n  const isActive = useIsActive();\n\n  const provider = useProvider();\n  const ENSNames = useENSNames(provider);\n\n  const [error, setError] = useState(undefined);\n\n  // attempt to connect eagerly on mount\n  useEffect(() =&gt; {\n    arcanaConnect.connectEagerly().catch((error) =&gt; {\n      console.debug(\"Failed to connect eagerly to arcanaConnect\", error);\n    });\n  }, []);\n\n  return (\n    &lt;Card\n      connector={arcanaConnect}\n      activeChainId={chainId}\n      chainIds={CHAIN_IDS}\n      isActivating={isActivating}\n      isActive={isActive}\n      error={error}\n      setError={setError}\n      accounts={accounts}\n      provider={provider}\n      ENSNames={ENSNames}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"quick-start/web3-react-quick-start/#sign-transactions","title":"Sign Transactions","text":"<p>Use  <code>AuthProvider</code>, the EIP-1193 provider offered by the SDK, to call supported JSON/RPC functions and  Web3 wallet operations in the authenticated user's context.</p> <p>That's all! </p> <p>The 'Web3-React' app is ready to onboard users and allow them to sign blockchain transactions.</p>"},{"location":"quick-start/web3-react-quick-start/#3-advanced-usage","title":"3. Advanced Usage","text":"<code>AuthProvider</code> Optional Parameters <p>Besides Client ID input parameter, you can optionally customize these settings in the <code>AuthProvider</code> constructor:</p> <p><code>position</code>:  wallet position within the app context - <code>left</code>|<code>right</code></p> <p><code>theme</code>: wallet theme - <code>light</code>|<code>dark</code></p> <p><code>connectOptions</code>: compact mode for the built-in plug-and-play login UI - <code>true</code>|<code>false</code></p> <pre><code>connectOptions: {\n      compact: true // default - false\n},\n</code></pre> <p>See <code>AuthProvider</code> constructor parameters for details.</p> Custom Login UI <p>You can onboard users through a custom login UI instead of the built-in plug-and-play one. See how to use custom login UI and onboard users in a 'Web3-React' app.</p> Arcana JWT Token <code>loginToken</code><code>userDIDToken</code> <p>Upon successful authentication, Arcana Auth SDK returns a unique JWT token to the app called the Arcana JWT Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>loginToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use if required.</p> <p>In the future, the Arcana JWT Token will be deprecated. Use <code>userDIDToken</code> to verify user.   </p> <p>Upon successful authentication, Arcana Auth SDK returns a unique DID token to the app called the Arcana DID Token. App developers can access this token via <code>getUser()</code> method and refer to the <code>userDIDToken</code> field of the <code>UserInfo</code> object. </p> <p>Developers can use this token to verify the user and subsequently generate another token for app use.</p>"},{"location":"quick-start/web3-react-quick-start/#see-also","title":"See Also","text":"<p>'Web3-React' integration example: See <code>sample-auth-web3-react</code> submodule in SDK Example GitHub repository.</p> <p>Arcana Auth SDK Quick Links</p> <ul> <li>Auth SDK Reference</li> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> <p>Arcana Auth Web3 React SDK Quick Links</p> <ul> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul>"},{"location":"relnotes/latest-auth-release-note/","title":"Latest Release Note for Auth SDK","text":"<p>Product Update Date: 22 May, 2025 </p> <p>Version: 1.0.12</p> <p>Download and Install Auth SDK</p> <p>The product consists of:</p> <ol> <li> <p>Arcana Auth SDK </p> Web AppsMobile AppsGaming Apps (Unity) <ul> <li><code>auth</code> Version: 1.0.12 Release Date: 02 Jul 2024 13:57:09 UTC </li> <li><code>auth-react</code></li> <li><code>auth-wagmi</code> </li> <li><code>auth-web3-react</code></li> </ul> <ul> <li><code>arcana_auth_flutter</code></li> <li><code>auth-react-native</code></li> </ul> <ul> <li><code>arcana-auth-sdk</code></li> </ul> </li> <li> <p>Arcana Developer Dashboard</p> </li> <li> <p>Arcana wallet UI</p> </li> <li> <p>Arcana Auth-Core SDK</p> </li> </ol>"},{"location":"relnotes/latest-auth-release-note/#what-is-new","title":"What is New?","text":"<ul> <li> <p>New Onboarding Options: Apps integrating with the Arcana Auth SDK can now allow users to onboard via Passkey or via new supported social login providers: Telegram and Apple. See how to onboard users via passkeys for details. Developers must first set up Passkeys, and configure Telegram, Apple Settings through the dashboard before adding code in the app to onboard the user via these mechanisms. Learn more...</p> </li> <li> <p>Additional branding Customizations: Apps can now customize the wallet UI with more theme options. You can also rebrand the OTP email for passwordless onboarding. Learn more...</p> </li> <li> <p>Bug fixes and performance enhancements related to user login and polyfilling.</p> </li> </ul>"},{"location":"relnotes/latest-auth-release-note/#what-has-changed","title":"What has changed?","text":"<p>To migrate to the latest release, re-install the SDK. This release does not require you to pay any usage fee.</p> <p>Changelog</p>"},{"location":"relnotes/latest-auth-release-note/#get-started","title":"Get Started","text":"<ul> <li>Arcana Auth SDK Quick Start Guides</li> <li>Unity Auth Integration Example</li> </ul> <ul> <li>Integration examples</li> </ul>"},{"location":"relnotes/latest-auth-release-note/#previous-releases","title":"Previous Releases","text":"<p>Are you using an older version of the Arcana Auth SDK?</p> <p>Refer to the  release notes archive and Migration Guides. Upgrade to the latest version.</p>"},{"location":"relnotes/latest-auth-release-note/#questions","title":"Questions?","text":"<p>Refer to the  Arcana Auth FAQ, Troubleshooting Guide, and other developer resources.</p> <p>Can't find what you are looking for? Contact Arcana Support.</p>"},{"location":"relnotes/latest-ca-release-note/","title":"Latest Release Note for CA SDK","text":"<p>Release Date: 15 Jan 2025 12:23:07 UTC </p> <p>Version: v0.0.3</p> <p>Download and Install CA SDK</p>"},{"location":"relnotes/latest-ca-release-note/#what-is-new","title":"What is New?","text":"<p>This major SDK release supports chain abstracted transaction for the following chains:</p> <ul> <li>BSC chain,  BNB token</li> <li>Fuel chain</li> </ul> <p>Web3 apps integrating with the SDK do not need any integration code changes if they are using BSC chain for chain abstracted transactions.</p> <p>For Fuel, the integration code will need some updates.</p> <p>Refer to the code below for details on how to enable Fuel in a Web3 app  and utilize the Fuel connector for chain abstracted transactions.</p> <pre><code>import { CA } from '@arcana/ca-sdk';\nconst provider = window.ethereum;\nconst ca = new CA();\n//Set the EVM provider  \nca.setEVMProvider(provider);\n\n//Initialize ca\nawait ca.init();\n\n//connector refers to https://github.com/FuelLabs/fuel-connectors/wiki\nawait ca.setFuelConnector(connector);\nconst { provider, connector: CAconnector } = await ca.getFuelWithCA();\n\nconst address = CAconnector.currentAccount()!;\nconst account = new Account(address, provider, CAconnector);\n\n//chain abstraction enabled transfer\nawait account.transfer(\n    \"0xE78655DfAd552fc3658c01bfb427b9EAb0c628F54e60b54fDA16c95aaAdE797A\",\n    1000000,\n    \"0xa0265fb5c32f6e8db3197af3c7eb05c48ae373605b8165b6f4a51c5b0ba4812e\",\n);\n</code></pre> <p>Check out the complete list of supported chains and tokens.</p> <p>See Arcana CA SDK Reference for details.</p> <p>Changelog </p>"},{"location":"relnotes/latest-ca-release-note/#get-started","title":"Get Started","text":"<ul> <li>Arcana CA SDK Quick Start Guide</li> <li>Integration example</li> <li>Arcana CA SDK Reference</li> </ul>"},{"location":"relnotes/latest-ca-release-note/#previous-releases","title":"Previous Releases","text":"<p>Are you using an older version of the Arcana CA SDK?</p> <p>Refer to the  release notes archive. Upgrade to the latest version.</p>"},{"location":"relnotes/latest-ca-release-note/#questions","title":"Questions?","text":"<p>Can't find what you are looking for? Contact Arcana Support.</p>"},{"location":"relnotes/latest-ca-wagmi-release-note/","title":"Latest Release Note for CA Wagmi SDK","text":"<p>Release Date: 10 Feb 2025 12:23:07 UTC </p> <p>Version: v0.0.4</p> <p>Download and Install CA Wagmi SDK</p>"},{"location":"relnotes/latest-ca-wagmi-release-note/#what-is-new","title":"What is New?","text":"<p>This is a major release of the Arcana CA Wagmi SDK with  usage changes.</p> <ul> <li>Installation change: In addition to the <code>ca-wagmi</code> SDK, also install <code>ca-sdk</code>.</li> <li><code>CAProvider</code> change: The <code>CAProvider</code> requires <code>client</code> and <code>network</code> (optional) params. Create a new <code>CA</code> object and specify it as the <code>client</code> parameter when creating the <code>CAProvider</code> component.</li> <li>New hook: Use <code>useGetMyIntent(page))</code> to get a list of intents created in response to user's requests for funds.</li> </ul> <p>Check out the complete list of supported chains and tokens.</p> <p>See Arcana CA Wagmi SDK Reference for details.</p> <p>Changelog</p>"},{"location":"relnotes/latest-ca-wagmi-release-note/#get-started","title":"Get Started","text":"<ul> <li>Arcana CA Wagmi SDK Quick Start Guide</li> <li>Integration example</li> <li>Arcana CA Wagmi SDK Reference</li> </ul>"},{"location":"relnotes/latest-ca-wagmi-release-note/#previous-releases","title":"Previous Releases","text":"<p>Are you using an older version of the Arcana CA Wagmi SDK?</p> <p>Refer to the  release notes archive. Upgrade to the latest version.</p>"},{"location":"relnotes/latest-ca-wagmi-release-note/#questions","title":"Questions?","text":"<p>Can't find what you are looking for? Contact Arcana Support.</p>"},{"location":"relnotes/rn-beta-auth-v0.3.0/","title":"Release Notes Arcana Auth (Testnet)","text":"<p>Version: v0.3.0</p> <p>Release Date: December 2022</p> <p>This release of the Arcana Auth SDK product consists of the following components:</p> <ul> <li>Arcana Auth SDK v0.0.3</li> <li>Arcana Developer Dashboard</li> <li>Arcana wallet UI</li> </ul>"},{"location":"relnotes/rn-beta-auth-v0.3.0/#whats-new","title":"What's New?","text":""},{"location":"relnotes/rn-beta-auth-v0.3.0/#nft-support","title":"NFT Support","text":"<p>A new wallet tab is now available to manage and view details related to the NFTs owned by the wallet address.</p> <ul> <li>View any NFT of the type image, audio, or video</li> <li>Transfer NFTs from within the wallet</li> <li>Add NFTs to the wallet by searching from a list of popular collections on Ethereum Mainnet</li> </ul> <p>Refer to the documentation on managing NFT Assets.</p> View NFT Assets"},{"location":"relnotes/rn-beta-auth-v0.3.0/#combined-notification-ui","title":"Combined notification UI","text":"<p>This release has a new UI for blockchain transaction notifications. This combined notification UI in the Arcana wallet lists the following type of blockchain transaction activity:</p> <ul> <li>Send transactions for native as well as custom ERC20 tokens</li> <li>Send transactions for NFTs</li> <li>Smart contract deployment</li> <li>Smart contract interaction</li> </ul> <p>See the notifications tab for details.</p> Activity Tab"},{"location":"relnotes/rn-beta-auth-v0.3.0/#add-tokens-programmatically","title":"Add Tokens Programmatically","text":"<p>Arcana wallet now supports the programmatic addition of custom tokens by application developers via the <code>eth_watchAsset</code> JSON RPC function.</p>"},{"location":"relnotes/rn-beta-auth-v0.3.0/#changes","title":"Changes","text":"<ul> <li> <p>The Arcana Storage SDK is no longer supported. If you were using the Storage SDK in your application, contact the Arcana support team. </p> </li> <li> <p>The activity tab was earlier located next to the assets tab in the Arcana wallet UI. All the information displayed in the activity tab earlier can now be accessed via the newly added notifications tab.</p> </li> </ul>"},{"location":"relnotes/rn-beta-auth-v0.3.0/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>The logout issue related to the passwordless authentication has been fixed</li> </ul> <p>Use Latest Release</p> <p>If you were using the Arcana Auth SDK v0.2.2 release or earlier, we highly recommend that you refer to the Arcana Auth SDK 0.3.0 Migration Guide.</p>"},{"location":"relnotes/rn-beta-auth-v0.3.0/#get-started","title":"Get Started","text":"<p>Ready to dive in? </p> <p>See Arcana Auth SDK Quick Start Guides for details. </p> <p>Check out the sample dApp integration example for apps using React, Next.js, and Vue frameworks in auth-examples repository.</p>"},{"location":"relnotes/rn-beta-auth-v0.3.0/#questions","title":"Questions?","text":"<p>Refer to the Arcana Auth FAQ, Troubleshooting Guide, and other developer resources, or contact Arcana Support.</p>"},{"location":"relnotes/rn-ca-v0.0.2/","title":"CA SDK Release Note","text":"<p>Release Date: Jan 3, 2025 </p> <p>Version: v0.0.2</p>"},{"location":"relnotes/rn-ca-v0.0.2/#what-is-new","title":"What is New?","text":"<p>Unified Balance: Integrate Web3 apps with the CA-SDK to enable unified balance for users. Unified balance lets users view combined balance in the wallet and beat liquidity fragmentation via Arcana's chain abstraction. Users can spend unified balance on any chain. Learn more...</p> <p>See supported chains and tokens.</p> <p>Changelog </p>"},{"location":"relnotes/rn-ca-v0.0.2/#get-started","title":"Get Started","text":"<ul> <li>Arcana CA SDK Quick Start Guides</li> <li>Integration example</li> <li>Arcana CA SDK Reference</li> </ul>"},{"location":"relnotes/rn-ca-v0.0.2/#previous-releases","title":"Previous Releases","text":"<p>Are you using an older version of the Arcana CA SDK?</p> <p>Refer to the  release notes archive. Upgrade to the latest version.</p>"},{"location":"relnotes/rn-ca-v0.0.2/#questions","title":"Questions?","text":"<p>Can't find what you are looking for? Contact Arcana Support.</p>"},{"location":"relnotes/rn-ca-v0.0.3/","title":"CA SDK Release Note","text":"<p>Release Date: Jan 15, 2025 </p> <p>Version: v0.0.3</p>"},{"location":"relnotes/rn-ca-v0.0.3/#what-is-new","title":"What is New?","text":"<p>Use Unified Balance: for chain abstracted transactions across these newly supported chains:</p> <ul> <li>Linea</li> <li>Scroll</li> </ul> <p>Check out the complete list of supported chains and tokens.</p> <p>Changelog </p>"},{"location":"relnotes/rn-ca-v0.0.3/#get-started","title":"Get Started","text":"<ul> <li>Arcana CA SDK Quick Start Guides</li> <li>Integration example</li> <li>Arcana CA SDK Reference</li> </ul>"},{"location":"relnotes/rn-ca-v0.0.3/#previous-releases","title":"Previous Releases","text":"<p>Are you using an older version of the Arcana CA SDK?</p> <p>Refer to the  release notes archive. Upgrade to the latest version.</p>"},{"location":"relnotes/rn-ca-v0.0.3/#questions","title":"Questions?","text":"<p>Can't find what you are looking for? Contact Arcana Support.</p>"},{"location":"relnotes/rn-ca-v0.0.5/","title":"CA SDK Release Note","text":"<p>Release Date: 17 Feb, 2025 </p> <p>Version: v0.0.5</p>"},{"location":"relnotes/rn-ca-v0.0.5/#what-is-new","title":"What is New?","text":"<p>This is a minor update release with the following changes:</p> <ol> <li>Earlier, to instantiate a <code>CA</code> object, you had to pass in the <code>provider</code>. Now, there is no input parameter to the constructor.</li> <li>A new <code>setEVMProvider</code> method is added to the <code>CA</code> class. This method can be used to set the EVM provider later.</li> </ol> OldNew <pre><code>let provider: window.ethereum;\nconst ca = new CA(provider);\n</code></pre> <pre><code>let provider: window.ethereum;\nconst ca = new CA();\nca.setEVMProvider(provider);\n</code></pre> <p>Check out the complete list of supported chains and tokens.</p> <p>Changelog </p>"},{"location":"relnotes/rn-ca-v0.0.5/#get-started","title":"Get Started","text":"<ul> <li>Arcana CA SDK Quick Start Guide</li> <li>Integration example</li> <li>Arcana CA SDK Reference</li> </ul>"},{"location":"relnotes/rn-ca-v0.0.5/#previous-releases","title":"Previous Releases","text":"<p>Are you using an older version of the Arcana CA SDK?</p> <p>Refer to the  release notes archive. Upgrade to the latest version.</p>"},{"location":"relnotes/rn-ca-v0.0.5/#questions","title":"Questions?","text":"<p>Can't find what you are looking for? Contact Arcana Support.</p>"},{"location":"relnotes/rn-ca-v0.0.7/","title":"CA SDK Release Note","text":"<p>Release Date: 14 May, 2025 </p> <p>Version: v0.0.7</p>"},{"location":"relnotes/rn-ca-v0.0.7/#what-is-new","title":"What is New?","text":"<p>This is a minor update release with support for the Avalanche chain and a few bug fixes, improvements.</p> <pre><code>let provider = window.ethereum;\n\nconst ca = new CA();\nca.setEVMProvider(provider);\n</code></pre> <p>Check out the complete list of supported chains and tokens.</p> <p>Changelog </p>"},{"location":"relnotes/rn-ca-v0.0.7/#get-started","title":"Get Started","text":"<ul> <li>Arcana CA SDK Quick Start Guide</li> <li>Integration example</li> <li>Arcana CA SDK Reference</li> </ul>"},{"location":"relnotes/rn-ca-v0.0.7/#previous-releases","title":"Previous Releases","text":"<p>Are you using an older version of the Arcana CA SDK?</p> <p>Refer to the  release notes archive. Upgrade to the latest version.</p>"},{"location":"relnotes/rn-ca-v0.0.7/#questions","title":"Questions?","text":"<p>Can't find what you are looking for? Contact Arcana Support.</p>"},{"location":"relnotes/rn-ca-v1.0.3/","title":"CA SDK Release Note","text":"<p>Release Date: 30 Jun 2025 10:16:25 UTC </p> <p>Version: v1.0.3</p> <p>Download and Install CA SDK</p>"},{"location":"relnotes/rn-ca-v1.0.3/#what-is-new","title":"What is New?","text":"<p>This major SDK release contains refactored, optimized code and several usage improvements. It requires some changes to the  integration code that uses the following SDK methods. </p> <ul> <li><code>transfer</code></li> <li><code>bridge</code></li> <li><code>request</code></li> </ul>"},{"location":"relnotes/rn-ca-v1.0.3/#transfer","title":"<code>transfer</code>","text":"<p>Use <code>transfer</code> to issue a chain abstracted blockchain transaction.  Get the handler to simulate the transfer execution for intent details.</p> NewOld <pre><code>const handler = await ca.transfer({\nto: \"0x...\",\namount: 5,\nchainID: 10,\ntoken: \"eth\",\n});\n\n// Execute the transfer\nconst hash = await handler.exec();\n\n// Simulate the transfer, returns intent data and token info\nconst response = await handler.simulate();\n</code></pre> <pre><code>await ca.transfer().to(\"0x...\").amount(5).chain(10).token(\"eth\").exec()\n</code></pre>"},{"location":"relnotes/rn-ca-v1.0.3/#bridge","title":"<code>bridge</code>","text":"<p>Use <code>bridge</code> to issue a chain abstracted blockchain transaction. Get the handler to simulate the bridge execution for intent details.</p> NewOld <pre><code>const handler = await ca.bridge({\ntoken: \"usdt\",\namount: 10,\nchainID: 137,\n});\n\n// Execute the bridge\nawait handler.exec();\n\n// Simulate the bridge, returns intent data and token info\nconst response = await handler.simulate();\n</code></pre> <pre><code>await ca.bridge().token(\"usdt\").amount(10).chain(137).exec();\n</code></pre>"},{"location":"relnotes/rn-ca-v1.0.3/#getevmproviderwithca","title":"<code>getEVMProviderWithCA</code>","text":"<p>The new <code>getEVMProviderWithCA</code> method  retrieves the chain abstraction enabled EIP-1193 provider. Use this provider to issue <code>request</code>] with <code>eth_sendTransaction</code> for chain abstracted transactions.</p> <pre><code>let provider = window.ethereum;\n\nconst ca = new CA();\nca.setEVMProvider(provider);\nconst providerWithCA = ca.getEVMProviderWithCA();  // Get EIP-1193 provider first\n</code></pre>"},{"location":"relnotes/rn-ca-v1.0.3/#request","title":"<code>request</code>","text":"<p>Get a chain abstraction enabled EIP-1193 provider with <code>getEVMProviderWithCA</code>. Use this provider to issue chain abstracted <code>request</code> with <code>eth_sendTransaction</code>. </p> NewOld <pre><code>let provider = window.ethereum;\n\nconst ca = new CA();\nca.setEVMProvider(provider);\nconst providerWithCA = ca.getEVMProviderWithCA();  // Get EIP-1193 provider first\n\nawait providerWithCA.request({   // Then use EIP-1193 provider to issue request\n    method: \"eth_sendTransaction\",\n    params: [{\n        to: \"0xEa46Fb4b4Dc7755BA29D09Ef2a57C67bab383A2f\", \n        from: \"0x7f521A827Ce5e93f0C6D773525c0282a21466f8d\",\n        value: \"0x001\"\n    }],\n})\n</code></pre> <pre><code>let provider = window.ethereum;\n\nconst ca = new CA();\nca.setEVMProvider(provider);\n\nawait ca.request({  //This has changed, there is no request method implemented for CA class\n    method: \"eth_sendTransaction\",\n    params: [{\n        to: \"0xEa46Fb4b4Dc7755BA29D09Ef2a57C67bab383A2f\", \n        from: \"0x7f521A827Ce5e93f0C6D773525c0282a21466f8d\",\n        value: \"0x001\"\n    }],\n})\n</code></pre> <p>Check out the complete list of supported chains and tokens.</p> <p>See Arcana CA SDK Reference for details.</p> <p>Changelog </p>"},{"location":"relnotes/rn-ca-v1.0.3/#get-started","title":"Get Started","text":"<ul> <li>Arcana CA SDK Quick Start Guide</li> <li>Integration example</li> <li>Arcana CA SDK Reference</li> </ul>"},{"location":"relnotes/rn-ca-v1.0.3/#previous-releases","title":"Previous Releases","text":"<p>Are you using an older version of the Arcana CA SDK?</p> <p>Refer to the  release notes archive. Upgrade to the latest version.</p>"},{"location":"relnotes/rn-ca-v1.0.3/#questions","title":"Questions?","text":"<p>Can't find what you are looking for? Contact Arcana Support.</p>"},{"location":"relnotes/rn-ca-wagmi-sdk-v0.0.5/","title":"CA Wagmi SDK Release Note","text":"<p>Release Date: Feb 17, 2025 </p> <p>Version: v0.0.5</p>"},{"location":"relnotes/rn-ca-wagmi-sdk-v0.0.5/#what-is-new","title":"What is New?","text":"<p>This is the first release of the Arcana CA Wagmi SDK.</p> <p>Wagmi-based Web3 apps can now use Arcana CA Wagmi SDK to:</p> <ul> <li>Let users send transactions across any supported chain without switching networks</li> <li>Access a unified balance view through the <code>useBalance</code> hook</li> <li>Enable cross-chain functionality transparently with zero code changes within Web3 apps using the standard <code>useSendTransaction</code> and <code>useWriteContract</code> hooks</li> </ul> <p>Check out the complete list of supported chains and tokens.</p> <p>Changelog</p>"},{"location":"relnotes/rn-ca-wagmi-sdk-v0.0.5/#get-started","title":"Get Started","text":"<ul> <li>Arcana CA Wagmi SDK Quick Start Guide</li> <li>Integration example</li> <li>Arcana CA Wagmi SDK Reference</li> </ul>"},{"location":"relnotes/rn-ca-wagmi-sdk-v0.0.5/#previous-releases","title":"Previous Releases","text":"<p>This is the first release of the Arcana CA Wagmi SDK.</p>"},{"location":"relnotes/rn-ca-wagmi-sdk-v0.0.5/#questions","title":"Questions?","text":"<p>Can't find what you are looking for? Contact Arcana Support.</p>"},{"location":"relnotes/rn-ca-wagmi-sdk-v0.0.6/","title":"CA Wagmi SDK Release Note","text":"<p>Release Date: May 12, 2025 </p> <p>Version: v0.0.6</p>"},{"location":"relnotes/rn-ca-wagmi-sdk-v0.0.6/#what-is-new","title":"What is New?","text":"<p>This release of Arcana CA Wagmi SDK includes enhancements,  and bug fix. A few APIs have changed.</p> <ul> <li>Supports unified balance and chain abstraction through <code>sendTransactionAsync</code> and <code>writeContractAsync</code> replacement functions.</li> <li>The <code>useBalance()</code> function is replaced by <code>useBalanceModal()</code>. See usage details.</li> <li>New hook added:  <code>useBalance({ symbol: string })</code> to get the specified token balance across the supported chains.</li> <li>Added <code>transfer</code> and <code>bridge</code> functions to the hook <code>useCAFn()</code> for enabling chain abstracted functionality.</li> <li>Added checks to disable chain abstraction and allow regular behavior for wallet transactions if the user denies the sign in with Arcana at the start of the transaction.</li> <li>Other changes: UI enhancements, improved documentation.</li> </ul> <p>Check out the complete list of supported chains and tokens.</p> <p>Changelog</p>"},{"location":"relnotes/rn-ca-wagmi-sdk-v0.0.6/#get-started","title":"Get Started","text":"<ul> <li>Arcana CA Wagmi SDK Quick Start Guide</li> <li>Integration example</li> <li>Arcana CA Wagmi SDK Reference</li> </ul>"},{"location":"relnotes/rn-ca-wagmi-sdk-v0.0.6/#previous-releases","title":"Previous Releases","text":"<p>Are you using an older version of the Arcana CA Wagmi SDK?</p> <p>Refer to the  release notes archive. Upgrade to the latest version.</p>"},{"location":"relnotes/rn-ca-wagmi-sdk-v0.0.6/#questions","title":"Questions?","text":"<p>Can't find what you are looking for? Contact Arcana Support.</p>"},{"location":"relnotes/rn-main-auth-May27-24/","title":"Arcana Auth: Release Notes","text":"<p>Release Date: May 27, 2024 </p> <p>Version: 1.0.12</p> <ul> <li> <p>Arcana Auth SDK </p> <ul> <li>Web Apps <ul> <li><code>auth</code> </li> <li><code>auth-react</code></li> <li><code>auth-wagmi</code> </li> <li><code>auth-web3-react</code></li> </ul> </li> <li>Mobile Apps<ul> <li><code>arcana_auth_flutter</code></li> <li><code>auth-react-native</code></li> </ul> </li> <li>Gaming Apps<ul> <li><code>arcana-auth-sdk</code></li> </ul> </li> </ul> </li> <li> <p>Arcana Developer Dashboard</p> </li> <li> <p>Arcana wallet UI</p> </li> </ul> <p>In addition to the Arcana Auth SDK, now we also provide Arcana Auth-Core SDK for greater flexibility in using authentication features and custom wallet UI support.</p> <ul> <li>Arcana Auth-Core SDK</li> </ul>"},{"location":"relnotes/rn-main-auth-May27-24/#what-is-new","title":"What is New?","text":"<ul> <li> <p>No change to the Arcana Auth SDK. See  previous Release notes for details.</p> </li> <li> <p>New updated <code>auth-wagmi</code> now supports the latest Wagmi 2.x.y SDK.</p> </li> <li> <p>New off-ramping feature in the Arcana wallet allows users to sell crypto or convert blockchain assets to Fiat via selected supported off-ramping providers. See how to buy/sell crypto through Fiat for details.</p> </li> </ul>"},{"location":"relnotes/rn-main-auth-May27-24/#what-has-changed","title":"What has changed?","text":"<p>This release has no usage changes in the Arcana Auth SDK.</p> <p>To use the latest Arcana wallet off-ramp feature,  Web3 app users can refresh the wallet or re-login to the app. </p> <p>Apps using the Wagmi SDK need to migrate to the latest Arcana Auth Wagmi SDK release. Re-install and upgrade the <code>auth-wagmi</code> package and update the integration code to use the new config settings for the <code>WagmiProvider</code>. See Wagmi Quick Start Guide for details.</p>"},{"location":"relnotes/rn-main-auth-May27-24/#get-started","title":"Get Started","text":"<p>Ready to dive in? </p> <p>Check out:</p> <ul> <li>Arcana Auth Wagmi SDK Quick Start Guides</li> <li>Unity Auth Integration Example</li> </ul> <ul> <li><code>sample-auth-wagmi-2</code> integration example</li> <li>Other integration examples</li> </ul>"},{"location":"relnotes/rn-main-auth-May27-24/#previous-releases","title":"Previous Releases","text":"<p>Are you using an older version of the Arcana Auth SDK?</p> <p>Refer to the  release notes archive and Migration Guides. Upgrade to the latest version.</p>"},{"location":"relnotes/rn-main-auth-May27-24/#questions","title":"Questions?","text":"<p>See  Arcana Auth FAQ, Troubleshooting Guide, and other developer resources, or contact Arcana Support.</p>"},{"location":"relnotes/rn-main-auth-May3-23/","title":"Arcana Auth: Release Notes","text":"<p>Release Date: Apr 19, 2023 </p> <p>(Mainnet Update on May 3, 2023)</p> <p>The latest release of the Arcana Auth SDK consists of the following components:</p> <ul> <li>Arcana Auth SDK v1.0.3</li> <li>Arcana Developer Dashboard</li> <li>Arcana wallet UI </li> </ul> <p>No Arcana Auth SDK upgrade required</p> <p>Note, in the latest Arcana Auth SDK release, there is no change in the Arcana Auth SDK package. Developers can continue to use Arcana Auth SDK v1.0.3 release.</p>"},{"location":"relnotes/rn-main-auth-May3-23/#new-product-features","title":"New Product Features","text":""},{"location":"relnotes/rn-main-auth-May3-23/#multi-factor-authentication-mfa","title":"Multi-Factor Authentication (MFA)","text":"<p>The latest Arcana Auth SDK provides enhanced wallet security for more robust user authentication through multi-factor authentication. Web3 app users can choose to enable it when they log into an app. Once enabled, it cannot be turned off. For details, see how Arcana MFA works in apps that integrate with the Arcana Auth SDK.</p> <p>See the MFA user's guide to learn more about how the app users can enable MFA for their app accounts and use the enhanced wallet security.</p>"},{"location":"relnotes/rn-main-auth-May3-23/#billing-invoices","title":"Billing &amp; Invoices","text":"<p>Arcana Auth SDK now supports billing and invoicing features for Arcana Mainnet usage. Developers can use Arcana Developer Dashboard to enter billing information and payment methods and to see any pending invoices or past payment details.</p>"},{"location":"relnotes/rn-main-auth-May3-23/#product-enhancements","title":"Product Enhancements","text":""},{"location":"relnotes/rn-main-auth-May3-23/#better-login-performance","title":"Better Login Performance","text":"<p>Users can now log in to Web3 apps even quicker than before with the recent speed boost in the latest Arcana Auth SDK release.</p>"},{"location":"relnotes/rn-main-auth-May3-23/#wallet-balance-precision","title":"Wallet Balance Precision","text":"<p>The Arcana wallet UI now displays the wallet balance numeric value with the precision of 4 decimal places instead of 2 earlier.</p>"},{"location":"relnotes/rn-main-auth-May3-23/#bug-fixes","title":"Bug Fixes","text":"<ul> <li> <p>The specified RPC URL for the wallet blockchain was not getting used when <code>AuthProvider</code> was instantiated. It is fixed and the specified <code>chainConfig</code> values are used instead of the default ones.</p> <pre><code>const auth = new AuthProvider(\n  \"xar_dev_2cbfe3fc82840d8f4191935e1811b0c2e33619f8\",\n  {\n    network: \"dev\",\n    chainConfig: {\n      chainId: CHAIN.ETHEREUM_GOERLI,\n      rpcUrl: \"https://goerli.blockpi.network/v1/rpc/public \"\n    },\n    alwaysVisible: true,\n    position: \"right\",\n    theme: \"dark\"\n  }\n);\n</code></pre> </li> <li> <p>While deleting an app from the Arcana Developer Dashboard, the developer can now see the app name in the text before confirming the delete operation.</p> </li> <li> <p>An issue with creating the Arcana Mainnet configuration profile by copying the Testnet profile due to logo copy failure has been fixed.</p> </li> <li> <p>An issue with updating and saving a new blockchain configuration using the wallet UI has been fixed.</p> </li> <li> <p>Deleted apps continued to show up in the 'Manage Apps' screen of the Arcana Developer Dashboard. This issue is now fixed.</p> </li> </ul>"},{"location":"relnotes/rn-main-auth-May3-23/#get-started","title":"Get Started","text":"<p>Ready to dive in? </p> <p>See Arcana Auth SDK Quick Start Guides. </p> <p>Check out the sample dApp integration example for apps using React, Next.js, and Vue frameworks in auth-examples repository.</p>"},{"location":"relnotes/rn-main-auth-May3-23/#use-latest-arcana-auth-sdk","title":"Use Latest Arcana Auth SDK","text":"<p>If you have integrated the app with the Arcana Auth SDK v1.0.3 package already, then you are all set.</p> <p>But if you are using an older version of the Arcana Auth SDK prior to v1.0.3 then refer to the Migration Guides and upgrade to the Arcana Auth SDK v1.0.3 release.</p>"},{"location":"relnotes/rn-main-auth-May3-23/#questions","title":"Questions?","text":"<p>Refer to the  Arcana Auth FAQ, Troubleshooting Guide, and other developer resources, or contact Arcana Support.</p>"},{"location":"relnotes/rn-main-auth-v1.0.0/","title":"Release Notes Arcana Auth (Mainnet)","text":"<p>Version: v1.0.0</p> <p>Release Date: February 1, 2023</p> <p>This release of the Arcana Auth SDK  consists of the following components:</p> <ul> <li>Arcana Auth SDK v1.0.0</li> <li>Arcana Developer Dashboard</li> <li>Arcana wallet UI</li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.0/#new-product-features","title":"New Product Features","text":""},{"location":"relnotes/rn-main-auth-v1.0.0/#brand-new-look-arcana-developer-dashboard","title":"Brand new look: Arcana Developer Dashboard","text":"<p>Check out the newly redesigned Arcana Developer Dashboard. It allows Web3 app developers to register apps with Arcana , and configure user onboarding and wallet settings before integrating with the Arcana Auth SDK.</p>"},{"location":"relnotes/rn-main-auth-v1.0.0/#application-configuration-profiles","title":"Application Configuration Profiles","text":"<p>Developers can now choose to deploy applications on the Arcana Testnet or the Mainnet. You can start with the default 'Testnet' app configuration profile and once the application is tested and ready to deploy, deploy it on the Arcana Mainnet.</p> <p>An under-development application can be deployed on the Arcana Testnet. At the same time, a tested and stable version can be deployed on the Arcana Mainnet where the app users can log in and utilize the app.</p> Developer Dashboard <ul> <li>Register and configure Web3 applications</li> <li>Create, delete, and manage application configurations for 'Testnet' and 'Mainnet'<ul> <li>Copy settings or create a fresh 'Mainnet' profile</li> <li>While editing, toggle between 'Testnet' and 'Mainnet' configuration profiles</li> <li>Each profile can be edited and managed independently</li> </ul> </li> <li> <p>A new unique Client ID is associated with the 'Mainnet' configuration profile</p> <p>An-note</p> <p>Do remember to use the correct Client ID for integrating with the Arcana Auth SDKwhen you deploy your application on the Mainnet.</p> </li> </ul> <p>See how to pre-configure wallet chains via the dashboard for details. </p>"},{"location":"relnotes/rn-main-auth-v1.0.0/#app-specific-and-global-keys","title":"App-specific and Global Keys","text":"<ul> <li>App-specific keys are the default, developers can configure it to global keyspace type</li> <li>Developers must submit a verification form and seek approval for enabling global keys </li> <li>Global keys make for a better user experience whereby users see the same wallet address across when they log into any app in the Arcana ecosystem. Users must ensure that they do not sign any malicious transactions of any fraudulent app. To mitigate this risk, Arcana requires developers to submit a verification form before the global keys feature is enabled for an app.</li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.0/#monitor-application-usage-metrics","title":"Monitor Application Usage Metrics","text":"<ul> <li>Both Testnet and Mainnet Usage are now tracked for monthly active users (MAU). The application dashboard screen displays usage metrics.</li> <li>'Testnet' configuration profile screen displays Testnet usage</li> <li>'Mainnet' configuration profile screen displays Mainnet usage</li> <li>No charges are levied for using Arcana Testnet. Billing for Arcana Mainnet usage will be calculated at the end of every month.</li> </ul> <p>See Arcana Developer Dashboard User Guide for details.</p> Usage Metrics"},{"location":"relnotes/rn-main-auth-v1.0.0/#wallet-enhancements","title":"Wallet Enhancements","text":"<p>Auto-refresh of the account balance amount is now supported.</p>"},{"location":"relnotes/rn-main-auth-v1.0.0/#state-of-the-art-dkg","title":"State-of-the-art DKG","text":"<ul> <li>Secure, self-sovereign user identity management via asynchronous, distributed key generation protocol</li> <li>On the road to decentralized key generation: Two of the DKG nodes are run by Comdex and LugaNodes.</li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.0/#audits","title":"Audits","text":"<p>Arcana  smart contracts and ADKG subsystem have been audited by Certik. See Arcana Audit Reports for details.</p>"},{"location":"relnotes/rn-main-auth-v1.0.0/#get-started","title":"Get Started","text":"<p>Ready to dive in? </p> <p>See Arcana Auth SDK Quick Start Guides for details. </p> <p>Check out the sample dApp integration example for apps using React, Next.js, and Vue frameworks in auth-examples repository.</p>"},{"location":"relnotes/rn-main-auth-v1.0.0/#migrate-to-v100","title":"Migrate to v1.0.0","text":"<p>Are you using an older version of the Arcana Auth SDK? Use the Migration Guides and upgrade to the latest version.</p>"},{"location":"relnotes/rn-main-auth-v1.0.0/#questions","title":"Questions?","text":"<p>Refer to the  Arcana Auth FAQ, Troubleshooting Guide, and other developer resources, or contact Arcana Support.</p>"},{"location":"relnotes/rn-main-auth-v1.0.1/","title":"Release Notes Arcana Auth (Mainnet)","text":"<p>Version: v1.0.1</p> <p>Release Date: February 10, 2023</p> <p>This release of the Arcana Auth SDK consists of the following components:</p> <ul> <li>Arcana Auth SDK v1.0.1</li> <li>Arcana Developer Dashboard</li> <li>Arcana wallet UI</li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.1/#whats-new","title":"What's New?","text":"<p>In this release, the features or usage has not changed in the Arcana Auth SDK.</p>"},{"location":"relnotes/rn-main-auth-v1.0.1/#bug-fixes","title":"Bug Fixes","text":"<p>In the previous release, v1.0.0 of the Arcana Auth SDK, the default setting for the <code>network</code> parameter (optional) in the <code>AuthProvider</code> constructor was 'mainnet'. </p> <p>By default, when a developer registers an application using the Arcana Developer Dashboard, only the 'Testnet' configuration profile is created. The Client ID available on the dashboard corresponds to Arcana Testnet. No 'Mainnet' configuration profile available by default. The developer must creates it after registering an app. </p> <p>This was creating an initialization mismatch issue in cases where developers chose to not create a 'Mainnet' configuration profile using the Arcana Developer Dashboard but continue to deploy the app on Arcana Testnet. </p> <p>In this use case, the default 'Testnet' configuration settings specified via the Arcana Developer Dashboardwere not compatible with the default <code>network</code> setting in the Arcana Auth SDK, which pointed to 'mainnet'.  As a result, some of the new developers were facing issues while integrating with the Arcana Auth SDK v1.0.0 as they tried to deploy the app on the Arcana Testnet. The configured social providers did not show up in the Auth UI when they created the <code>AuthProvider</code> and specified the Arcana Testnet Client ID without any <code>network</code> setting. This caused mismatched default `network`` value, 'mainnet', to take effect for the Arcana Auth SDK usage.</p> <p>As a workaround, the developer had to override the optional parameter <code>network</code> as 'testnet' to ensure the correct functioning of the authentication feature when only the 'Testnet' configuration profile was available for a registered application.</p> <p>The latest release v1.0.1 of the Arcana Auth SDK handles this use case by setting the default value of the optional <code>network</code> parameter in the <code>AuthProvider</code> constructor as 'testnet'. </p>"},{"location":"relnotes/rn-main-auth-v1.0.1/#get-started","title":"Get Started","text":"<p>Ready to dive in? </p> <p>See Arcana Auth SDK Quick Start Guides for details. </p> <p>Check out the sample dApp integration example for apps using React, Next.js, and Vue frameworks in auth-examples repository.</p>"},{"location":"relnotes/rn-main-auth-v1.0.1/#migrate-to-v101","title":"Migrate to v1.0.1","text":"<p>Are you using an older version of the Arcana Auth SDK? Use the  Guides and upgrade to the latest version.</p>"},{"location":"relnotes/rn-main-auth-v1.0.1/#questions","title":"Questions?","text":"<p>Refer to the  Arcana Auth FAQ, Troubleshooting Guide, and other developer resources, or contact Arcana Support.</p>"},{"location":"relnotes/rn-main-auth-v1.0.10/","title":"Arcana Auth: Release Notes","text":"<p>Release Date: Mar 15, 2024 </p> <p>Version: v1.0.10</p> <ul> <li> <p>Arcana Auth SDK </p> <ul> <li>Web Apps <ul> <li><code>auth</code> </li> <li><code>auth-react</code></li> <li><code>auth-wagmi</code> </li> <li><code>auth-web3-react</code></li> </ul> </li> <li>Mobile Apps<ul> <li><code>arcana_auth_flutter</code></li> <li><code>auth-react-native</code></li> </ul> </li> <li>Gaming Apps<ul> <li><code>arcana-auth-sdk</code></li> </ul> </li> </ul> </li> <li> <p>Arcana Developer Dashboard</p> </li> <li> <p>Arcana wallet UI</p> </li> </ul> <p>In addition to the Arcana Auth SDK, now we also provide Arcana Auth-Core SDK for greater flexibility in using authentication features and custom wallet UI support.</p> <ul> <li>Arcana Auth-Core SDK</li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.10/#what-is-new","title":"What is New?","text":"<ul> <li> <p>Support for MultiversX chain. It is available as a pre-configured chain in the Arcana wallet</p> </li> <li> <p>New SDK: Arcana Auth Unity SDK - See Auth Unity SDK Quick Start Guide.</p> </li> <li> <p>Minor enhancements and bug fixes. See changelog.</p> </li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.10/#what-has-changed","title":"What has changed?","text":"<p>This release has no usage changes. To migrate to the latest release, re-install the SDK.</p>"},{"location":"relnotes/rn-main-auth-v1.0.10/#get-started","title":"Get Started","text":"<p>Ready to dive in? </p> <p>Check out:</p> <ul> <li>Quick Start Guides</li> <li>Unity Auth Integration Example</li> </ul> <ul> <li>Integration examples</li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.10/#previous-releases","title":"Previous Releases","text":"<p>Are you using an older version of the Arcana Auth SDK?</p> <p>Refer to the  release notes archive and Migration Guides. Upgrade to the latest version.</p>"},{"location":"relnotes/rn-main-auth-v1.0.10/#questions","title":"Questions?","text":"<p>Refer to the  Arcana Auth FAQ, Troubleshooting Guide, and other developer resources, or contact Arcana Support.</p>"},{"location":"relnotes/rn-main-auth-v1.0.11/","title":"Arcana Auth: Release Notes","text":"<p>Release Date: July 3, 2024 </p> <p>Version: v1.0.11</p> <ul> <li> <p>Arcana Auth SDK </p> <ul> <li>Web Apps <ul> <li><code>auth</code> </li> <li><code>auth-react</code></li> <li><code>auth-wagmi</code> </li> <li><code>auth-web3-react</code></li> </ul> </li> <li>Mobile Apps<ul> <li><code>arcana_auth_flutter</code></li> <li><code>auth-react-native</code></li> </ul> </li> <li>Gaming Apps<ul> <li><code>arcana-auth-sdk</code></li> </ul> </li> </ul> </li> <li> <p>Arcana Developer Dashboard</p> </li> <li> <p>Arcana wallet UI</p> </li> </ul> <p>In addition to the Arcana Auth SDK, now we also provide Arcana Auth-Core SDK for greater flexibility in using authentication features and custom wallet UI support.</p> <ul> <li>Arcana Auth-Core SDK</li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.11/#what-is-new","title":"What is New?","text":"<ul> <li> <p>Added support for apps that authenticate users via Custom Auth. Learn how to configure Custom Auth settings in the Arcana Developer Dashboard. Assign keys to authenticated users for signing blockchain transactions in apps that use custom authentication servers by following these step-by-step instructions.</p> </li> <li> <p>New Login Session Management feature in the Arcana Developer Dashboard allows developers to specify whether a user session persists if the browser is closed. This enhances user experience and makes session security configurable. Learn more about supported session types and configuration settings.</p> </li> <li> <p>The <code>UserInfo</code>structure now provides a DID identifier for user verification. The <code>loginToken</code> will be deprecated in a future release.</p> </li> <li> <p>Bug fixes and performance enhancements related to user login.</p> </li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.11/#what-has-changed","title":"What has changed?","text":"<p>This release has no usage changes. To migrate to the latest release, re-install and upgrade to the latest SDKs.</p>"},{"location":"relnotes/rn-main-auth-v1.0.11/#get-started","title":"Get Started","text":"<p>Ready to dive in? </p> <p>Check out:</p> <ul> <li>Arcana Auth SDK Quick Start Guides</li> <li>Unity Auth Integration Example</li> </ul> <ul> <li>Integration examples</li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.11/#previous-releases","title":"Previous Releases","text":"<p>Are you using an older version of the Arcana Auth SDK?</p> <p>Refer to the  release notes archive and Migration Guides. Upgrade to the latest version.</p>"},{"location":"relnotes/rn-main-auth-v1.0.11/#questions","title":"Questions?","text":"<p>Refer to the  Arcana Auth FAQ, Troubleshooting Guide, and other developer resources, or contact Arcana Support.</p>"},{"location":"relnotes/rn-main-auth-v1.0.12/","title":"Arcana Auth: Release Notes","text":"<p>Product Update Date: 22 May, 2025 </p> <p>Version: 1.0.12</p> <p>Download and Install Auth SDK</p> <p>The product consists of:</p> <ol> <li> <p>Arcana Auth SDK </p> Web AppsMobile AppsGaming Apps (Unity) <ul> <li><code>auth</code> Version: 1.0.12 Release Date: 02 Jul 2024 13:57:09 UTC </li> <li><code>auth-react</code></li> <li><code>auth-wagmi</code> </li> <li><code>auth-web3-react</code></li> </ul> <ul> <li><code>arcana_auth_flutter</code></li> <li><code>auth-react-native</code></li> </ul> <ul> <li><code>arcana-auth-sdk</code></li> </ul> </li> <li> <p>Arcana Developer Dashboard</p> </li> <li> <p>Arcana wallet UI</p> </li> <li> <p>Arcana Auth-Core SDK</p> </li> </ol>"},{"location":"relnotes/rn-main-auth-v1.0.12/#what-is-new","title":"What is New?","text":"<ul> <li> <p>New Onboarding Options: Apps integrating with the Arcana Auth SDK can now allow users to onboard via Passkey or via new supported social login providers: Telegram and Apple. See how to onboard users via passkeys for details. Developers must first set up Passkeys, and configure Telegram, Apple Settings through the dashboard before adding code in the app to onboard the user via these mechanisms. Learn more...</p> </li> <li> <p>Additional branding Customizations: Apps can now customize the wallet UI with more theme options. You can also rebrand the OTP email for passwordless onboarding. Learn more...</p> </li> <li> <p>Bug fixes and performance enhancements related to user login and polyfilling.</p> </li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.12/#what-has-changed","title":"What has changed?","text":"<p>To migrate to the latest release, re-install the SDK. This release does not require you to pay any usage fee.</p> <p>Changelog</p>"},{"location":"relnotes/rn-main-auth-v1.0.12/#get-started","title":"Get Started","text":"<ul> <li>Arcana Auth SDK Quick Start Guides</li> <li>Unity Auth Integration Example</li> </ul> <ul> <li>Integration examples</li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.12/#previous-releases","title":"Previous Releases","text":"<p>Are you using an older version of the Arcana Auth SDK?</p> <p>Refer to the  release notes archive and Migration Guides. Upgrade to the latest version.</p>"},{"location":"relnotes/rn-main-auth-v1.0.12/#questions","title":"Questions?","text":"<p>Refer to the  Arcana Auth FAQ, Troubleshooting Guide, and other developer resources.</p> <p>Can't find what you are looking for? Contact Arcana Support.</p>"},{"location":"relnotes/rn-main-auth-v1.0.2/","title":"Release Notes Arcana Auth (Mainnet)","text":"<p>Version: v1.0.2</p> <p>Release Date: February 21, 2023</p> <p>This release of the Arcana Auth SDK consists of the following components:</p> <ul> <li>Arcana Auth SDK v1.0.2</li> <li>Arcana Developer Dashboard</li> <li>Arcana wallet UI</li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.2/#new-product-features","title":"New Product Features","text":""},{"location":"relnotes/rn-main-auth-v1.0.2/#fiat-on-ramp-providers","title":"Fiat On-ramp Providers","text":"<p>Arcana wallet supports fiat on-ramping that allows wallet users to buy cryptocurrency (native and ERC20 tokens) from any of the supported providers:</p> <ul> <li>Transak</li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.2/#app-address-client-id","title":"App Address -&gt; Client ID","text":"<p>Each registered Web3 app is associated with a unique Arcana identifier. Earlier, it was referred to as App Address. Now it is referred to as Client ID in the documentation and on the Arcana Developer Dashboard screen.</p> <p>The format of the Client ID has also changed but it does not impact Arcana Auth SDK usage. Developers can continue to use the existing App Address with the new Arcana Auth SDK. If the app is integrated using the following Arcana Auth SDK versions, there is no need to re-register the app: </p> <ul> <li>v1.0.1</li> <li>v1.0.0</li> </ul> <p>If the app is using an older version of the Arcana Auth SDK, refer to the migration guide and upgrade to the latest version. </p>"},{"location":"relnotes/rn-main-auth-v1.0.2/#minimized-wallet-widget-update","title":"Minimized Wallet Widget Update","text":"<p>The circular widget displayed when a wallet was minimized by clicking the 'x' icon on the top right of the wallet in its maximized state has changed. In the current release, the minimized wallet state is displayed in the form of a smaller widget. </p> Minimized Wallet Widget v1.0.1 Minimized Wallet Widget v1.0.2"},{"location":"relnotes/rn-main-auth-v1.0.2/#arcana-auth-sdk-package-additions-wagmi-rainbowkit-support","title":"Arcana Auth SDK package additions:  Wagmi &amp; RainbowKit support","text":"<p>Typical React/Next.js apps   integrate with the Arcana Auth SDK by installing the <code>auth</code> and <code>auth-react</code> npm packages and instantiating the <code>AuthProvider</code> and <code>ProviderAuth</code> before using them in the app. See how to integrate a React app for details.</p> <p>The React/Next.js apps that use Wagmi  can be integrated with the Arcana Auth SDK by installing the <code>auth-wagmi</code> package and instantiating the <code>ArcanaConnector</code> wrapper component. For details, see how to integrate a React app that uses Wagmi guide. </p> <p>Similarly, for React apps using the RainbowKit framework,  see how to integrate a React app that uses RainbowKit guide.</p> <p>Using <code>auth-wagmi</code></p> <p>Earlier, to integrate the Arcana Auth SDK with a Web3 app that uses <code>wagmi</code> or RainbowKit wallet connectors, developers were required to directly install the <code>auth-wagmi</code> package and create the <code>ArcanaConnector</code>. This has changed for auth-wagmi v0.0.5 onward. Developers are now required to also install the <code>auth</code> package along with the <code>auth-wagmi</code> package.</p>"},{"location":"relnotes/rn-main-auth-v1.0.2/#bug-fixes","title":"Bug Fixes","text":"<p>Securing Local/Session store partition</p> <p>In the previous release, the embedded wallet UI displayed for an authenticated user in the context of an application was also accessible in a different app's context, if the same tab was used to browse a different app. </p> <p>Once a user authenticates and logs in to an app, say app A, using a browser and then before logging out of app A, then types a new app URL in the same browser tab for accessing app B, the user was able to access the wallet associated with app A in the context of app B without explicit sign-in into app B.</p> <p>This issue is fixed in the current release. The user will have to log in to the new app before they can access the wallet UI.</p>"},{"location":"relnotes/rn-main-auth-v1.0.2/#get-started","title":"Get Started","text":"<p>Ready to dive in? </p> <p>See Arcana Auth SDK Quick Start Guides for details. </p> <p>Check out the sample dApp integration example for apps using React, Next.js, and Vue frameworks in auth-examples repository.</p>"},{"location":"relnotes/rn-main-auth-v1.0.2/#migrate-to-v102","title":"Migrate to v1.0.2","text":"<p>Are you using an older version of the Arcana Auth SDK? Use the Migration Guides and upgrade to the latest version.</p>"},{"location":"relnotes/rn-main-auth-v1.0.2/#questions","title":"Questions?","text":"<p>Refer to the  Arcana Auth FAQ, Troubleshooting Guide, or contact Arcana Support.</p>"},{"location":"relnotes/rn-main-auth-v1.0.3/","title":"Release Notes Arcana Auth (Mainnet)","text":"<p>Version: v1.0.3</p> <p>Release Date: March 8, 2023</p> <p>This release of the Arcana Auth SDK  consists of the following components:</p> <ul> <li>Arcana Auth SDK v1.0.3</li> <li>Arcana Developer Dashboard</li> <li>Arcana wallet UI</li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.3/#new-product-features","title":"New Product Features","text":""},{"location":"relnotes/rn-main-auth-v1.0.3/#social-provider-aws-cognito","title":"Social Provider: AWS Cognito","text":"<p>Arcana Auth SDK now allows Web3 apps to configure AWS Cognito as the social provider for user authentication. See how to onboard users via Cognito for details.</p>"},{"location":"relnotes/rn-main-auth-v1.0.3/#new-api-showwallet","title":"New API: showWallet()","text":"<p>Developers can use the newly added <code>showWallet()</code> function in the Arcana Auth SDK to display the in-built Arcana wallet UI. The <code>showWallet()</code> function can be called in the application context after the <code>AuthProvider</code> is created and initialized using the <code>init</code> function. Once the app is deployed and the user logs in, the <code>showWallet</code> function call displays the wallet UI.</p>"},{"location":"relnotes/rn-main-auth-v1.0.3/#product-enhancements","title":"Product Enhancements","text":""},{"location":"relnotes/rn-main-auth-v1.0.3/#better-login-performance","title":"Better Login Performance","text":"<p>The Arcana Auth SDK has been updated for better login performance powered by an improved ADKG subsystem.</p>"},{"location":"relnotes/rn-main-auth-v1.0.3/#bug-fixes","title":"Bug Fixes","text":"<p>Wallet UI Display on Mobile</p> <p>In the earlier releases, the built-in Arcana wallet UI did not utilize the entire mobile screen width. This has been fixed now.</p>"},{"location":"relnotes/rn-main-auth-v1.0.3/#get-started","title":"Get Started","text":"<p>Ready to dive in? </p> <p>See Arcana Auth SDK Quick Start Guides for details. </p> <p>Check out the sample dApp integration example for apps using React, Next.js, and Vue frameworks in auth-examples repository.</p>"},{"location":"relnotes/rn-main-auth-v1.0.3/#migrate-to-v103","title":"Migrate to v1.0.3","text":"<p>Are you using an older version of the Arcana Auth SDK? Use the Migration Guides and upgrade to the latest version.</p>"},{"location":"relnotes/rn-main-auth-v1.0.3/#questions","title":"Questions?","text":"<p>Refer to the  Arcana Auth FAQ, Troubleshooting Guide, or contact Arcana Support.</p>"},{"location":"relnotes/rn-main-auth-v1.0.4/","title":"Arcana Auth: Release Notes","text":"<p>Release Date: May 23, 2023 </p> <p>The latest release of the Arcana Auth SDK consists of the following components:</p> <ul> <li> <p>Arcana Auth SDK</p> <ul> <li><code>auth</code> </li> <li><code>auth-react</code></li> <li><code>auth-wagmi</code> </li> <li><code>auth-web3-react</code></li> </ul> </li> <li> <p>Arcana Developer Dashboard</p> </li> <li> <p>Arcana wallet UI</p> </li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.4/#new-product-features","title":"New Product Features","text":""},{"location":"relnotes/rn-main-auth-v1.0.4/#automatically-fetch-nfts","title":"Automatically Fetch NFTs","text":"<p>Previously, the Arcana wallet did not automatically display the NFTs owned by the wallet address. The user was required to manually add the NFT information (the contract address, token ID) to display the NFT assets in the Arcana wallet. In this release, the Arcana wallet automatically fetches the NFTs belonging to the wallet address for the selected blockchain network.</p> <p>Auto-fetching NFTs</p> <p>This feature works only for the NFTs that are minted using the supported blockchains. The Arcana wallet supports auto-fetching of NFTs for the following chains:</p> <p>Mainnet</p> <pre><code>* Arbitrum\n* Avalanche\n* Base\n* Binance Smart Chain\n* Ethereum\n* Fantom\n* Flare\n* Gnosis\n* Optimism\n* Polygon\n* Rollux\n* Syscoin\n</code></pre> <p>Testnet</p> <pre><code>* Ethereum Goerli\n* Avalanche Fuji\n</code></pre> <p>For a full list of chains supported by Ankr APIs, see here.</p> <p>For the NFTs minted on the non-supported blockchains, the Arcana wallet user can manually add them. See the Arcana wallet User's Guide for details.</p>"},{"location":"relnotes/rn-main-auth-v1.0.4/#web3-react-app-support","title":"Web3-React App Support","text":"<p>The latest release of the Arcana Auth SDK supports Web3-React apps. </p> <p>The newly released <code>auth-web3-react</code> package can be installed along with the <code>auth</code> package and Web3-React apps can be integrated for onboarding users just like other wallet connectors such as Wagmi and RainbowKit.</p> <p>Web3-React apps can use either the built-in plug-and-play login UI or build their own custom UI and use Arcana Auth SDK functions to onboard users via the configured authentication providers.</p>"},{"location":"relnotes/rn-main-auth-v1.0.4/#product-enhancements","title":"Product Enhancements","text":""},{"location":"relnotes/rn-main-auth-v1.0.4/#custom-login-ui","title":"Custom Login UI","text":"<p>In addition to the plug-and-play authentication feature that allows developers to use the built-in login UI to onboard users, now custom login UI support is available in the Arcana Auth SDK. App developers can build a custom login UI in their app and it can be wired to onboard users through the authentication providers configured via the Arcana Developer Dashboard. </p> <p>Web3 app developers now have more flexibility in how they authenticate and onboard users into their apps. In the Arcana Auth SDK, developers can now build a custom login UI instead of using the default, built-in plug-and-play login UI. This allows app developers to design a login interface that matches their app's style and branding. The custom login UI can be used to onboard users through the app's custom login process by calling the authentication providers set up in the Arcana Developer Dashboard.</p> <p>Select the app type and refer to the instructions for enabling custom login UI to onboard users.</p>"},{"location":"relnotes/rn-main-auth-v1.0.4/#chain-management","title":"Chain Management","text":"<p>Now developers can configure the blockchains as per the app requirements and set one of them as the default chain using the Arcana Developer Dashboard. Once a user authenticates, the wallet is displayed and it shows these app developer-configured chains in the drop-down list with one of them set as the default. </p> <p>Previously, the Arcana Auth SDK supported a hardcoded set of chains with one of them set as the default chain. The developer could only add and switch chains programmatically as long as it was a supported chain. The <code>wallet_addEthereumChain</code> and <code>wallet_switchEthereumChain</code> JSON-RPC calls could be used by devs to add and switch chains. They could change the default chain through the <code>chainConfig</code> option in the <code>AuthProvider</code>. In the latest release of the Arcana Auth SDK, app developers have more flexibility in specifying the list of chains that are supported for a Web3 app and also set one of them as the default. This can be achieved programmatically and also through the Arcana Developer Dashboard settings. </p> <p>The wallet user can also add any new supported chain through the Arcana wallet UI. Only the chains configured by the app developer persist across the user login sessions.</p> Chain Configuration Example <p>Example I</p> <p>Dashboard setting for App A:  <code>Polygon, Ethereum, Shardeum, Arbitrum (default selection)</code></p> <p><code>chainConfig</code> option in the <code>AuthProvider</code>: <code>Shardeum</code></p> <p>In this case, the Arcana wallet UI will display <code>Shardeum</code> as the default and other chains in the dropdown list as Polygon, Ethereum, and Arbitrum. </p> <p>Example II</p> <p>Dashboard setting for App A:  <code>Polygon, Ethereum, Shardeum, Arbitrum (default selection)</code></p> <p><code>chainConfig</code> option in the <code>AuthProvider</code>: <code>Avalanche</code></p> <p>In this case, the Arcana wallet UI will display <code>Arbitrum</code> as the default and other chains in the dropdown list as Polygon, Ethereum, and Shardeum. </p>"},{"location":"relnotes/rn-main-auth-v1.0.4/#transaction-notification-summary","title":"Transaction Notification Summary","text":"<p>When a blockchain transaction is triggered via the Web3 app for the user's wallet, the Arcana Auth SDK brings up a transaction notification in the app's context displaying the transaction details and options for the wallet user to accept or reject it. </p> <p>Previously, the transaction notification view provided all the transaction details based on the transaction type. In the latest release, the notification now shows a summary of the transaction by default, with options for the user to accept or reject the transaction. To view more details, the user can click on the '^' symbol in the top right corner of the transaction summary. In certain cases, like 'Send Token' or 'Sign Transaction', the detailed notification also shows the gas fees and allows the user to edit the gas amount before approving the transaction if needed.</p>"},{"location":"relnotes/rn-main-auth-v1.0.4/#buy-fiat-via-onrampmoney","title":"Buy Fiat via Onramp.money","text":"<p>The Arcana wallet allows users to buy cryptocurrency. In this release, a new provider 'Onramp Money' is also supported. For details, see supported on-ramping providers for the wallet.</p>"},{"location":"relnotes/rn-main-auth-v1.0.4/#usage-update-authprovider","title":"Usage Update: <code>AuthProvider</code>","text":"<ul> <li> <p><code>setWindowProvider</code>: A new parameter is now supported in the <code>AuthProvider</code> constructor for explicitly setting the <code>window.ethereum</code> to the provider in the app's context. Previously, it was set by default. In the latest release, by default, it is not set. The developer must specify <code>setWindowProvider=true</code> while instantiating the <code>AuthProvider</code> to ensure that <code>window.ethereum</code> is set when <code>AuthProvider</code> is instantiated. See Arcana Auth SDK Usage Guide for details.</p> </li> <li> <p><code>network</code>: Previously, to deploy an app integrated with the Arcana Auth SDK on the Arcana Mainnet, developers were required to specify the <code>network</code> parameter in the <code>AuthProvider</code> constructor as the 'mainnet'. This is no longer mandatory. The Client ID value itself is sufficient to specify whether the deployment is meant for the Arcana Testnet or Mainnet.</p> </li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.4/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>The issue with loading the Arcana Developer Dashboard login screen when the Phantom wallet extension was enabled in the browser is fixed in this release. </li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.4/#get-started","title":"Get Started","text":"<p>Ready to dive in? </p> <p>See Arcana Auth SDK Quick Start Guides. </p> <p>Check out the sample dApp integration example for apps using React, Next.js, and Vue frameworks in auth-examples repository.</p>"},{"location":"relnotes/rn-main-auth-v1.0.4/#upgrade-to-the-latest-arcana-auth-sdk","title":"Upgrade to the Latest Arcana Auth SDK","text":"<p>If you have integrated the app with the Arcana Auth SDK v1.0.3 package you can choose to either continue to use it with the latest Arcana Auth SDK release or upgrade. </p> <p>To use the new product features, enhancements and bug-fixes we highly recommend that you follow the migration guide for a swift upgrade.</p> <p>Please note, in case are using an older version of the Arcana Auth SDK prior to v1.0.3 then refer to the Migration Guides and make requisite changes to upgrade to the latest version.</p>"},{"location":"relnotes/rn-main-auth-v1.0.4/#questions","title":"Questions?","text":"<p>Refer to the  Arcana Auth FAQ, Troubleshooting Guide, and other developer resources, or contact Arcana Support.</p>"},{"location":"relnotes/rn-main-auth-v1.0.5/","title":"Arcana Auth: Release Notes","text":"<p>Release Date: June 12, 2023 </p> <p>The latest release of the Arcana Auth SDK consists of the following components:</p> <ul> <li> <p>Arcana Auth SDK</p> <ul> <li><code>auth</code> </li> <li><code>auth-react</code></li> <li><code>auth-wagmi</code> </li> <li><code>auth-web3-react</code></li> </ul> </li> <li> <p>Arcana Developer Dashboard</p> </li> <li> <p>Arcana wallet UI</p> </li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.5/#new-product-features","title":"New Product Features","text":""},{"location":"relnotes/rn-main-auth-v1.0.5/#auth-for-mobile-apps","title":"Auth for Mobile Apps","text":"<p>The Arcana Auth SDK now allows mobile apps built using Flutter and React-Native frameworks to onboard users through the Arcana Auth SDK and sign blockchain transactions. </p> <p>Flutter app developers must install the <code>arcana_auth_flutter</code> package and refer to the Arcana Auth Quick Start Guide for Flutter Apps to integrate Web3 Flutter apps with the Arcana Auth SDK.</p> <p>React-Native app developers must install the <code>auth-react-native</code> package and refer to the Arcana Auth Quick Start Guide for React-Native Apps to integrate Web3 React-Native apps with the Arcana Auth SDK.</p>"},{"location":"relnotes/rn-main-auth-v1.0.5/#white-labeled-auth","title":"White-labeled Auth","text":"<p>The new white-labeled auth feature allows Web3 app developers to configure the Arcana Auth SDK and disable the built-in Arcana wallet UI. Developers can replace it with a custom wallet UI and build necessary interfaces to call the Web3 wallet operations themselves along with notification UI for requesting user approval for signing a blockchain transaction. See how to plug in a custom wallet UI and use the white-labeled auth feature. </p>"},{"location":"relnotes/rn-main-auth-v1.0.5/#steam-oauth-support","title":"Steam OAuth Support","text":"<p>Web3 applications that integrate with the Arcana Auth SDK can now onboard users via Steam OAuth. See how to configure Steam as an onboarding option section for more details. After configuring one or more authentication providers through the Arcana Developer Dashboard, applications can onboard users with a single line of code using <code>loginWithSocial</code> call. Developers can use the built-in plug-and-play login UI feature of the Arcana Auth SDK or use a custom login UI and allow users to onboard the app using Steam. Select the app type for instructions on how to onboard users with Steam.</p>"},{"location":"relnotes/rn-main-auth-v1.0.5/#firebase-auth-support","title":"Firebase Auth Support","text":"<p>Besides Cognito custom authentication, the Arcana Auth SDK now also allows apps to onboard users via Firebase. To enable Firebase, developers must:</p> <ul> <li>Configure Firebase settings in the Arcana Developer Dashboard</li> <li>Install and integrate the app with the Arcana Auth SDK</li> <li>Make sure that the app is also integrated with the Firebase SDKs and that the required Firebase services are configured. </li> <li>Use a custom login UI to initiate Firebase login and listen for user authentication success event from Firebase.</li> <li>Pass on the Firebase token to the Arcana Auth SDK user onboarding function - <code>loginWithBearer</code> and allow authenticated users to sign blockchain transactions.</li> </ul> <p>Refer to the Firebase auth integration example for details.</p>"},{"location":"relnotes/rn-main-auth-v1.0.5/#get-started","title":"Get Started","text":"<p>Ready to dive in? </p> <p>See Arcana Auth SDK Quick Start Guides. </p> <p>Check out the sample dApp integration example for apps using React, Next.js, and Vue frameworks in auth-examples repository.</p>"},{"location":"relnotes/rn-main-auth-v1.0.5/#upgrade-to-the-latest-arcana-auth-sdk","title":"Upgrade to the Latest Arcana Auth SDK","text":"<p>If you have integrated the app with the Arcana Auth SDK v1.0.11 package you can choose to either continue to use it with the latest Arcana Auth SDK release.</p> <p>To enable Steam or Firebase authentication, you must upgrade to the v1.0.5 or later. To upgrade. follow the migration guide.</p> <p>Please note, in case are using an older version of the Arcana Auth SDK prior to v1.0.11 then refer to the appropriate Migration Guides and upgrade to the latest version.</p>"},{"location":"relnotes/rn-main-auth-v1.0.5/#previous-releases","title":"Previous Releases","text":"<p>See the  release notes archive for details.</p>"},{"location":"relnotes/rn-main-auth-v1.0.5/#questions","title":"Questions?","text":"<p>Refer to the  Arcana Auth FAQ, Troubleshooting Guide, and other developer resources, or contact Arcana Support.</p>"},{"location":"relnotes/rn-main-auth-v1.0.6/","title":"Arcana Auth: Release Notes","text":"<p>Release Date: July 12, 2023 </p> <p>The latest release of the Arcana Auth SDK product consists of the following components:</p> <ul> <li> <p>Arcana Auth SDK</p> <ul> <li><code>auth</code> </li> <li><code>auth-react</code></li> <li><code>auth-wagmi</code> </li> <li><code>auth-web3-react</code></li> </ul> </li> <li> <p>Arcana Developer Dashboard</p> </li> <li> <p>Arcana wallet UI</p> </li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.6/#enhancements","title":"Enhancements","text":""},{"location":"relnotes/rn-main-auth-v1.0.6/#third-party-cookies","title":"Third-party Cookies","text":"<p>Earlier, the Arcana Auth SDK had issues if the browser incognito mode was used or if third-party cookies were disabled in the browser settings. The latest enhancements include support for both these cases.</p> <p>Also, it is no longer required for a user to re-login in case the browser is refreshed in a 30-minute window since the last login. Developers can use the <code>canReconnect</code> and <code>reconnect</code> methods of the <code>AuthProvider</code> to enable this automatic re-login for the user, in a secure manner.</p> <p>See usage guide for more details.</p>"},{"location":"relnotes/rn-main-auth-v1.0.6/#support-for-wagmi-1xy-and-viem","title":"Support for Wagmi 1.x.y and Viem","text":"<p>The <code>auth-wagmi</code> package is now upgraded to version 2.0.0 and supports the latest Wagmi release v1.3.9 which uses Viem. For details, see Wagmi 1.x.y migration guide and sample integration code 'sample-auth-rainbow-viem'.</p>"},{"location":"relnotes/rn-main-auth-v1.0.6/#wagmirainbowkit-app-connect","title":"Wagmi/RainbowKit App Connect","text":"<p>When using the <code>auth-wagmi</code> package for RainbowKit apps, it is recommended that developers specify the <code>name</code> field as 'Login with Email/Social' and put the Arcana logo as shown in the code below.</p> utils/getArcanaAuth.js<pre><code>import { AuthProvider } from \"@arcana/auth\";\n\nlet auth = null;\n\nexport const getAuthProvider = () =&gt; {\n  if (!auth) {\n    auth = new AuthProvider(\n      \"xar_dev_19527cdf585cd31d0bd06bfc1b008accea781404\"\n    );\n  }\n  return auth;\n};\n</code></pre> utils/wallet.js<pre><code>import { getAuthProvider } from \"./getArcanaAuth\";\nimport { ArcanaConnector } from \"@arcana/auth-wagmi\";\nimport { newArcanaLogo } from \"./logo\";\n\nexport const ArcanaRainbowConnector = ({ chains }) =&gt; {\n  return {\n    id: \"arcana-auth\",\n    name: \"Login with Email/Social\",\n    iconUrl: newArcanaLogo,\n    iconBackground: \"#101010\",\n    createConnector: () =&gt; {\n      const connector = new ArcanaConnector({\n        chains,\n        options: {\n      auth: getAuthProvider(),\n        }\n      });\n      return {\n        connector,\n      };\n    },\n  };\n};\n</code></pre> Sample App: RainbowKit <p>For more details, see sample RainbowKit app integration with Auth.</p>"},{"location":"relnotes/rn-main-auth-v1.0.6/#get-started","title":"Get Started","text":"<p>Ready to dive in? </p> <p>See Arcana Auth SDK Quick Start Guides. </p> <p>Check out the sample dApp integration examples for various dApp types, wallet connectors and frameworks.</p>"},{"location":"relnotes/rn-main-auth-v1.0.6/#upgrade-to-the-latest-arcana-auth-sdk","title":"Upgrade to the Latest Arcana Auth SDK","text":"<p>If you have integrated the app with the Arcana Auth SDK v1.0.11 package you can choose to either continue to use it with the latest Arcana Auth SDK release.</p> <p>To enable Steam or Firebase authentication, you must upgrade to the release v1.0.5 or higher. To upgrade, follow the migration guide.</p> <p>Please note, in case are using an older version of the Arcana Auth SDK prior to v1.0.11 then refer to the appropriate Migration Guides and upgrade to the latest version.</p>"},{"location":"relnotes/rn-main-auth-v1.0.6/#previous-releases","title":"Previous Releases","text":"<p>See the  release notes archive for details.</p>"},{"location":"relnotes/rn-main-auth-v1.0.6/#questions","title":"Questions?","text":"<p>Refer to the  Arcana Auth FAQ, Troubleshooting Guide, and other developer resources, or contact Arcana Support.</p>"},{"location":"relnotes/rn-main-auth-v1.0.7/","title":"Arcana Auth: Release Notes","text":"<p>Release Date: August 8, 2023 </p> <p>The latest release of the Arcana Auth SDK product consists of the following components:</p> <ul> <li> <p>Arcana Auth SDK</p> <ul> <li><code>auth</code> </li> <li><code>auth-react</code></li> <li><code>auth-wagmi</code> </li> <li><code>auth-web3-react</code></li> </ul> </li> <li> <p>Arcana Developer Dashboard</p> </li> <li> <p>Arcana wallet UI</p> </li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.7/#what-has-changed","title":"What has changed?","text":"<p>This is a minor release with enhancements and bug fixes only.</p> <ul> <li> <p>Enhancements</p> <ul> <li>Improved Gas Fees Estimation</li> <li>Better error handling</li> </ul> </li> <li> <p>Bug Fixes</p> <ul> <li>Gas Fees were not displayed correctly in the Arcana wallet UI</li> <li>EIP1559 related fixes</li> <li>MFA restore bug fix in the Arcana wallet</li> </ul> </li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.7/#get-started","title":"Get Started","text":"<p>Ready to dive in? </p> <p>See Arcana Auth SDK Quick Start Guides. </p> <p>Check out the sample dApp integration examples for various dApp types, wallet connectors and frameworks.</p>"},{"location":"relnotes/rn-main-auth-v1.0.7/#upgrade-to-the-latest-arcana-auth-sdk","title":"Upgrade to the Latest Arcana Auth SDK","text":"<p>If you have integrated the app with the Arcana Auth SDK v1.0.11 package you can choose to either continue to use it with the latest Arcana Auth SDK release.</p> <p>Please note, in case are using an older version of the Arcana Auth SDK prior to v1.0.11 then refer to the appropriate Migration Guides and upgrade to the latest version.</p>"},{"location":"relnotes/rn-main-auth-v1.0.7/#previous-releases","title":"Previous Releases","text":"<p>See the  release notes archive for details.</p>"},{"location":"relnotes/rn-main-auth-v1.0.7/#questions","title":"Questions?","text":"<p>Refer to the  Arcana Auth FAQ, Troubleshooting Guide, and other developer resources, or contact Arcana Support.</p>"},{"location":"relnotes/rn-main-auth-v1.0.8/","title":"Arcana Auth: Release Notes","text":"<p>Release Date: September 20, 2023 </p> <p>Version: 1.0.12</p> <p>The Arcana Auth SDK product consists of the following components:</p> <ul> <li> <p>Arcana Auth SDK </p> <ul> <li>Web Apps <ul> <li><code>auth</code> </li> <li><code>auth-react</code></li> <li><code>auth-wagmi</code> </li> <li><code>auth-web3-react</code></li> </ul> </li> <li>Mobile Apps<ul> <li><code>arcana_auth_flutter</code></li> <li><code>auth-react-native</code></li> </ul> </li> </ul> </li> <li> <p>Arcana Developer Dashboard</p> </li> <li> <p>Arcana wallet UI</p> </li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.8/#what-has-changed","title":"What has changed?","text":"<p>This is a minor release with enhancements and bug fixes only.</p>"},{"location":"relnotes/rn-main-auth-v1.0.8/#enhancements","title":"Enhancements","text":"<p>Arcana JWT Token</p> <p>The Arcana Auth SDK now returns an Arcana JWT Token to the app after successful user login.</p> <p>Compact Login UI</p> <p>Developers can choose to select a more compact built-in login UI modal that displays all the available, configured login mechanisms for the user to choose from. Set <code>compact: true</code> as the <code>connectOptions</code> while creating a new <code>AuthProvider</code> as shown in the code snippet below:</p> <pre><code>import { AuthProvider, CHAIN } from '@arcana/auth'\n\ninterface ChainConfig {\n  chainId: CHAIN\n  rpcUrl?: string\n}\n\nconst auth = new AuthProvider(`${clientId}`, {\n  position: 'left',        // default - right\n  theme: 'light',          // default - dark\n  alwaysVisible: false,    // default - true\n  setWindowProvider: true, // default - false\n  connectOptions: {\n    compact: true // default - false\n  },\n  chainConfig: {\n    chainId: CHAIN.POLYGON_MAINNET,\n    rpcUrl: '',\n  },\n})\n\nawait auth.init()\n</code></pre> Compact Login UI <p>For more details, see <code>AuthProvider</code> constructor parameters.</p>"},{"location":"relnotes/rn-main-auth-v1.0.8/#bug-fixes","title":"Bug Fixes","text":"<p>Email Validation</p> <p>The email entered by the user in the built-in login UI modal is now validated before initiating a user log in.</p>"},{"location":"relnotes/rn-main-auth-v1.0.8/#get-started","title":"Get Started","text":"<p>Ready to dive in? </p> <p>SeeArcana Auth SDK Quick Start Guides. </p> <p>Check out the sample dApp integration examples for various dApp types, wallet connectors and frameworks.</p>"},{"location":"relnotes/rn-main-auth-v1.0.8/#upgrade-to-the-latest-arcana-auth-sdk","title":"Upgrade to the Latest Arcana Auth SDK","text":"<p>If you have integrated the app with the Arcana Auth SDK v1.0.11 package you can choose to either continue to use it with the latest Arcana Auth SDK release.</p> <p>Please note, in case are using an older version of the Arcana Auth SDK prior to v1.0.11 then refer to the appropriate Migration Guides and upgrade to the latest version.</p>"},{"location":"relnotes/rn-main-auth-v1.0.8/#previous-releases","title":"Previous Releases","text":"<p>See the  release notes archive for details.</p>"},{"location":"relnotes/rn-main-auth-v1.0.8/#questions","title":"Questions?","text":"<p>Refer to the  Arcana Auth FAQ, Troubleshooting Guide, and other developer resources, or contact Arcana Support.</p>"},{"location":"relnotes/rn-main-auth-v1.0.9/","title":"Arcana Auth: Release Notes","text":"<p>Release Date: Feb 5, 2024 </p> <p>Version: v1.0.9</p> <ul> <li> <p>Arcana Auth SDK </p> <ul> <li>Web Apps <ul> <li><code>auth</code> </li> <li><code>auth-react</code></li> <li><code>auth-wagmi</code> </li> <li><code>auth-web3-react</code></li> </ul> </li> <li>Mobile Apps<ul> <li><code>arcana_auth_flutter</code></li> <li><code>auth-react-native</code></li> </ul> </li> </ul> </li> <li> <p>Arcana Developer Dashboard</p> </li> <li> <p>Arcana wallet UI</p> </li> </ul> <p>In addition to the Arcana Auth SDK, now we also provide Arcana Auth-Core SDK for greater flexibility in using authentication features and custom wallet UI support.</p> <ul> <li>Arcana Auth-Core SDK</li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.9/#what-is-new","title":"What is New?","text":"<p>This is a major release that supports non-EVM blockchains (Solana). New product features include a brand new SDK that offers maximum customization. Also, besides bug fixes it contains some enhancements related to security besides bug fixes.</p> <ul> <li> <p>Non-EVM Chain Support: Solana - See Solana Apps Quick Start Guide.</p> </li> <li> <p>Passwordless Login with OTP: Use <code>loginWithOTPStart</code>, and <code>loginWithOTPComplete</code> instead of <code>loginWithLink</code> (deprecated)</p> </li> <li> <p>New SDK: Arcana Auth-Core SDK - See Auth Core SDK Quick Start Guide.</p> </li> <li> <p>Security enhancements and bug fixes. See changelog.</p> </li> </ul>"},{"location":"relnotes/rn-main-auth-v1.0.9/#what-has-changed","title":"What has changed?","text":""},{"location":"relnotes/rn-main-auth-v1.0.9/#global-keys","title":"Global Keys","text":"<p>This release won\u2019t affect Web3 apps that rely on app-specific keys (default).</p> <p>If the app developer selects  global keys while configuring the app via the Arcana Developer Dashboard, the social auth settings for enabling the social login providers are no longer required.</p> <p>Apps can choose to enable global keys on the Testnet as well as the Mainnet.</p>"},{"location":"relnotes/rn-main-auth-v1.0.9/#new-user-orientation","title":"New User Orientation","text":"<p>Earlier, when a user logged into the Web3 app integrated with the Arcana Auth SDK, the new user would instantly see the Arcana wallet in the app context. Now, a new orientation wizard pops up for the very first user login. Newcomers to Web3 or those unfamiliar with wallets can find value in the orientation wizard. Upon logging into the app, users can opt to skip it or swiftly get familiar with the layout of Arcana wallet, understanding where specific information is located.</p> Wallet Starter Tips"},{"location":"relnotes/rn-main-auth-v1.0.9/#get-started","title":"Get Started","text":"<p>Ready to dive in? </p> <p>SeeArcana Auth SDK Quick Start Guides.</p> <p>Check out the sample dApp integration examples for various dApp types, wallet connectors and frameworks.</p>"},{"location":"relnotes/rn-main-auth-v1.0.9/#previous-releases","title":"Previous Releases","text":"<p>Using an older version of the Arcana Auth SDK?</p> <p>Refer to the  release notes archive and Migration Guides. Upgrade to the latest version.</p>"},{"location":"relnotes/rn-main-auth-v1.0.9/#questions","title":"Questions?","text":"<p>Refer to the  Arcana Auth FAQ, Troubleshooting Guide, and other developer resources, or contact Arcana Support.</p>"},{"location":"relnotes/archives/","title":"Release Notes Archives","text":"Auth SDK <p>  Auth v1.0.12</p> <p>  Auth v1.0.11</p> <p>  Release May 27th, 2024</p> <p>  Auth v1.0.10</p> <p>  Auth v1.0.9</p> <p>  Auth v1.0.8</p> <p>  Auth v1.0.7</p> <p>  Auth v1.0.6</p> <p>  Auth v1.0.5</p> <p>  Auth v1.0.4</p> <p>  Dashboard update May 3, 2023</p> <p>  Auth v1.0.3</p> <p>  Auth v1.0.2</p> <p>  Auth v1.0.1</p> <p>  Auth v1.0.0</p> <p>  Auth v0.3.0</p>"},{"location":"relnotes/archives/ca-index/","title":"Archives: CA SDK","text":"CA SDKCA Wagmi SDK <p>  CA v1.0.3  CA v0.0.7  CA v0.0.5  CA v0.0.3  CA v0.0.2</p> <p>  CA v0.0.6  CA v0.0.5</p>"},{"location":"security/adkg/","title":"ADKG","text":"<p>Asynchronous Distributed Key Generation (ADKG) is a building block for any decentralized protocol that allows a set of mutually non-trusting nodes to jointly generate a public/private key pair.</p> <p>This key pair is used to bootstrap the cryptography subsystems without a trusted third party.</p> <p>Arcana Network ADKG implementation is used for non-custodial key pair generation and onboard the SDK users to sign blockchain transactions. None of the individual ADKG nodes have access to the user\u2019s key  ensuring security and robustness of the system.</p> Asynchronous Distributed Key Generation (ADKG) <p>At Arcana, have come a long way since the Arcana Auth SDK alpha release that offered a distributed key generation feature (DKG). </p> <p>Several shortcomings in the earlier DKG regarding trusted dealer, robustness have been resolved in the state-of-the-art asynchronous distributed key generation (ADKG) protocol built into the Arcana key generation subsystem. We have collaborated with some of the leading cryptography experts and researchers to fold recent advances in asynchronous DKG technology in Arcana Auth SDK. Refer to the Arcana Technical Whitepaper for more details on ADKG.</p>"},{"location":"security/adkg/#why-is-adkg-better","title":"Why is ADKG better?","text":"<p>Earlier, the Arcana Network protocol used DKG with a trusted dealer mechanism which had its shortcomings such as:</p> <ul> <li>Dealer has access to all keys as they are the ones generating the keys.</li> <li>Regeneration of lost shares by a node going down or exiting the network was not automated</li> </ul> <p>The new ADKG implementation is more robust than Arcana Network\u2019s previous DKG implementation as it does not involve any trusted dealer or a third party.</p> <p>Also, unlike the other synchronous DKG protocol models, ADKG protocol is immune to any underlying synchronous network assumptions. By asynchronous network, we mean a network where the presence of a malicious adversary can corrupt a threshold of nodes and delay message sharing but must eventually deliver all messages sent between honest nodes.</p>"},{"location":"security/adkg/#assumptions","title":"Assumptions","text":"<p>The ADKG protocol works under the assumption that in an asynchronous network of n \u2265 3t + 1 nodes, where at most t nodes could be malicious.</p> <p>The protocol can achieve an expected communication cost of O(\u03ban\\(^3\\) ) and terminates in expected O(log n) rounds. Here \u03ba is the security parameter. For example, if a collision-resistant hash function is used, in that case, \u03ba denotes the size of the hash function's output.</p>"},{"location":"security/adkg/#how-does-adkg-work","title":"How does ADKG work?","text":"<p>ADKG requires a set of at least 4 connected nodes at a minimum for accommodating a maximum of 1 malicious node.</p> <p>At a very high level, the protocol requires each node to independently generate secrets and then share a part of that secret with the other nodes. Each node then shares a proposed set of key shares with other nodes. Asynchronous Binary Agreement (ABA) voting is done by the nodes for each proposed set. Only the accepted and agreed-upon set is used to derive the key shares and then those key shares are combined to arrive at the final key pair. None of the nodes have full access to the secret key.</p> <p>Let\u2019s take a closer look at each of these 4 key phases in the ADKG protocol:</p> <ol> <li>Asynchronous Complete Secret Sharing (ACSS)</li> <li>Keyset Proposal Broadcast Phase</li> <li>Asynchronous Binary Agreement (ABA)</li> <li>Key Derivation Phase</li> </ol>"},{"location":"security/adkg/#1-asynchronous-complete-secret-sharing-acss","title":"1. Asynchronous Complete Secret Sharing (ACSS)","text":"<p>The first phase is where each of the participating nodes generates its secret key shares independently and shares the selected key shares with the other nodes.</p> <ul> <li>Each participating node generates a secret.</li> <li>Every node splits the secret into n parts where n is the number of participating nodes.</li> <li>Each node shares the split secret key shares with other nodes in parallel.</li> </ul> <p>At the end of the ACSS phase, each node has a set T of share index from all other participating honest nodes.</p> ADKG Phase 1"},{"location":"security/adkg/#2-keyset-proposal-broadcast","title":"2. Keyset Proposal Broadcast","text":"<p>After the first phase, once each node has generated and shared key shares, each node has a set of key shares received from the other nodes. The index set of this set is shared with all the other nodes. Each node \\(i\\) reliably broadcasts its complete set \\(T_i\\) of share index that it collected in the previous ACSS phase.</p> <p>At the end of this phase, each node has n T sets containing share index from all the other participating nodes.</p> ADKG Phase 2"},{"location":"security/adkg/#3-asynchronous-binary-agreement","title":"3. Asynchronous Binary Agreement","text":"<p>In this phase, each node has the T sets or the proposed share set from the other nodes and is required to vote.</p> <ul> <li>During the agreement phase, nodes try to agree on a subset of valid key set proposals.</li> <li>Every node looks at its own and other nodes\u2019 T set received in the previous phase and if the T set is a subset of its own T set or equal set then it votes a 1 for it to the ABA.</li> </ul> <p>At the end of this phase, votes from all nodes are generated for every proposal set T submitted by each participating node.</p> ADKG Phase 3"},{"location":"security/adkg/#4-key-derivation","title":"4. Key Derivation","text":"<p>During this phase, the union of elements in key set proposals is used to derive the final secret key share for each node.</p> <ul> <li>If the ABA terminates with an output of 1, that means the key set proposal is accepted.</li> <li>Each node uses the union of all accepted key set proposals to generate its own secret key share. What this means is that if node j was in the final accepted proposal union set, node k will generate its final share by including or adding the share given by node j to node k during the ACSS phase. In short, if T = T \u222a T\\(_i\\), then for j in T, \\(Z_i=Z_i+S_{ij}\\) where Z\\(_i:\\) Final share of node\\(_i\\)</li> <li>After sharing terminates, each node derives its share of the public key, \\(h^{z_i}\\) where \\(i\\) is the node number, using Lagrange\u2019s interpolation.</li> <li>Each node then shares its public key share with all the other participating nodes.</li> </ul> <p>At the end of this phase, h\\(^z\\) is derived from \\(h^{z_1}\\),...,\\(h^{z_4}\\) at all nodes. Using these public key shares from the threshold number of participating nodes, each node can generate the final agreed-upon public key.</p> <p>The secret key is not accessible to any single node. Each node only has its share of secret key information.</p> ADKG Phase 4 <p>For more information, refer to the Arcana Technical Whitepaper. </p>"},{"location":"security/mfa/","title":"Multi-Factor Authentication","text":"<p>Arcana Auth SDK enhances wallet security with multi-factor authentication (MFA).</p> <p>MFA adds an extra verification step when accessing the wallet from a new browser or device. It stores a local share of the private key on the user's device. If lost, users can recover it using security questions or a recovery pin during login from a new device or browser. Once recovered, this information is not needed again for the same device or browser.</p> <p>MFA improves security by requiring more than just an email or social identifier. Even if an attacker gains access, they cannot bypass MFA without the security questions or recovery pin. Additionally, MFA protects user keys even if the ADKG subsystem is compromised.</p>"},{"location":"security/mfa/#enabling-mfa","title":"Enabling MFA","text":"<p>The MFA feature requires no SDK usage configuration from the developer. Users can choose to enable MFA for the Arcana wallet at the first login or later by entering security questions and a recovery PIN.</p> MFA: Under the Hood"},{"location":"security/mfa/#security-questions","title":"Security Questions","text":"<p>Users can select any 5 security questions from the provided options or create custom questions. These questions and answers together serve as a seed to generate a share of the user's private key.</p>"},{"location":"security/mfa/#recovery-pin","title":"Recovery Pin","text":"<p>Users must also create a 6-digit alphanumeric PIN. This PIN encrypts and stores one of the multiple verification factors used by MFA. It serves as a backup, stored securely with Arcana, in case the user changes devices or loses the locally stored encrypted component in their browser's cache.</p> <p>Cannot Disable MFA</p> <p>MFA, once enabled, cannot be disabled to ensure maximum security.</p>"},{"location":"security/mfa/#user-experience-with-mfa","title":"User Experience with MFA","text":"<p>Without MFA, users experience no change when logging into a Web3 app from different devices or browsers using Arcana Auth SDK. They can log in and access the Arcana wallet as usual. However, if their social provider account is compromised, their access to the wallet and keys is at risk.</p> <p>With MFA enabled, users face a different login process only when they use a new device or browser. They must either answer three security questions or enter a security PIN when logging into the Web3 app to access the Arcana wallet.</p>"},{"location":"security/overview/","title":"Security","text":"<p>The Arcana Arcana Auth SDK is powered by the Proof of Stake (PoS) algorithms. The Arcana protocol is decentralized by design. The subsystems used to implement the Arcana Auth SDK are secured via testing and audits. The same underlying security is shared across all the Arcana protocol nodes, including the ones owned and run by third-party trusted partners (validators).</p>"},{"location":"security/overview/#key-concerns","title":"Key Concerns","text":"<ul> <li> <p>App Onboarding: Are the users securely onboarded on the apps that integrate with the Arcana Auth SDK? Are user credentials safe? Does Arcana follow standard authentication protocols?</p> </li> <li> <p>Web3 Keys Ownership &amp; Privacy: Are the keys assigned to authenticated users safe? What happens if the keys are lost? Can they be recovered? Do the users own, control, manage and secure keys or does the system ensure key security?</p> </li> <li> <p>Protocol Security: Is the core Arcana protocol and smart contracts that implement user authentication and key share assignment secure? Has it been battle-tested and audited?</p> </li> <li> <p>Embedded Wallet Security: Is the Arcana wallet secure? Does Arcana ensure that it is not vulnerable to clickjacking and other common vulnerabilities?</p> </li> <li> <p>User Data Security:  Is the data shared by the developers or users with the Arcana ecosystem safe and secure?</p> </li> </ul> <p>The Arcana Auth SDK addresses these security considerations related to Web3 authentication:</p>"},{"location":"security/overview/#app-onboarding","title":"App Onboarding","text":"<p>Web3 apps integrate with the Arcana Auth SDK to enable user onboarding and enable authenticated users to sign blockchain transactions. This involves both securing user onboarding as well as ensuring that the keys used to sign blockchain transactions are access-controlled. User's keys are self-custodial meaning they are fully owned by the user. See key privacy details in the following section.</p> <p>Arcana supports standard OAuth 2.0 protocol and works with several social login providers to ensure user credentials are never stored in the Arcana ecosystem.</p> <p>Once a user logs in successfully, the Arcana Auth SDK generates a time-bound JWT token and associates it with the user account. The Web3 app can use this JWT token, verify it and ensure user onboarding is secured. They can generate their own JWT token for the user session. The time-bound JWT token ensures that any credentials stolen through phishing attacks have a limited shelf life.</p>"},{"location":"security/overview/#web3-key-ownership-privacy","title":"Web3 Key Ownership &amp; Privacy","text":"<p>Once a user has been authenticated, it is imperative that the blockchain signing keys for that user are completely owned, secure and private. Arcana Auth SDK ensures this through the state-of-the-art asynchronous distributed key generation (ADKG) subsystem. The key shares generated by this subsystem are not stored or assembled ever, within the Arcana subsystem.</p>"},{"location":"security/overview/#key-share-generation","title":"Key Share Generation","text":"<p>Arcana Auth SDK combines several algorithms to have a highly secure and robust ADKG subsystem. It uses a robust asynchronous DPSS mechanism to ensure that no single node in the system has access to the user's keys and that the system can handle malicious nodes. We are also working on other enhancements to this ADKG subsystem to enable key share repair, key share refresh, and more. Besides these other enhancements include Arcana Auth SDK multi-factor authentication (MFA) feature, and multi-party computation (MPC) for even stronger security without compromising on ease of use for Web3 users.</p>"},{"location":"security/overview/#key-share-assembly","title":"Key Share Assembly","text":"<p>Arcana Auth SDK does not store any key shares that belong to the app user. The key shares are created by the ADKG subsystem and assigned to the authenticated user. Key shares are used to generate the user's private key only in the context of the Web3 app, at the client end, after user verification. If the user changes the device used to log in to the Web3 app that is integrated with Arcana Auth SDK, the enhanced wallet security (MFA) feature addresses key recovery on the new device in a secure manner.</p>"},{"location":"security/overview/#global-app-specific-keys","title":"Global &amp; App-Specific Keys","text":"<p>Arcana Auth SDK Keyspace feature offers two kinds of keys that can be assigned to Web3 app users:</p> <ul> <li>Global Keys</li> <li>App-specific Keys</li> </ul> <p>Developers can select keyspace type during configuration depending upon the kind of user experience and security needs of the app and choose the type of keys that are assigned to app users. </p> <p>Global keys have some usage limitations to ensure key security as these keys can be accessed across all the apps that are integrated with the Arcana Auth SDK using the Global keys configuration option.</p>"},{"location":"security/overview/#protocol-security","title":"Protocol Security","text":"<p>The smart contracts used to implement the Arcana Auth SDK and the authentication protocol have been audited for vulnerabilities. All known audit issues have been addressed. See Arcana Audit Reports for details.</p>"},{"location":"security/overview/#embedded-wallet-security","title":"Embedded Wallet Security","text":"<p>Web3 apps that integrate with the Arcana Auth SDK can enable the built-in, in-app, non-custodial Arcana wallet for logged in users to sign blockchain transactions. The Arcana wallet displays in the context of the app itself once the user authenticates. Developers can customize the wallet branding or replace the wallet UI with a custom wallet UI. The built-in wallet UI has been designed and hardened to handle UI based attacks such as clickjacking.</p> <p>If a users chooses to, they can use the in-app, built-in wallet UI to export private key. Every time the key is exported, an email alert is issued to the user to that user can verify whether the exports were authorized. If the built-in wallet UI is replace with a custom one, the onus is on the developers to provision user key export feature.</p> <p>Developers can choose to enable the additional domain validation security checks through the Arcana Developer Dashboard to further secure the in-app wallet.</p>"},{"location":"security/overview/#user-data-security","title":"User Data Security","text":"<p>Developers interact with the Arcana Developer Dashboard to register and configure the apps for various Arcana Auth SDK usage settings. All the data provided by the developer in the context of the registered app is encrypted and secured. Web3 app user credential data is never stored in the Arcana subsystem. User login and usage details are secured via data encryption and access control. </p> <p>The Arcana Auth SDK usage data for the Web3 app can only be accessed by the authorized developers via the dashboard.</p>"},{"location":"setup/","title":"Auth Options","text":""},{"location":"setup/#social-providers","title":"Social Providers","text":"<p> Apple  Discord  GitHub  Google  Steam  Telegram  Twitch   Twitter</p>"},{"location":"setup/#iam-providers","title":"IAM Providers","text":"<p> Cognito   Firebase </p> Apps using IAM Providers <p>Apps usually use Arcana Auth SDK for user onboarding and blockchain transaction signing. Authentication providers must be set up in the Arcana Developer Dashboard before integrating with the SDK.</p> <p>Some apps might use third-party IAM providers like AWS Cognito for authentication but still use Arcana Auth SDK to access Arcana wallet. The setup is different since third-party IAM providers support authentication verifiers like Google directly.</p> <p>Developers only need to set up the IAM provider in the Arcana Developer Dashboard. They don't need to configure authentication verifiers that work directly with the IAM providers. Use the IAM provider's console, like Cognito Developer Console, to set up authentication verifiers like Google, not the Arcana Developer Dashboard.   </p>"},{"location":"setup/#other-login-options","title":"Other Login Options","text":"<p> Passkeys  Custom Auth</p> <p>Passwordless Login</p> <p>By default, passwordless login is always available for any application that integrates with the Arcana Auth SDK.  Unlike social login providers, the passwordless option is enabled by default and requires no configuration. </p>"},{"location":"setup/config-auth-passkeys/","title":"Passkeys Auth Setup","text":"<p>Learn how to configure user login via Passkeys for apps that integrate with the Arcana Auth SDK and allow authenticated users to sign blockchain transactions.</p>"},{"location":"setup/config-auth-passkeys/#prerequisites","title":"Prerequisites","text":"<p>To log into the Arcana Developer Dashboard, you\u2019ll need an account with a supported social login or use email for passwordless access.</p> <ul> <li>Google</li> <li>GitHub</li> <li>Twitch</li> <li>Discord</li> </ul> <p>Use https://dashboard.arcana.network to log in with one of the available options.</p> Developer Dashboard Login Page <p>Aggregate Login</p> <p>The aggregate login feature in the Arcana Auth SDK merges login identities from social providers into one Arcana account if the email ID is the same across these providers. Developers can log into the Arcana Developer Dashboard using any supported provider and still access the same Arcana account and app settings. </p>"},{"location":"setup/config-auth-passkeys/#1-register-app","title":"1. Register App","text":"<p>Log into the Arcana Developer Dashboard to register the app. Create a new app. Jump to the next section if the app is already registered.</p>"},{"location":"setup/config-auth-passkeys/#2-configure-passkeys","title":"2. Configure Passkeys","text":"<p>In the 'Manage Apps' screen, click Configure in the LHS navigation. Select Social Auth and scroll down until you see the section Passkeys on the RHS.</p> Navigate to Passkey Auth Settings <p>Specify the Domain of the relying party. Save the Passkeys settings in the dashboard. </p> Specify Domain"},{"location":"setup/config-auth-passkeys/#whats-next","title":"What's Next?","text":"<p>After configuring passkeys based login, developers must integrate the Web3 app with the Arcana Auth SDK, then use <code>loginWithPasskeys</code> to onboard users securely via passkey. Use the <code>AuthProvider</code> to issue JSON/RPC functions and Web3 wallet operations from within the app context for authenticated users.</p>"},{"location":"setup/config-auth-passkeys/#see-also","title":"See Also","text":"<ul> <li> Dashboard User's Guide</li> <li> How do passkeys work?</li> </ul>"},{"location":"setup/config-custom-auth/","title":"Custom Auth Setup","text":"<p>Learn how to configure Custom Auth for using the Arcana Auth SDK in apps that use custom user authentication and allow authenticated users to sign blockchain transactions.</p>"},{"location":"setup/config-custom-auth/#prerequisites","title":"Prerequisites","text":"<p>To log into the Arcana Developer Dashboard, you\u2019ll need an account with a supported social login or use email for passwordless access.</p> <ul> <li>Google</li> <li>GitHub</li> <li>Twitch</li> <li>Discord</li> </ul> <p>Use https://dashboard.arcana.network to log in with one of the available options.</p> Developer Dashboard Login Page <p>Aggregate Login</p> <p>The aggregate login feature in the Arcana Auth SDK merges login identities from social providers into one Arcana account if the email ID is the same across these providers. Developers can log into the Arcana Developer Dashboard using any supported provider and still access the same Arcana account and app settings. </p>"},{"location":"setup/config-custom-auth/#1-register-app","title":"1. Register App","text":"<p>Log into the Arcana Developer Dashboard to register the app. Create a new app. Jump to the next section if the app is already registered.</p>"},{"location":"setup/config-custom-auth/#2-configure-custom-auth","title":"2. Configure Custom Auth","text":"<p>In the 'Manage Apps' screen, click Configure in the LHS navigation. Select Social Auth and scroll down to the section Custom Auth.</p> Update Custom Auth Settings <p>Provide inputs for the Custom Auth settings:</p> <ul> <li>JWKS Endpoint: This is a read-only URL exposed by the Custom Auth server or any other server that manages the cryptographic keys or JSON Web Keys (JWK) as per the IETF RFC7517 standard.</li> <li>User Identifier String: Select the type of user identifier that the developer will share while integrating the app with the Arcana Auth SDK, as part of input parameters <code>CustomProviderParams</code> in the <code>loginWithCustomProvider()</code> function call. Choose one of the <code>sub</code>, <code>email</code> or a <code>custom</code> string.</li> <li>Issuer: A string identifier representing the principal who issued the JWT.</li> <li>Audience: A string identifier representing the recipient that the JWT is intended for.</li> <li>JWT Validation (Optional): Specify one or more key, value pairs of attributes/claims that can be used to verify the JWT provided as the input parameter <code>CustomProviderParams</code> in the <code>loginWithCustomProvider()</code> function call. </li> </ul> <p>Click Save after specifying the Custom Auth settings in the dashboard. </p>"},{"location":"setup/config-custom-auth/#3-get-custom-provider-id","title":"3. Get Custom Provider ID","text":"<p>In addition to the Client ID, every registered app configured for using Custom Auth is also allocated a unique custom provider identifier. It is displayed in the dashboard once the Custom Auth settings are updated. Make a note of the custom provider identifier.</p> <p>Both, the Client ID assigned to the app after registration and the custom provider identifier is required later for integrating the app using Custom Auth with the Arcana Auth SDK.</p>"},{"location":"setup/config-custom-auth/#whats-next","title":"What's Next?","text":"<p>After configuring, integrate the Web3 app using Custom Auth with the Auth SDK, use <code>loginWithCustomProvider</code> to assign keys to authenticated users securely. Then use the <code>AuthProvider</code> to issue JSON/RPC functions and Web3 wallet operations from within the app context.</p>"},{"location":"setup/config-custom-auth/#see-also","title":"See Also","text":"<ul> <li> Dashboard User's Guide</li> <li> How does Custom Auth work?</li> </ul>"},{"location":"setup/config-custom-wallet-ui/","title":"Custom Wallet UI Setup","text":"<p>Learn how to configure a custom wallet UI instead of the default, built-in wallet UI before using the Arcana Auth SDK to enable social login and allow authenticated users to sign blockchain transactions.</p>"},{"location":"setup/config-custom-wallet-ui/#prerequisites","title":"Prerequisites","text":"<p>To log into the Arcana Developer Dashboard, you\u2019ll need an account with a supported social login or use email for passwordless access.</p> <ul> <li>Google</li> <li>GitHub</li> <li>Twitch</li> <li>Discord</li> </ul>"},{"location":"setup/config-custom-wallet-ui/#1-dashboard-login","title":"1. Dashboard Login","text":"<p>Use https://dashboard.arcana.network to log in with one of the available options.</p> Developer Dashboard Login Page <p>Aggregate Login</p> <p>The aggregate login feature in the Arcana Auth SDK merges login identities from social providers into one Arcana account if the email ID is the same across these providers. Developers can log into the Arcana Developer Dashboard using any supported provider and still access the same Arcana account and app settings. </p>"},{"location":"setup/config-custom-wallet-ui/#2-select-custom-wallet-ui-to-register","title":"2. Select Custom Wallet UI to Register","text":"<p>Use the dashboard to create a new app entry and register the app. While specifying the new app name and other details, specify the  Wallet UI Mode setting as 'Custom UI'. By default, it is set to use the built-in, Arcana wallet UI. Then click the 'Create' button to confirm app registration. Once registered, you cannot change the  Wallet UI Mode setting.</p> Choose Custom Wallet UI <p>Click Create after specifying the custom wallet UI option to register the app. </p>"},{"location":"setup/config-custom-wallet-ui/#whats-next","title":"What's Next?","text":"<p>Configure the app to enable social login providers, manage chains and wallet user experience for signing blockchain transactions. Integrate the app with the SDK and onboard users. Issue supported JSON/RPC and Web3 wallet operations in the authenticated user's context. Allow the users to sign blockchain transactions.</p>"},{"location":"setup/config-custom-wallet-ui/#see-also","title":"See Also","text":"<ul> <li> Dashboard User's Guide</li> </ul>"},{"location":"setup/config-dApp-with-db-for-Solana/","title":"Solana Setup","text":"<p>This guide explains how to activate Solana, a non-EVM blockchain in a Web3 app and allow users to sign blockchain transactions using the Arcana wallet.</p> <p>Use the Arcana Developer Dashboard to first configure user onboarding settings, select Solana and tailor the blockchain signing experience for an app and then integrate the app with the Arcana Auth SDK. </p>"},{"location":"setup/config-dApp-with-db-for-Solana/#prerequisites","title":"Prerequisites","text":"<p>To log into the Arcana Developer Dashboard, you\u2019ll need an account with a supported social login or use email for passwordless access.</p> <ul> <li>Google</li> <li>GitHub</li> <li>Twitch</li> <li>Discord</li> </ul> <p>Use https://dashboard.arcana.network to log in with one of the available options.</p> Developer Dashboard Login Page <p>Aggregate Login</p> <p>The aggregate login feature in the Arcana Auth SDK merges login identities from social providers into one Arcana account if the email ID is the same across these providers. Developers can log into the Arcana Developer Dashboard using any supported provider and still access the same Arcana account and app settings. </p>"},{"location":"setup/config-dApp-with-db-for-Solana/#register-app","title":"Register App","text":"<p>To register an app that uses the Solana network, create a new app and select the chain type as Solana. Select one of the Solana chains as the default chain.</p> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p> Register Solana App"},{"location":"setup/config-dApp-with-db-for-Solana/#configure-app","title":"Configure App","text":"<p>Refer to the Arcana Developer Dashboard User's Guide for details on how to configure the branding, social authentication providers and other settings. In this section, you will learn how to configure the Solana network for the app via the Chain Management configuration section.</p>"},{"location":"setup/config-dApp-with-db-for-Solana/#manage-solana-chains","title":"Manage Solana chains","text":"<p>In the Manage Apps screen select the requisite configuration profile to bring up the app dashboard page. In the LHS click Configure and select Chain Management.</p> <p>You will see the available Solana chains that will be displayed when a user logs in and accesses the Arcana wallet.</p>"},{"location":"setup/config-dApp-with-db-for-Solana/#default-chain","title":"Default Chain","text":"<p>You can select one of the Solana networks and set it as the default chain. The default chain is shown as the selected chain in the Arcana wallet displayed in the app's context.</p>"},{"location":"setup/config-dApp-with-db-for-Solana/#edit-chain","title":"Edit Chain","text":"<p>To edit a Solana chain's RPC URL or the blockchain explorer URL, select the chain, click edit and update the required fields.</p> Edit Solana Chain Settings <p>For more details on using the dashboard to delete an app, switch between different applications, change configuration profile, monitor usage, etc., see Arcana Developer Dashboard User's Guide. </p>"},{"location":"setup/config-dApp-with-db-for-Solana/#next-steps","title":"Next Steps","text":"<p>After setting up Solana chains using the Arcana Developer Dashboard, you can begin integrating Solana app with the Arcana Auth SDK. See Solana Quick Start Guide for instructions on how to install and integrate the Arcana Auth SDK with your app. Once integrated, you can add code to onboard users and initiate Web3 wallet operations using the Solana network. Refer to the sample code here.</p>"},{"location":"setup/config-dApp-with-db-for-Solana/#see-also","title":"See Also","text":"<ul> <li>Solana Quick Start Guide</li> <li>Web3 Wallet Operations for Solana</li> <li>Integrating Solana App FAQ</li> <li>Solana App Integration Example</li> </ul>"},{"location":"setup/config-dApp-with-db-for-Unity/","title":"Unity Setup","text":"<p>This guide explains how to configure a Unity Web3 app and allow users to sign blockchain transactions using the Arcana wallet.</p> <p>Use the Arcana Developer Dashboard to first configure user onboarding settings for the Unity app and then integrate the app with the Arcana Auth Unity SDK. </p>"},{"location":"setup/config-dApp-with-db-for-Unity/#prerequisites","title":"Prerequisites","text":"<p>To log into the Arcana Developer Dashboard, you\u2019ll need an account with a supported social login or use email for passwordless access.</p> <ul> <li>Google</li> <li>GitHub</li> <li>Twitch</li> <li>Discord</li> </ul> <p>Use https://dashboard.arcana.network to log in with one of the available options.</p> Developer Dashboard Login Page <p>Aggregate Login</p> <p>The aggregate login feature in the Arcana Auth SDK merges login identities from social providers into one Arcana account if the email ID is the same across these providers. Developers can log into the Arcana Developer Dashboard using any supported provider and still access the same Arcana account and app settings. </p>"},{"location":"setup/config-dApp-with-db-for-Unity/#register-app","title":"Register App","text":"<p>To register a Web3 Unity app, log into the Arcana Developer Dashboard, create a new app and select the chain that must show up as the default chain in the wallet.</p> <p>See how to register a new App for details. </p>"},{"location":"setup/config-dApp-with-db-for-Unity/#configure-app","title":"Configure App","text":"<p>Refer to the Arcana Developer Dashboard User's Guide and configure the branding, social authentication providers and other settings. </p>"},{"location":"setup/config-dApp-with-db-for-Unity/#unity-settings-sdk-installation","title":"Unity Settings, SDK Installation","text":"<ul> <li> <p>Install NuGetForUnity.</p> </li> <li> <p>In the NuGet Toolbar at the top, click NuGet &gt; Manage NuGet packages. Manage NuGet Packages</p> </li> <li> <p>Install the following packages by STA: <code>Nethereum.Web3</code>, <code>WebsocketSharp.Core</code></p> </li> <li> <p>Use the Unity Editor Project Settings window to edit package settings for your project. Click Edit &gt; Project Settings &gt; Package Manager.</p> <ul> <li> <p>Edit Project Settings with URL https://npm-registry.arcana.network/ and set the scope to <code>com.cysharp.unitask, dev.voltstro</code> Edit Project Settings</p> </li> <li> <p>Add another new scoped registry with URL https://unitynuget-registry.azurewebsites.net and set the scope to <code>org.nuget</code>. Add Scoped Registry</p> </li> </ul> </li> <li> <p>In the NuGet window, use the NuGet Toolbar at the top, and click Window &gt; Package Manager &gt; Add Package by Name. Add Package by Name</p> </li> <li> <p>Add the following packages: <code>com.cysharp.unitask</code>, <code>`dev.voltstro.unitywebbrowser.engine.cef</code></p> <ul> <li> <p>Windows:  <code>dev.voltstro.unitywebbrowser.engine.cef.win.x64</code></p> </li> <li> <p>Linux: <code>dev.voltstro.unitywebbrowser.engine.cef.linux.x64</code></p> </li> <li> <p>MacOS: <code>dev.voltstro.unitywebbrowser.engine.cef.macos.x64</code></p> </li> </ul> </li> </ul> <p>See Unity Web Browser package list for details.</p> <ul> <li> <p>Download the Arcana Auth Unity SDK package: https://npm-registry.arcana.network/. Unzip the contents and copy them to the Assets folder of the Unity Project.</p> </li> <li> <p>Search for ArcanaSDK prefab in the 'Project Window' of the Unity Editor. Click Assets &gt; ArcanaSDK &gt; Prefabs &gt; ArcanaSDK. Drag this prefab into the project 'Hierarchy' and configure the prefab as shown here: Configure Arcana Prefab</p> </li> </ul>"},{"location":"setup/config-dApp-with-db-for-Unity/#next-steps","title":"Next Steps","text":"<p>After integrating an app with the Arcana Auth Unity SDK, developers can add code to onboard users and enable Web3 wallet operations for authenticated users to sign transactions.</p>"},{"location":"setup/config-dApp-with-db-for-Unity/#see-also","title":"See Also","text":"<ul> <li>Unity Auth Integration Example</li> </ul> <ul> <li> <p>Arcana Auth Unity SDK Quick Links</p> <ul> <li>Release notes</li> <li>Changelog</li> <li>Download SDK</li> </ul> </li> </ul>"},{"location":"setup/config-dApp-with-db-for-mvx/","title":"MultiversX Setup","text":"<p>This guide explains how to use the Arcana Developer Dashboard and set up MultiversX network, a non-EVM blockchain network so that MultiversX is pre-configured out of the box for Arcana wallet users.</p>"},{"location":"setup/config-dApp-with-db-for-mvx/#prerequisites","title":"Prerequisites","text":"<p>To log into the Arcana Developer Dashboard, you\u2019ll need an account with a supported social login or use email for passwordless access.</p> <ul> <li>Google</li> <li>GitHub</li> <li>Twitch</li> <li>Discord</li> </ul> <p>Use https://dashboard.arcana.network to log in with one of the available options.</p> Developer Dashboard Login Page <p>Aggregate Login</p> <p>The aggregate login feature in the Arcana Auth SDK merges login identities from social providers into one Arcana account if the email ID is the same across these providers. Developers can log into the Arcana Developer Dashboard using any supported provider and still access the same Arcana account and app settings. </p>"},{"location":"setup/config-dApp-with-db-for-mvx/#register-app","title":"Register App","text":"<p>Log into the Arcana Developer Dashboard to register the app. Create a new app and select the chain type as MultiversX. </p> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p> MultiversX Shard Selection <p>MultiversX uses adaptive state sharding for horizontal scaling. Shards allow it to process far more transactions through parallelization, improving transaction throughput and efficiency. </p> <p>Choose your shard once when registering a MultiversX app on the Arcana Developer Dashboard. It cannot be changed later.</p> <p>By default, Arcana uses 'Shard 0' to deploy all app contracts and allocate wallet addresses for users. The benefit is that when addresses from the same shard interact with contracts on the same shard, latencies are much lower than in cross-shard interactions.</p> Register MultiversX App"},{"location":"setup/config-dApp-with-db-for-mvx/#configure-app","title":"Configure App","text":"<p>The chain type and the default chain are already pre-configured during the app registration. Use the Chain Management configuration section to configure the MultiversX chains.</p>"},{"location":"setup/config-dApp-with-db-for-mvx/#manage-multiversx-chains","title":"Manage MultiversX chains","text":"<p>In the Manage Apps screen select the requisite configuration profile to bring up the app dashboard page. In the LHS click Configure and select Chain Management.</p> <p>Select one of the available MultiversX chains displayed on the screen. You can mark it as default or edit the chain settings.</p>"},{"location":"setup/config-dApp-with-db-for-mvx/#default-chain","title":"Default Chain","text":"<p>Choose a chain and select the '...' displayed against the entry in the dashboard. A drop down menu will show up. Choose Set as default to mark that chain as the default chain.</p> <p>By selecting a chain as the default, developers ensure that the same chain is automatically configured and displayed in the wallet when the user logs into the app. The authenticated user can instantly sign blockchain transactions on MultiversX, from within the app context, without having to configure the wallet.</p>"},{"location":"setup/config-dApp-with-db-for-mvx/#edit-chain","title":"Edit Chain","text":"<p>To edit a MultiversX chain's RPC URL or the blockchain explorer URL, select the chain, click '...' and select edit option to update the required fields.</p> Edit MultiversX Chain Settings <p>For more details on how to configure other settings such as branding, social authentication providers, delete a registered app to re-register on a different chain type, monitor app usage, etc., see Arcana Developer Dashboard User's Guide. </p>"},{"location":"setup/config-dApp-with-db-for-mvx/#next-steps","title":"Next Steps","text":"<p>After setting up MultiversX chains through the Arcana Developer Dashboard, you can begin integrating MultiversX app with the Arcana Auth SDK. See MultiversX Quick Start Guide for instructions on how to install and integrate the Arcana Auth SDK with your app. Once integrated, you can add code to onboard users and initiate Web3 wallet operations using the MultiversX network.</p>"},{"location":"setup/config-dApp-with-db-for-mvx/#see-also","title":"See Also","text":"<ul> <li>MultiversX Quick Start Guide</li> <li>Web3 Wallet Operations for MultiversX</li> <li>Integrating MultiversX App FAQ</li> <li>MultiversX App Integration Example</li> </ul>"},{"location":"setup/config-dApp-with-db-for-near/","title":"Near Setup","text":"<p>This guide explains how to use the Arcana Developer Dashboard and set up Near blockchain network, a non-EVM blockchain network so that the Arcana wallet users can seamlessly start using the Near networks.</p>"},{"location":"setup/config-dApp-with-db-for-near/#prerequisites","title":"Prerequisites","text":"<p>To log into the Arcana Developer Dashboard, you\u2019ll need an account with a supported social login or use email for passwordless access.</p> <ul> <li>Google</li> <li>GitHub</li> <li>Twitch</li> <li>Discord</li> </ul> <p>Use https://dashboard.arcana.network to log in with one of the available options.</p> Developer Dashboard Login Page <p>Aggregate Login</p> <p>The aggregate login feature in the Arcana Auth SDK merges login identities from social providers into one Arcana account if the email ID is the same across these providers. Developers can log into the Arcana Developer Dashboard using any supported provider and still access the same Arcana account and app settings. </p>"},{"location":"setup/config-dApp-with-db-for-near/#register-app","title":"Register App","text":"<p>Log into the Arcana Developer Dashboard to register the app. Create a new app and select the chain type as Near. </p> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p> Register Near App"},{"location":"setup/config-dApp-with-db-for-near/#configure-app","title":"Configure App","text":"<p>The chain type and the default chain are already pre-configured during the app registration. Use the Chain Management configuration section to configure the Near chains.</p>"},{"location":"setup/config-dApp-with-db-for-near/#manage-near-chains","title":"Manage Near chains","text":"<p>In the Manage Apps screen select the requisite configuration profile to bring up the app dashboard page. In the LHS click Configure and select Chain Management.</p> <p>Select one of the available Near chains displayed on the screen. You can mark it as default or edit the chain settings.</p>"},{"location":"setup/config-dApp-with-db-for-near/#default-chain","title":"Default Chain","text":"<p>Choose a chain and select the '...' displayed against the entry in the dashboard. A dropdown menu will show up. Choose Set as default to mark that chain as the default chain.</p> <p>By selecting a chain as the default, developers ensure that the same chain is automatically configured and displayed in the wallet when the user logs into the app. The authenticated user can instantly sign blockchain transactions on Near, from within the app context, without having to configure the wallet.</p>"},{"location":"setup/config-dApp-with-db-for-near/#edit-chain","title":"Edit Chain","text":"<p>To edit a Near chain's RPC URL or the blockchain explorer URL, select the chain, click '...' and select edit option to update the required fields.</p> Edit Near Chain Settings <p>For more details on how to configure other settings such as branding, social authentication providers, delete a registered app to re-register on a different chain type, monitor app usage, etc., see Arcana Developer Dashboard User's Guide. </p>"},{"location":"setup/config-dApp-with-db-for-near/#next-steps","title":"Next Steps","text":"<p>After setting up Near chains through the Arcana Developer Dashboard, you can begin integrating Near app with the Arcana Auth SDK. See Near Quick Start Guide for instructions on how to install and integrate the Arcana Auth SDK with your app. Once integrated, you can add code to onboard users and initiate Web3 wallet operations using the Near network.</p>"},{"location":"setup/config-dApp-with-db-for-near/#see-also","title":"See Also","text":"<ul> <li>Near Quick Start Guide</li> <li>Web3 Wallet Operations for Near</li> <li>Integrating Near App FAQ</li> <li>Near App Integration Example</li> </ul>"},{"location":"setup/config-dApp-with-db/","title":"Dashboard Users Guide","text":"<p>The Arcana Developer Dashboard helps Web3 developers set up the Arcana Auth SDK configuration.</p> <p>Log in, register your app, grab your unique Client ID, configure authentication settings, then install the Arcana Auth SDK and integrate it with the Web3 app.</p> Arcana Developer Dashboard <p>This guide covers how to:</p> <ul> <li>Log into the dashboard</li> <li>Register a Web3 app with Arcana</li> <li>Get Client ID</li> <li> <p>Manage Configuration Profiles</p> <ul> <li>Testnet/Mainnet</li> <li>Switching configuration Profiles</li> </ul> </li> <li> <p>Configure Auth Settings</p> <ul> <li>Branding</li> <li>Social Login Providers</li> <li>Chain Management</li> <li>Wallet Customization</li> <li>Login Session Management</li> <li>Keyspace Type</li> </ul> </li> <li> <p>Switch application</p> </li> <li>Monitor usage and billing</li> <li>Delete a registered app</li> </ul>"},{"location":"setup/config-dApp-with-db/#prerequisites","title":"Prerequisites","text":"<p>To log into the Arcana Developer Dashboard, you\u2019ll need an account with a supported social login or use email for passwordless access.</p> <ul> <li>Google</li> <li>GitHub</li> <li>Twitch</li> <li>Discord</li> </ul>"},{"location":"setup/config-dApp-with-db/#dashboard-login","title":"Dashboard Login","text":"<p>Use https://dashboard.arcana.network to log in with one of the available options.</p> Developer Dashboard Login Page <p>Aggregate Login</p> <p>The aggregate login feature in the Arcana Auth SDK merges login identities from social providers into one Arcana account if the email ID is the same across these providers. Developers can log into the Arcana Developer Dashboard using any supported provider and still access the same Arcana account and app settings. </p>"},{"location":"setup/config-dApp-with-db/#register-application","title":"Register Application","text":"<p>After logging into the dashboard, the Manage Apps screen is displayed. It contains one app card per registered app. The app card contains a summary of app usage statistics and buttons to view and edit the configuration profiles for Testnet and Mainnet settings.</p> Manage Apps <p>To register the app, create a new app entry by clicking on the Create New App wizard.</p> Register by Creating New App <p>Provide the following inputs to register the app:</p> <ul> <li>App name</li> <li>Chain Type: EVM, Solana, MultiversX, Near</li> <li>Default Blockchain</li> <li>Wallet UI Mode</li> </ul> App NameChain TypeDefault ChainWallet UI Mode <p>Add a unique name for the app. It can be edited later. After registration, a unique Client ID is associated with each app name. This Client ID does not change if the app name is edited later.</p> <p>All emails related to a registered app billing or user login will mention the latest app name as displayed in the dashboard. Once an app is deleted, the Client ID is no longer valid. Creating a new app with the same name and registering it with Arcana will result in a new Client ID associated with the app.</p> <p>Edit App Name</p> <p>Click on the pen icon next to the app name. Click Enter in the editable text field to save the changes.</p> <p>During registration, developers must choose between EVM chains or non-EVM chains supported by the app. The pre-configured chain list in the Arcana wallet will display only the configured chains.</p> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p> <p>Based on your chain type selection, you will see a list of supported chains. Choose one as the default. This default chain will appear as the current, active chain in the Arcana wallet when the user logs into the app integrated with the Arcana Auth SDK.</p> <p>The wallet UI mode setting allows the developers to choose whether they want to use the default, built-in Arcana wallet UI or build a custom wallet UI for the app users. </p> One Time Setting <p>The Custom Wallet UI option selected during app registration is a one-time setting. Once selected, the app cannot use the built-in Arcana wallet UI at all. Developers must create a custom wallet UI and plug in the requisite Web3 wallet operations.</p> Global Keyspace Not Supported <p>If the Custom Wallet UI option is selected during app registration, the app is assigned app-specific keys by default. The app configuration does not have the option to configure global keyspace.</p> View Wallet UI Mode <p>Once specified during app-registration, the Wallet UI mode setting can be viewed later via the Configure &gt; Arcana Wallet settings section in the app configuration profile. </p> <p> Wallet UI Mode Setting </p> <p>After providing all the required inputs, click Create to register the app.</p> Register dApp <p>The app is registered, and a unique Client ID is assigned. By default, every newly registered app is associated with a Testnet configuration profile. </p> New App Dashboard"},{"location":"setup/config-dApp-with-db/#get-client-id","title":"Get Client ID","text":"<p>After successful registration, the default Testnet configuration profile settings are displayed in the dashboard. </p> <p>The Client ID assigned to the app is displayed on the top right. Note that the Client ID differs in Testnet and Mainnet configuration profiles.</p> <p>To access the Mainnet Client ID, click dropdown on the top RHS and choose Mainnet. Copy the Mainnet Client ID displayed on the dashboard.</p> <p>When deploying an app on the Arcana Mainnet, use the Client ID associated with the Mainnet configuration profile.</p> Get Client ID"},{"location":"setup/config-dApp-with-db/#manage-configuration-profiles","title":"Manage Configuration Profiles","text":"<p>Each registered app is displayed in the 'Manage Apps' dashboard. A Testnet configuration profile is associated with each app by default. The 'Mainnet' button is disabled for a newly registered app. For Mainnet deployment, the developer must create a new Mainnet profile. </p> <p>Testnet vs. Mainnet Settings</p> <p>Both Testnet and Mainnet configuration profiles are maintained separately. Each profile is associated with a unique Client ID. </p> <p>To view Testnet configuration settings, click the 'Testnet' button on the app card in the 'Manage Apps' screen. The usage metrics page will open. A dropdown labeled 'Testnet' at the top right confirms you're viewing the app's Testnet settings.</p> App Configuration Settings"},{"location":"setup/config-dApp-with-db/#testnet","title":"Testnet","text":"<p>To view or edit the Testnet configuration settings, browse the 'Manage Apps' screen, locate the app card, and click 'Testnet.' </p> Testnet Client ID"},{"location":"setup/config-dApp-with-db/#mainnet","title":"Mainnet","text":"<p>Browse the 'Manage Apps' screen to find your app card. If the 'Mainnet' configuration profile exists, the 'Mainnet' button will be enabled. Click 'Mainnet' to view the application usage metrics and the 'Mainnet' profile. If the button is disabled, the 'Mainnet' profile hasn't been created yet. To create it, view the 'Testnet' profile by clicking the app card. On the usage metrics page, find the dropdown in the top right, click it, and select 'Mainnet' to create the configuration profile.</p> Select Testnet/Mainnet Settings <p>Selecting 'Mainnet' for the first time opens a pop-up with two options to create the 'Mainnet' configuration profile:</p> <ul> <li>Copy Testnet Profile</li> <li>Create a new Mainnet Profile. </li> </ul> Switch to Mainnet Settings <p>Use one of these options to create the 'Mainnet' profile. A new Client ID is assigned to the Mainnet configuration profile. To deploy the app on Mainnet, this new Client ID must be updated in the integration code. Learn more...</p> Update Redirect URIs <p>After creating the 'Mainnet' profile, developers must also update the social login provider 'Redirect URI' settings via the respective provider developer consoles or dashboards. </p> <p>Copy the 'Redirect URI' displayed for the 'Mainnet' profile and update this value in the social login provider's developer console. For e.g., for Google, update the Redirect URI in the Google Developer Console. Learn more...</p> Example: Copying Google Profile <p>If Google is enabled in your app's 'Testnet' profile, then during the configuration of the social login provider through the Google Developer console, the Testnet redirect URI was added.  Copy the 'Mainnet' profile redirect URI value from the Arcana Developer Dashboard and update them in the Google Console OAuth settings. </p> <p>Ensure you add the 'Mainnet' redirect URI value for the other social login providers enabled in the 'Testnet' profile. This is required for enabling your app to use the Arcana Mainnet. </p> <p>The figure below shows how the 'redirect URI' differs from the Testnet Settings where Google and Twitch were configured, and the 'Testnet' profile was copied to create a 'Mainnet' profile.</p> <p> Mainnet Redirect URI </p>"},{"location":"setup/config-dApp-with-db/#switch-profile","title":"Switch Profile","text":"<p>When both Testnet and Mainnet profiles are linked to the app, switch profiles using one of the following options:</p> <ul> <li>On the Manage Apps page, click Testnet or Mainnet to change the configuration profile view.</li> <li>On the app settings page, use the dropdown in the top right to switch between Testnet and Mainnet.</li> </ul> <p>If the Mainnet profile isn\u2019t created, use the dropdown on the 'Testnet' page to create it. After creation, the dashboard will automatically switch to the Mainnet settings.</p> App Settings: Switch to Testnet/Mainnet Profile Manage Apps: Switch to Testnet/Mainnet Profile"},{"location":"setup/config-dApp-with-db/#configuration-settings","title":"Configuration Settings","text":"<p>To configure Arcana wallet usage settings, the app must be registered. Click on the registered app card in the 'Manage Apps' screen to view the configuration settings and edit them.</p>"},{"location":"setup/config-dApp-with-db/#settings-overview","title":"Settings Overview","text":"<p>Click Configure in the LHS navigation pane of the Arcana Developer Dashboard to view the following configuration categories:</p> Auth Settings BrandingSocialChainsWalletSessionKeyspace <p>The Branding settings control the look and feel of the embedded Arcana wallet displayed in an app's context.</p> <ul> <li>Upload Logo</li> <li>Wallet Theme</li> </ul> <p>See how to configure branding for details.</p> <p> Branding Settings </p> <p>The Social Auth settings manage the user onboarding experience and control which social login providers are available for app login. </p> <ul> <li>Social Auth</li> <li>Identity Access Managers</li> <li>Custom Auth</li> </ul> <p>Developers can enable one or more providers for app login. Passwordless login is automatically enabled for all registered apps. See how to configure authentication providers, for details.</p> <p>Redirect URI</p> <p>The Redirect URI  field in the Social Auth section of the dashboard lists an auto-generated URL. This URL value is used as input when configuring the social login providers.</p> <p> Social Auth Settings </p> <p>The Chain Management settings control which chains will be displayed as the default active chain in the wallet from the list of pre-configured chains available out of the box for apps that integrate with the Arcana Auth SDK.</p> <p> Chain Management Settings </p> <ul> <li>Add Chains</li> <li>Edit Chains</li> <li>Set Default Chain</li> </ul> <p> Set Default Chain </p> <p>For details, see how to manage chains.</p> <p>The Arcana wallet settings display whether the app is registered using the built-in, default wallet UI or a custom UI. It also allows for domain restriction whereby the Arcana wallet can be loaded successfully within an app's context.</p> <ul> <li>Wallet Domain</li> <li>Wallet UI</li> </ul> <p>See wallet UI configuration for details.</p> <p> Wallet Settings </p> <p>The login session management settings display whether the app is configured to use persistent or non-persistent session (default) type. </p> <p>For the persistent session, the developers can view and update the specified time for which the authenticated user login session is persisted (in minutes). Once a user closes the browser and reopens within this specified period, the user is automatically logged in. Learn more...</p> <p> Session Management </p> <p>Not available for Custom Wallet UI</p> <p>Apps that are registered with the Custom Wallet UI option are not allowed to configure keyspace settings. By default, such apps can only use the app-specific keys. </p> <p>The following Keyspace settings control whether the wallet address for the user remains the same across all the apps that are integrated with the Arcana Auth SDK or are unique for each app. </p> <ul> <li>App-Specific Keys (default)</li> <li>Global Keys</li> </ul> <p>Learn more about App-specific and global keys and how to set up keyspace.</p> <p> Keyspace: Global/App-Specific Keys </p> <p>Save the configuration settings to make sure the setting changes take effect.</p> Save Configuration Updates"},{"location":"setup/config-dApp-with-db/#branding","title":"Branding","text":"<p>To view and edit the look and feel of the embedded Arcana wallet, use Manage Apps &gt; App Card &gt; Testnet/Mainnet Configuration to view the app settings. In the LHS menu, click Configure &gt; Branding.</p> <p>See how to configure branding for details.</p>"},{"location":"setup/config-dApp-with-db/#social-auth","title":"Social Auth","text":"<p>To view and edit the social login provider's settings for a registered app, use Manage Apps &gt; App Card &gt; Testnet/Mainnet Configuration to view the app settings. In the LHS menu, click Configure &gt; Social Auth.</p> <p>The dashboard screen will display all the user onboarding options and configuration settings to enable them. Note that each user onboarding option may have different settings. Select the onboarding option and provide the required configuration values.</p> <p>See how to configure social login for details.</p> <p>Login Providers: Social, IAM, Custom</p> <p>Besides the social login providers, Arcana Auth SDK also supports IAM Providers and Custom Auth options to onboard users.</p>"},{"location":"setup/config-dApp-with-db/#chain-management","title":"Chain Management","text":"<p>Arcana Auth SDK provides a subset of supported blockchains out of the box, and these chains are displayed in the in-app Arcana wallet by default. Developers can configure this list of supported, pre-configured chains in the Arcana wallet and pick up one of the chains as the default active chain in the wallet.</p> <p>To view and edit the wallet chains, click Manage Apps &gt; App Card &gt; Testnet/Mainnet Configuration to bring up the app usage metrics page in the dashboard. In the LHS menu, click Configure &gt; Chain Management.</p> <p>An-note</p> <p>Arcana Auth SDK supports both EVM and non-EVM chains. When registering the app using the dashboard, the decision to use EVM or non-EVM chains must be made. </p> <p>If the EVM chain type is selected during app registration, then the pre-configured chain list will consist of only the EVM-compatible chains as available options. Similarly, if a non-EVM chain, Solana, is selected during app registration, the chain options displayed will be only those belonging to the Solana ecosystem. Developers can switch chains from among the ones that are displayed. Switching from an EVM chain to a non-EVM chain is impossible once an app is registered.</p> <p>For details, see how to manage chains.</p>"},{"location":"setup/config-dApp-with-db/#configure-non-evm-chains","title":"Configure Non-EVM Chains","text":"<p>Use the dashboard to enable non-EVM chains in your Web3 apps. </p> <ul> <li>Solana</li> <li>MultiversX</li> <li>Near</li> </ul>"},{"location":"setup/config-dApp-with-db/#arcana-wallet-customization","title":"Arcana Wallet Customization","text":"<p>To view and edit the wallet settings, click Manage Apps &gt; App Card &gt; Testnet/Mainnet Configuration and bring up the app usage metrics page in the dashboard. In the LHS menu, click Configure &gt; Arcana Wallet.</p> <p>See how to configure wallet settings for details.</p>"},{"location":"setup/config-dApp-with-db/#login-session-management","title":"Login Session Management","text":"<p>To view and edit the login session management settings, click Manage Apps &gt; App Card &gt; Testnet/Mainnet Configuration and bring up the app usage metrics page in the dashboard. In the LHS menu, click Configure &gt; Login Session Management.</p> <p>Choose between persistent and non-persistent session types to manage whether the user must re-login to the app after closing the browser or they are automatically logged in within a specified window of time.</p> <p>In the Manage Apps screen, select the app card, and click on the configuration profile to view setting details. You will see the app configuration settings dashboard screen. In the LHS navigation, select Configure &gt; Session Management settings. </p> Session Management <p>You can view and change the session type or the Require login after time setting later as well. Apps that require the user to be immediately logged out automatically, if they close the browser window without explicitly logging out, should choose the default Non-Persistent setting.</p> <p>Persistent Session</p> <p>When selecting the persistent session type, specify the 'Require log in after` value. This setting is not required for non-persistent sessions. The specified time determines how long the session persists, allowing users to close and reopen the browser without needing to log in again.</p> Session Management"},{"location":"setup/config-dApp-with-db/#configure-keyspace","title":"Configure Keyspace","text":"<p>To view and edit the keyspace settings for the app, click Manage Apps &gt; App Card &gt; Testnet/Mainnet Configuration and bring up the app usage metrics page in the dashboard. In the LHS menu, click Configure &gt; Keyspace.</p> <p>Arcana offers two types of keyspace options for keys assigned to the Web3 apps: App-specific and Global Keys.</p> <p>App-specific keys are the default.</p> Keyspace Options"},{"location":"setup/config-dApp-with-db/#switch-application","title":"Switch Application","text":"<p>To switch viewing configuration settings from one application configuration profile screen to another, click on the dropdown next to the application name in the LHS navigation. You will see other registered applications in your account. Select another app name in the dropdown to view its configuration settings.</p> <p>'Manage Apps' is the last entry in the dropdown. Click 'Manage Apps' to access the dashboard landing page with the app cards. Switch to another app by clicking on the app card.</p> Switch Application"},{"location":"setup/config-dApp-with-db/#monitor-usage","title":"Monitor Usage","text":"<p>Developers can monitor their registered application usage statistics via the Arcana Developer Dashboard. The Manage Apps screen displays the account-level usage metrics for all the applications registered in the developer account. Click on the app card to drill down into the application-specific usage details. </p>"},{"location":"setup/config-dApp-with-db/#account-usage-metrics","title":"Account Usage Metrics","text":"<p>The Manage Apps screen displays Monthly Active Users (MAU) for the developer account. This is an aggregate score across all applications registered for a developer account and configured to use the Arcana Mainnet. Any application using the 'Testnet' is not billed or included in the overall account usage statistic.</p> App Usage Metrics <p>Mainnet Billing</p> <p>The billing data only applies to Mainnet usage and will be available in the forthcoming releases.</p>"},{"location":"setup/config-dApp-with-db/#usage-per-application","title":"Usage per Application","text":"<p>Arcana maintains per-application usage statistics separately for the 'Testnet' and 'Mainnet' configuration profiles. </p> <p>The Manage Apps dashboard screen lists all registered applications as cards. Each application card displays the 'Total Users' statistic. This refers to the monthly active application users utilizing the Arcana Testnet/Mainnet. To view per-application usage details, click on the app card and select 'Testnet' or 'Mainnet' profile to see the following statistics: </p> <ul> <li>Number of logged-in users </li> </ul> <p>Use the 'Daily' and 'Monthly' tabs to see the respective usage statistics. </p> Daily/Monthly Usage <p>Use the dropdown in the top right of the application dashboard screen to select Testnet/Mainnet usage details.</p> Testnet/Mainnet Usage Statistics"},{"location":"setup/config-dApp-with-db/#billing","title":"Billing","text":"<p>Arcana tracks the Mainnet app usage in terms of MAU for every developer account. At the end of every month, an invoice is generated. The chargeable amount against the invoice is auto-deducted using the payment method configured by the developer in their profile section. </p> <p>To begin using the Arcana Auth SDK, the app developers don't need to update the profile details, including the billing information. The developer must provide the billing details via the profile section of the Arcana Developer Dashboard once the app uses up all the available free tiers of Arcana Mainnet usage. Otherwise, the registered apps will be suspended and users will not be allowed to log in to any registered app using the developer account.</p> <p>For details on current pricing and free tier limits, contact our Arcana support.</p>"},{"location":"setup/config-dApp-with-db/#payment-method-setup","title":"Payment Method Setup","text":"<p>Click on the user icon on the top right of the Arcana Developer Dashboard screen. Select Profile in the dropdown. </p> Payment Method Setup <p>You will see the developer's Arcana account profile details. The developer account name and public identifier (email) are automatically retrieved based on the account used to log into the Arcana Developer Dashboard.</p> <p>Developers must update the following profile details and then click Save. </p> <ul> <li>Organization</li> <li>Billing Address Details</li> <li>Payment Method</li> </ul> Billing Details <p>Payment Method</p> <p>By default, the 'Payment Method' section is disabled. It is enabled once the billing address details are configured.</p>"},{"location":"setup/config-dApp-with-db/#view-invoices","title":"View Invoices","text":"<p>Click on the user icon on the top right of the Arcana Developer Dashboard screen. Select Invoices in the dropdown.</p> View Invoices <p>On the Invoices page, you will see the details of the current pending dues, followed by the billing history of previous invoices that can be downloaded for reference.</p> Invoice Details"},{"location":"setup/config-dApp-with-db/#view-billing-notifications","title":"View Billing Notifications","text":"<p>Click the bell icon to view all notifications for the developer account. Check the billing notifications list for details.</p> Billing Notifications"},{"location":"setup/config-dApp-with-db/#delete-application","title":"Delete Application","text":"<p>To de-register an application, delete the entry in the 'Manage Apps' screen of the Arcana Developer Dashboard. </p> Dashboard: Manage Apps <p>Select the application you wish to de-register and click on the delete icon. Confirm delete action.</p> Delete/De-register App"},{"location":"setup/config-dApp-with-db/#see-also","title":"See Also","text":"<ul> <li>Configure Social Login</li> <li>Configure Wallet Settings</li> <li> Manage Chains</li> <li> Configure Custom Auth Settings</li> </ul>"},{"location":"setup/config-wallet-chains/","title":"Manage Chains","text":"<p>This guide will show you how to handle the list of chains that your app users can use to sign blockchain transactions.</p> <p>Arcana Auth SDK works with all EVM-compatible blockchain networks and selected non-EVM chains. </p> <p>Only a subset of all the supported chains is available as the pre-configured list displayed in the Arcana Developer Dashboard. Developers can use and tweak this pre-configured list and control which chains are available out of the box in the Arcana wallet UI once a user logs into the app integrated with the Arcana Auth SDK. Ethereum is selected as the active chain in the list by default. Developers can change the active chain that shows up as the selected chain in the wallet UI.</p> <p>Developers can programmatically add supported chains and issue blockchain transactions in the app seeking the user's approval. Authenticated users can also add any supported blockchain network that is not already displayed in the Arcana wallet UI. User-made changes to the wallet chain list are effective only for the current session. However, any additional supported chains added to this pre-configured list by the app developer are always available to the wallet users. </p>"},{"location":"setup/config-wallet-chains/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you can access the Arcana Developer Dashboard: https://dashboard.arcana.network</p> </li> <li> <p>The  app must be registered using the  Arcana Developer Dashboard.</p> </li> </ul> <p>Follow these steps to manage the list of pre-configured chains displayed in the in-app Arcana wallet.</p>"},{"location":"setup/config-wallet-chains/#1-dashboard-log-in","title":"1: Dashboard Log-in","text":"<p>Log in to the Arcana Developer Dashboard and click your registered app entry from the 'Manage Apps' screen. Click Configure in the LHS navigation area. Select Chain Management to configure the default subset of supported chains.</p> Dashboard: Chain Management <p>The chain configuration UI is displayed:</p> Chain Management Settings"},{"location":"setup/config-wallet-chains/#2-review-chain-settings","title":"2: Review Chain Settings","text":"<p>Developers can enable either EVM chains or non-EVM chains in the context of a Web3 app integrated with Arcana Auth SDK. The chain type selection is a one-time setting during app registration and cannot be reconfigured later. While reviewing chains, you can see whether the app is configured to use EVM chains or only the non-EVM chains.</p>"},{"location":"setup/config-wallet-chains/#evm-chains","title":"EVM Chains","text":"<p>Browse the EVM chains displayed in the pre-configured list of chains in the dashboard. Select the active chain. The chain marked active is displayed as the pre-selected chain in the wallet UI once the user logs in. </p> Pre-configured EVM Chains <p>Developers can add other EVM chains to the out-of-the-box, pre-configured list. This list governs the list of chains available and displayed in the Arcana wallet UI for the authenticated users. By default, for non-EVM chain type, Ethereum is set as the active chain.</p> Pre-configured EVM Chains"},{"location":"setup/config-wallet-chains/#non-evm-chains","title":"Non-EVM Chains","text":"<p>The following non-EVM chains are supported and displayed in the list of pre-configured chains in the Arcana Developer Dashboard.</p> <ul> <li>Solana</li> <li>MultiversX</li> <li>Near</li> </ul> <p>The selection of non-EVM or EVM chain types for an app is made at the time of app registration. Only the chains belonging to the selected non-EVM chain type are available in the pre-configured list of chains displayed in the dashboard.</p> <p>The Testnet is selected as the default chain. Developers can change the default chain to say the 'Dev' network or the Mainnet. If the 'EVM' chain type is selected during the app registration, then the developer or wallet user can switch the active app chain from one EVM chain to another at a later point in time. However, the same is not possible across EVM and non-EVM chains or between two non-EVM chain types. </p> <p>Once an app is registered for a non-EVM chain, the default active chain can be switched to one of the networks available for that particular chain type. For example, if Solana is selected as the chain type, then only the following network options are available:  Solana, Solana Testnet, Solana Dev.</p>"},{"location":"setup/config-wallet-chains/#solana","title":"Solana","text":"Solana Pre-configured Chains <p>See how to set up Solana and Solana Quick Start Guide for more details.</p>"},{"location":"setup/config-wallet-chains/#multiversx","title":"MultiversX","text":"MultiversX Pre-configured Chains <p>See how to set up MultiversX and MultiversX Quick Start Guide for more details.</p>"},{"location":"setup/config-wallet-chains/#near","title":"Near","text":"Near Pre-configured Chains <p>See how to set up Near and Near Quick Start Guide for more details.</p>"},{"location":"setup/config-wallet-chains/#3-default-active-chain","title":"3: Default Active Chain","text":"<p>When a user logs into the wallet, the default active chain is selected. To switch to a different default chain, select the new chain in the Arcana Developer Dashboard, click \"...\" ellipses and choose 'set as default' option. The figure below illustrates Polygon as the default active chain.</p> Set Polygon as the Active Chain <p>Non-EVM Chains</p> <p>If the chain type selected during app registration is a non-EVM chain type, then you will not see any EVM-compatible chains displayed in the dashboard. </p> <p>Once a non-EVM chain type is selected, developers can further choose one as the default active chain from amongst the network options displayed in the dashboard for that chain type.</p>"},{"location":"setup/config-wallet-chains/#4-add-chain","title":"4: Add Chain","text":""},{"location":"setup/config-wallet-chains/#evm-chains_1","title":"EVM Chains","text":"<p>Click the Add Chain button on the top right of the 'Chain Management' dashboard screen. Any newly added chain is automatically set as the default chain displayed in the wallet UI.</p> <p>To add a blockchain, specify the following details and click Save.</p> <ul> <li>Network Name</li> <li>Chain Id</li> <li>Currency Symbol</li> <li>RPC URL</li> <li>Block Explorer URL</li> <li>Testnet/Mainnet Chain Type</li> </ul> Add New Chain <p>Once you click Save, the newly added chain will be displayed in the dashboard and also shown in the wallet UI once a user logs into the app.</p> Dashboard: Newly Added Chain Wallet: Newly added Chain"},{"location":"setup/config-wallet-chains/#non-evm-chains_1","title":"Non-EVM Chains","text":"<p>In the current release, only some selected non-EVM chains, such as Solana, MultiversX, and Near are supported and available in the pre-configured chain list. Other non-EVM chains will be supported in the upcoming releases.</p> <p>Developers cannot arbitrarily add any other non-EVM chains to this pre-configured list of chains, either through the dashboard or programmatically.</p> <p>To learn more about the list of supported chains, see supported blockchains.</p> <p>That's all! </p>"},{"location":"setup/config-wallet-chains/#whats-next","title":"What's Next?","text":"<p>Besides managing the pre-configured list of chains via the Arcana Developer Dashboard configuration settings, a developer can also add other supported EVM-compatible chains programmatically to the wallet via the <code>wallet_addEthereumChain</code> method. To do that, the app must be integrated with the Arcana Auth SDK and the <code>AuthProvider</code> initialized before calling any of the SDK functions. </p> <p>For details refer to the Arcana Auth SDK Usage Guide.</p>"},{"location":"setup/config-wallet-chains/#see-also","title":"See also","text":"<ul> <li>Arcana Auth SDK Errors</li> <li>Arcana Auth SDK Usage Guide</li> <li> Configure Solana Chains</li> <li> Configure MultiversX Chains</li> <li> Configure Near Chains</li> <li>Auth SDK Reference</li> </ul>"},{"location":"setup/db-err-messages/","title":"Dashboard Usage Errors","text":"<p>The Arcana Developer Dashboard is used to register the Web3 app, configure Arcana Auth SDK usage settings before installing and integrating the SDK with the Web3 app.</p> <p>This guide lists common dashboard usage errors and potential causes.</p>"},{"location":"setup/db-err-messages/#error-messages","title":"Error Messages","text":"Error Description Login providers are disabled as you have chosen Global keys. Developers are not required to specify social login provider configuration if global keyspace option is selected. Error occurred while saving keyspace. Try again or contact support! When switching between keyspace type there was some error in saving the current settings. Error occurred while submitting the form. Try again or contact support! Check the various form input fields and ensure all required fields are filled in appropriately. Error occurred while saving the IAM auth credentials. Error while saving the configuration settings for social auth configuration such as Cognito or Firebase. Error occurred while saving the social auth. Check social login provider settings. There may be an issue between dashboard and the backend while saving those settings. Error occurred while saving the wallet configurations. There may be some issue in saving the settings from the dashboard to the backend. Unable to delete the app at the moment. Please try again or contact support. The dashboard is not able to get a confirmation of app settings deletion from the backend. Error occurred while creating mainnet app. The dashboard is not able to communicate with the backend and get a success status for app creation request. No Card Added. For billing, user must add payment details. After free MAU are exhausted, billing will resume on a monthly basis. Unable to copy. Please try again or contact support. Issue with the redirect UI setting in the dashboard. Either the setting was not provided or failed to be saved in app settings due to a backend issue. Can't delete Default chain. Chains that are pre-configured in the wallet cannot be deleted. New supported chains can be added and set as default. While deleting a default some error occurred while saving the settings at the backend."},{"location":"setup/config-auth/","title":"Overview","text":""},{"location":"setup/config-auth/#auth-settings","title":"Auth Settings","text":"<p> Social Providers  IAM Providers  Passkeys </p> <p> Manage Chains</p> <p> Wallet UX </p> <p>Gaming: Unity Setup</p>"},{"location":"setup/config-auth/#advanced","title":"Advanced","text":"<p>Custom Auth Custom Wallet UI</p>"},{"location":"setup/config-auth/register-app/","title":"Register App","text":"<p>Learn how to register a Web3 app through the Arcana Developer Dashboard before using the Arcana Auth SDK to enable social login and allow users to sign blockchain transactions via the Arcana wallet.</p>"},{"location":"setup/config-auth/register-app/#prerequisites","title":"Prerequisites","text":"<p>To log into the Arcana Developer Dashboard, you\u2019ll need an account with a supported social login or use email for passwordless access.</p> <ul> <li>Google</li> <li>GitHub</li> <li>Twitch</li> <li>Discord</li> </ul>"},{"location":"setup/config-auth/register-app/#steps","title":"Steps","text":""},{"location":"setup/config-auth/register-app/#1-dashboard-login","title":"1. Dashboard Login","text":"<p>Use https://dashboard.arcana.network to log in with one of the available options.</p> Developer Dashboard Login Page <p>Aggregate Login</p> <p>The aggregate login feature in the Arcana Auth SDK merges login identities from social providers into one Arcana account if the email ID is the same across these providers. Developers can log into the Arcana Developer Dashboard using any supported provider and still access the same Arcana account and app settings. </p>"},{"location":"setup/config-auth/register-app/#2-create-a-new-app","title":"2. Create a New App","text":"<p>After logging into the dashboard, the Manage Apps screen is displayed. It contains one app card per registered app. The app card contains a summary of app usage statistics and buttons to view and edit the configuration profiles for Testnet and Mainnet settings.</p> Manage Apps <p>To register the app, create a new app entry by clicking on the Create New App wizard.</p> Register by Creating New App <p>Provide the following inputs to register the app:</p> <ul> <li>App name</li> <li>Chain Type: EVM, Solana, MultiversX, Near</li> <li>Default Blockchain</li> <li>Wallet UI Mode</li> </ul> App NameChain TypeDefault ChainWallet UI Mode <p>Add a unique name for the app. It can be edited later. After registration, a unique Client ID is associated with each app name. This Client ID does not change if the app name is edited later.</p> <p>All emails related to a registered app billing or user login will mention the latest app name as displayed in the dashboard. Once an app is deleted, the Client ID is no longer valid. Creating a new app with the same name and registering it with Arcana will result in a new Client ID associated with the app.</p> <p>Edit App Name</p> <p>Click on the pen icon next to the app name. Click Enter in the editable text field to save the changes.</p> <p>During registration, developers must choose between EVM chains or non-EVM chains supported by the app. The pre-configured chain list in the Arcana wallet will display only the configured chains.</p> <p>Non-EVM Chains</p> <p>When registering an app through Arcana Developer Dashboard, the choice of chain type (EVM, Solana, MultiversX, Near) is final. App developers can't change it later.  They can switch the default chain within the same type. For example, a Solana app on Testnet can switch to Solana Mainnet or Solana Dev but not to MultiversX or an EVM chain.</p> <p>Based on your chain type selection, you will see a list of supported chains. Choose one as the default. This default chain will appear as the current, active chain in the Arcana wallet when the user logs into the app integrated with the Arcana Auth SDK.</p> <p>The wallet UI mode setting allows the developers to choose whether they want to use the default, built-in Arcana wallet UI or build a custom wallet UI for the app users. </p> One Time Setting <p>The Custom Wallet UI option selected during app registration is a one-time setting. Once selected, the app cannot use the built-in Arcana wallet UI at all. Developers must create a custom wallet UI and plug in the requisite Web3 wallet operations.</p> Global Keyspace Not Supported <p>If the Custom Wallet UI option is selected during app registration, the app is assigned app-specific keys by default. The app configuration does not have the option to configure global keyspace.</p> View Wallet UI Mode <p>Once specified during app-registration, the Wallet UI mode setting can be viewed later via the Configure &gt; Arcana Wallet settings section in the app configuration profile. </p> <p> Wallet UI Mode Setting </p> <p>After providing all the required inputs, click Create to register the app.</p> Register dApp <p>The app is registered, and a unique Client ID is assigned. By default, every newly registered app is associated with a Testnet configuration profile. </p> New App Dashboard Save Client ID <p>Each registered app is assigned a unique Client ID. It is displayed on the top right of the dashboard screen. It is required during Web3 app integration with the  Arcana </p> <p> Arcana Client ID for Registered App  </p> <p>The Testnet Client ID differs from the Mainnet Client ID.</p>"},{"location":"setup/config-auth/register-app/#whats-next","title":"What's next?","text":"<p>After registering the app,  configure the user onboarding settings and integrate the app to onboard users and allow them to sign blockchain transactions via the Arcana wallet.</p>"},{"location":"setup/config-auth/register-app/#see-also","title":"See Also","text":"<ul> <li>Deleting Application Entry</li> <li>Managing Testnet and Mainnet Configurations</li> <li>Arcana Auth SDK Usage Guide</li> <li> FAQ</li> </ul> <p>Try Demo App </p>"},{"location":"setup/config-idm/","title":"IAM Providers Setup","text":"<p> Cognito   Firebase </p> Apps using IAM Providers <p>Apps usually use Arcana Auth SDK for user onboarding and blockchain transaction signing. Authentication providers must be set up in the Arcana Developer Dashboard before integrating with the SDK.</p> <p>Some apps might use third-party IAM providers like AWS Cognito for authentication but still use Arcana Auth SDK to access Arcana wallet. The setup is different since third-party IAM providers support authentication verifiers like Google directly.</p> <p>Developers only need to set up the IAM provider in the Arcana Developer Dashboard. They don't need to configure authentication verifiers that work directly with the IAM providers. Use the IAM provider's console, like Cognito Developer Console, to set up authentication verifiers like Google, not the Arcana Developer Dashboard.   </p>"},{"location":"setup/config-idm/cognito-oauth/","title":"Setup Cognito","text":"<p>Configuring Cognito for apps using global keys differs from apps using app-specific keys.</p>"},{"location":"setup/config-idm/cognito-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Log in to the Arcana Developer Dashboard: https://dashboard.arcana.network </p> </li> <li> <p>Register the app by creating a new app entry in the dashboard. </p> </li> </ul> <p>Client ID</p> <p>A default Testnet configuration profile is associated with every registered app. A unique Client ID is assigned for the Testnet profile. Only passwordless login is enabled by default.</p> <p>A newly registered app can be deployed at the Arcana Testnet. Developers must create a Mainnet configuration profile to deploy it on the Mainnet. A new, unique Client ID is assigned to the Mainnet profile. </p> <p> Unique App Identifier: ClientID </p>"},{"location":"setup/config-idm/cognito-oauth/#global-keys","title":"Global Keys","text":"<p>Apps that require global keys feature do not need to configure the Social Auth settings in the Arcana Developer Dashboard.</p> <p>User onboarding via Cognito is automatically turned on for the app when global keys are enabled.</p> Global Keys Setting <p>Global Keys Configuration Change</p> <p>In the earlier versions of the Arcana Auth SDK, apps using global keys were required to configure Social Auth settings for the providers. This behavior has changed in the latest release of the Arcana Auth SDK. </p> <p>If an app was configured for any social login providers and switches over from app-specific to global keyspace later, the Social Auth settings will be disabled altogether.</p> <p> Global Keys: Social Auth Settings Disabled </p>"},{"location":"setup/config-idm/cognito-oauth/#app-specific-keys","title":"App-specific Keys","text":"<p>Follow these steps to configure the Social Auth settings and enable user onboarding via Cognito. It requires developers to use the Arcana Developer Dashboard and the AWS Management Console.</p>"},{"location":"setup/config-idm/cognito-oauth/#1-get-redirect-uri","title":"1. Get Redirect URI","text":"<p>Select the app in the Manage Apps dashboard screen and click Testnet/Mainnet to configure Cognito in the respective configuration profile. Go to Configure &gt; Social Auth. Copy the redirect URI shown on the top right.</p> Get Redirect URI <p>Do not close the Social Auth browser tab in the Arcana Developer Dashboard.Open another tab and set up AWS Cognito OAuth. </p>"},{"location":"setup/config-idm/cognito-oauth/#2-aws-management-console","title":"2. AWS Management Console","text":"<p>Go to the AWS Management Console and register your app as a new Cognito client application. Log in to the console, search for 'Cognito' and you will see the Cognito setup dashboard. Use the Cognito setup dashboard to add the app as a Cognito client in the context of a Cognito 'User Pool'. If a Cognito 'User Pool' is not already set up, create a new User Pool first as highlighted in the figure below. </p> <p>Cognito Sign-in Options</p> <p>Email ID must be selected as one of the Cognito sign-in options. </p> AWS Management Console <p>If a user pool is already set up, select it from the list and double-click on it to see the details. Refer to the App Integration tab settings and click Create App Client on the bottom right of the page.</p> Create Cognito App Client <p>You will see the Create Client dashboard screen. You need to specify the following settings for your app and update the requisite fields in the console:</p> <ul> <li>App Type: Public Client</li> <li>App Client Name: Enter the app name</li> <li>Client Secret: Select the 'Do not generate client secret' option</li> <li>Authentication Flows: Select ALLOW_REFRESH_TOKEN_AUTH</li> </ul> <p>Next, scroll down to the Hosted UI section and refer to the Allowed Callback URLs field. In this field, add the Redirect URI copied from the Arcana Developer Dashboard in the previous step.</p> Update Allowed Callback URLs <p>Make sure you add Cognito User Pool in the Identity Provider section of the settings as shown in the figure above. Save the Cognito User Pool Domain value as it will be required along with the Client ID in the next step.</p> <p>For the OAuth 2.0 Grant Type setting, make sure you specify Authorization Code Grant and Implicit Grant values as shown in the figure below:</p> Cognito OAuth2.0 Grant Type <p>In the Custom Scope section, ensure that the attribute EmailID has read access. This is used by Arcana Auth SDK to enable the aggregate login feature.</p> <p>Save the new client app settings. You will see the new client app entry in the user pool page under the App Client List section.</p> Client App List <p>Copy the ClientID that is automatically generated by Cognito for the newly registered Client App. Also save the Cognito User Pool Domain value displayed in the dashboard. It will be required in the next step while completing the app configuration using the Arcana Developer Dashboard.</p>"},{"location":"setup/config-idm/cognito-oauth/#3-update-social-auth","title":"3. Update Social Auth","text":"<p>In the Arcana Developer Dashboard, click Configure &gt; Social Auth. Refer to the empty fields next to the \"Cognito\" setting. Paste the Client ID and the Cognito User Pool Domain saved from the AWS Management Console in the previous step.</p> Dashboard: Update Cognito ClientID <p>Save the Social Auth settings. </p> <p>You are all set with the Cognito configuration.</p>"},{"location":"setup/config-idm/firebase-auth/","title":"Setup Firebase","text":"<p>Configuring Firebase for apps using global keys differs from apps using app-specific keys.</p>"},{"location":"setup/config-idm/firebase-auth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Log in to the Arcana Developer Dashboard: https://dashboard.arcana.network </p> </li> <li> <p>Register the app by creating a new app entry in the dashboard. </p> </li> </ul> <p>Client ID</p> <p>A default Testnet configuration profile is associated with every registered app. A unique Client ID is assigned for the Testnet profile. Only passwordless login is enabled by default.</p> <p>A newly registered app can be deployed at the Arcana Testnet. Developers must create a Mainnet configuration profile to deploy it on the Mainnet. A new, unique Client ID is assigned to the Mainnet profile. </p> <p> Unique App Identifier: ClientID </p>"},{"location":"setup/config-idm/firebase-auth/#global-keys","title":"Global Keys","text":"<p>Apps that require global keys feature do not need to configure the Social Auth settings in the Arcana Developer Dashboard.</p> <p>User onboarding via Firebase is automatically turned on for the app when global keys are enabled.</p> Global Keys Setting <p>Global Keys Configuration Change</p> <p>In the earlier versions of the Arcana Auth SDK, apps using global keys were required to configure Social Auth settings for the providers. This behavior has changed in the latest release of the Arcana Auth SDK. </p> <p>If an app was configured for any social login providers and switches over from app-specific to global keyspace later, the Social Auth settings will be disabled altogether.</p> <p> Global Keys: Social Auth Settings Disabled </p>"},{"location":"setup/config-idm/firebase-auth/#app-specific-keys","title":"App-specific Keys","text":"<p>Follow these steps to configure the Social Auth settings and enable user onboarding via Firebase. It requires developers to use the Arcana Developer Dashboard and the Firebase Console.</p>"},{"location":"setup/config-idm/firebase-auth/#1-get-firebase-project-id","title":"1. Get Firebase Project ID","text":"<p>Go to the Firebase Console, and create a new project for the app that requires enabling Firebase login.</p> Add Firebase Project <p>Note the Project ID that is automatically generated by Firebase for the newly created project. It will be required in the next step while completing the app configuration using the Arcana Developer Dashboard.</p> <p>After creating a Firebase project, register the app with Firebase. For example, to register a web app, in the center of the Firebase console's project overview page, click the Web icon to launch the web app registration workflow. </p> Register Firebase App <p>Follow the on-screen instructions to add and initialize the Firebase SDK in your app.</p> Set up Firebase SDK <p>You will be required to access the Firebase services such as authentication in your app. That requires you to install and configure the Firebase SDK before integrating the app with the Arcana Auth SDK.</p>"},{"location":"setup/config-idm/firebase-auth/#2-update-social-auth","title":"2. Update Social Auth","text":"<p>Go to the Arcana Developer Dashboard. Click Configure &gt; Social Auth and refer to the Identity Access Managers section. Click Firebase. Paste the Project ID assigned by Firebase Console in the 'Project ID' field.</p> Update Firebase Project ID <p>Save the Social Auth settings. </p> <p>You are all set with the Firebase configuration.</p> <p>Plug-and-play login feature not supported for Firebase</p> <p>The plug and play feature of the Arcana Auth SDK does not support social login via Firebase. Developers must build a custom login UI and add code to onboard users. For details, see onboarding users via Firebase and custom login UI</p>"},{"location":"setup/config-social/apple-oauth/","title":"Apple Sign-In Setup","text":"<p>Configuring Apple for apps using global keys differs from apps using app-specific keys.</p>"},{"location":"setup/config-social/apple-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Log in to the Arcana Developer Dashboard: https://dashboard.arcana.network </p> </li> <li> <p>Register the app by creating a new app entry in the dashboard. </p> </li> </ul> <p>Client ID</p> <p>A default Testnet configuration profile is associated with every registered app. A unique Client ID is assigned for the Testnet profile. Only passwordless login is enabled by default.</p> <p>A newly registered app can be deployed at the Arcana Testnet. Developers must create a Mainnet configuration profile to deploy it on the Mainnet. A new, unique Client ID is assigned to the Mainnet profile. </p> <p> Unique App Identifier: ClientID </p>"},{"location":"setup/config-social/apple-oauth/#global-keys","title":"Global Keys","text":"<p>Apps that require global keys feature do not need to configure the Social Auth settings in the Arcana Developer Dashboard.</p> <p>User onboarding via Apple is automatically turned on for the app when global keys are enabled.</p> Global Keys Setting <p>Global Keys Configuration Change</p> <p>In the earlier versions of the Arcana Auth SDK, apps using global keys were required to configure Social Auth settings for the providers. This behavior has changed in the latest release of the Arcana Auth SDK. </p> <p>If an app was configured for any social login providers and switches over from app-specific to global keyspace later, the Social Auth settings will be disabled altogether.</p> <p> Global Keys: Social Auth Settings Disabled </p>"},{"location":"setup/config-social/apple-oauth/#app-specific-keys","title":"App-specific Keys","text":"<p>Follow these steps to configure the Social Auth settings and enable user onboarding via Apple. It requires developers to use the Arcana Developer Dashboard and the Apple Developer website.</p>"},{"location":"setup/config-social/apple-oauth/#1-get-redirect-uri","title":"1. Get Redirect URI","text":"<p>Select the app in the Manage Apps dashboard screen and click Testnet/Mainnet to configure Apple Sign-in in the respective configuration profile. Go to Configure &gt; Social Auth. Copy the redirect URI shown on the top right.</p> <p>Redirect URL for Apple Sign-In</p> <p>Note, unlike other providers, the redirect URL for 'Sign-in with Apple' is not the one located on the top right of the dashboard. It is displayed on the bottom-right, next to the 'key id' field.</p> <p>The Redirect URL* for Apple Sign-In is of the format:</p> <p><code>https://oauth.arcana.network/auth/apple/redirect/${ClientID}</code></p> <p>Where <code>{ClientID}</code> refers to the unique value assigned by Arcana to each app registered using the Arcana Developer Dashboard. </p> Arcana Dashboard: Copy Redirect URL <p>Do not close the Social Auth browser tab in the Arcana Developer Dashboard. Open another tab and set up Apple Sign in for your app via the Apple Developer website. </p>"},{"location":"setup/config-social/apple-oauth/#2-get-apple-clientid-teamid-key-keyid","title":"2. Get Apple ClientID, TeamID, Key, KeyID","text":"<p>To enable Apple Sign-In for your Web3 app you must set up the following entities:</p> <ul> <li>Apple App Identifier</li> <li>Apple Service Identifier</li> <li>Apple Private Key</li> </ul> <p>Login to your developer account using the Apple Developer website. </p> Apple Dev: Log In <p>Use the 'Certificates, Identifiers &amp; Profiles' menu option. Create, configure and register the Apple app identifier, Apple service identifier. As part of configuration you will be required to verify your app domain, and associate the domain with an app identifier for app login page that uses 'Sign in with Apple'.</p>"},{"location":"setup/config-social/apple-oauth/#2a-app-id","title":"2a. App Id","text":"<p>Click Identifier, select AppId type identifier and choose App. </p> Apple Dev: New App Identifier  <p>Click continue and follow the instructions to configure the AppId identifier setting and enable 'Sign-In with Apple' option. Register the AppId identifier.</p> Apple Dev: Enable Sign-In with Apple (AppId)"},{"location":"setup/config-social/apple-oauth/#2b-service-id","title":"2b. Service Id","text":"<p>Next, click Identifier, select ServiceId type identifier.</p> Apple Dev: New Service Identifier  <p>Follow the instructions and specify the service description and identifier in the Apple Developer site. Make sure you enable the 'Sign-In with Apple' option. Register the Service identifier. </p> Apple Dev: Enable Sign-In with Apple (ServiceId) <p>In the Service Identifier settings, specify the Redirect URI copied from the Arcana Developer Dashboard into the Return URL input field.</p> Apple Dev: Return URL (Use Arcana Redirect URI) <p>Apple may have additional instructions to verify the domain name that you specify. Make sure you complete those setup steps at the Apple Developer site and complete the service identifier setup.</p>"},{"location":"setup/config-social/apple-oauth/#2c-apple-key","title":"2c. Apple Key","text":"<p>The 'Sign-in with Apple' service requires a private key that signs JWTs to be used as a client secret. Go to the Keys section in the Apple Developer Account site. Create a key and follow the instructions to register the key. </p> Apple Dev: New Key <p>Make sure you configure the key and enable 'Sign In with Apple' option. </p> Apple Dev: Enable Apple Sign-In (Key) <p>Also, configure the key to use the correct AppId that was created earlier.</p> Apple Dev: Select correct AppId for the key <p>Download the key. It can only be downloaded once. </p> <p>Apple Key Security</p> <p>Keep the downloaded Apple Key safe. </p> <p>If you lose the key, you cannot download it again but the Apple Key identifier can be copied from the developer account any time. </p> <p>If you suspect a private key is compromised, first create a new private key associated with the primary App ID. After transitioning to the new key, revoke the old private key. Learn more...</p> <p>Make a note of the following values. These are required to configure the Apple section in the 'Social Auth' settings page of the Arcana Developer Dashboard.</p> <ul> <li>Apple Service Identifier</li> <li>Apple Team Identifier</li> <li>Apple Private Key Identifier</li> <li>Apple Private Key</li> </ul> Apple Dev: Service Identifier Apple Dev: Key Identifier, Team Identifier"},{"location":"setup/config-social/apple-oauth/#3-update-social-auth","title":"3. Update Social Auth","text":"<p>In the Arcana Developer Dashboard, click Configure &gt; Social Auth. Refer to the empty fields next to the \"Apple\" setting. Paste the Service ID obtained via the Apple Developer Account settings. Copy the Team Identifier, Key Identifier and the downloaded key value in the respective input fields.</p> Update Apple Sign-In Settings <p>Save the Social Auth settings.</p> <p>Your app is all set to onboard users via Apple Sign-In.</p>"},{"location":"setup/config-social/discord-oauth/","title":"Setup Discord","text":"<p>Configuring Discord for apps using global keys differs from apps using app-specific keys.</p>"},{"location":"setup/config-social/discord-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Log in to the Arcana Developer Dashboard: https://dashboard.arcana.network </p> </li> <li> <p>Register the app by creating a new app entry in the dashboard. </p> </li> </ul> <p>Client ID</p> <p>A default Testnet configuration profile is associated with every registered app. A unique Client ID is assigned for the Testnet profile. Only passwordless login is enabled by default.</p> <p>A newly registered app can be deployed at the Arcana Testnet. Developers must create a Mainnet configuration profile to deploy it on the Mainnet. A new, unique Client ID is assigned to the Mainnet profile. </p> <p> Unique App Identifier: ClientID </p>"},{"location":"setup/config-social/discord-oauth/#global-keys","title":"Global Keys","text":"<p>Apps that require global keys feature do not need to configure the Social Auth settings in the Arcana Developer Dashboard.</p> <p>User onboarding via Discord is automatically turned on for the app when global keys are enabled.</p> Global Keys Setting <p>Global Keys Configuration Change</p> <p>In the earlier versions of the Arcana Auth SDK, apps using global keys were required to configure Social Auth settings for the providers. This behavior has changed in the latest release of the Arcana Auth SDK. </p> <p>If an app was configured for any social login providers and switches over from app-specific to global keyspace later, the Social Auth settings will be disabled altogether.</p> <p> Global Keys: Social Auth Settings Disabled </p>"},{"location":"setup/config-social/discord-oauth/#app-specific-keys","title":"App-specific Keys","text":"<p>Follow these steps to configure the Social Auth settings and enable user onboarding via Discord. It requires developers to use the Arcana Developer Dashboard and the Discord Developer Portal.</p>"},{"location":"setup/config-social/discord-oauth/#1-get-redirect-uri","title":"1. Get Redirect URI","text":"<p>Select the app in the Manage Apps dashboard screen and click Testnet/Mainnet to configure Discord in the respective configuration profile. Go to Configure &gt; Social Auth. Copy the redirect URI shown on the top right.</p> Get Redirect URI <p>Do not close the Social Auth browser tab in the Arcana Developer Dashboard. Open another tab to access the Discord Developer Console and configure Discord OAuth.</p>"},{"location":"setup/config-social/discord-oauth/#2-get-discord-application-id-public-key","title":"2. Get Discord Application ID, Public Key","text":"<p>Go to the Discord Developer Portal and create a new application.</p> Discord Developer Portal <p>Configure OAuth 2.0 credentials for the newly created app entry in the Discord Developer Portal. Select OAuth2 in the Discord Developer Portal and refer to the Redirects field. Use the Redirect URI value copied in the previous step from the  Arcana Developer Dashboard.</p> Discord OAuth Settings <p>Save the app settings in the Discord Developer Portal. </p> <p>Refer to the General Information page in the Discord Developer Portal. Copy the Application ID and the Public key. It will be required in the next step while configuring Discord settings using the  Arcana Developer Dashboard. </p> Copy Application ID and Public Key"},{"location":"setup/config-social/discord-oauth/#3-update-social-auth","title":"3. Update Social Auth","text":"<p>In the Arcana Developer Dashboard, click Configure &gt; Social Auth &gt; Discord. Paste the Application ID and Public key obtained from Discord Developer Portal in the previous step.</p> Dashboard: Update Application ID and Public Key <p>Save the Social Auth settings. </p> <p>You are all set with the Discord configuration.</p>"},{"location":"setup/config-social/github-oauth/","title":"GitHub Setup","text":"<p>Configuring GitHub for apps using global keys differs from apps using app-specific keys.</p>"},{"location":"setup/config-social/github-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Log in to the Arcana Developer Dashboard: https://dashboard.arcana.network </p> </li> <li> <p>Register the app by creating a new app entry in the dashboard. </p> </li> </ul> <p>Client ID</p> <p>A default Testnet configuration profile is associated with every registered app. A unique Client ID is assigned for the Testnet profile. Only passwordless login is enabled by default.</p> <p>A newly registered app can be deployed at the Arcana Testnet. Developers must create a Mainnet configuration profile to deploy it on the Mainnet. A new, unique Client ID is assigned to the Mainnet profile. </p> <p> Unique App Identifier: ClientID </p>"},{"location":"setup/config-social/github-oauth/#global-keys","title":"Global Keys","text":"<p>Apps that require global keys feature do not need to configure the Social Auth settings in the Arcana Developer Dashboard.</p> <p>User onboarding via GitHub is automatically turned on for the app when global keys are enabled.</p> Global Keys Setting <p>Global Keys Configuration Change</p> <p>In the earlier versions of the Arcana Auth SDK, apps using global keys were required to configure Social Auth settings for the providers. This behavior has changed in the latest release of the Arcana Auth SDK. </p> <p>If an app was configured for any social login providers and switches over from app-specific to global keyspace later, the Social Auth settings will be disabled altogether.</p> <p> Global Keys: Social Auth Settings Disabled </p>"},{"location":"setup/config-social/github-oauth/#app-specific-keys","title":"App-specific Keys","text":"<p>Follow these steps to configure the Social Auth settings and enable user onboarding via GitHub. It requires developers to use the Arcana Developer Dashboard and the GitHub Developer Settings Dashboard.</p>"},{"location":"setup/config-social/github-oauth/#1-get-redirect-uri","title":"1. Get Redirect URI","text":"<p>Select the app in the Manage Apps dashboard screen and click Testnet/Mainnet to configure GitHub in the respective configuration profile Go to Configure &gt; Social Auth. Copy the redirect URI shown on the top right.</p> Copy Redirect URI <p>Do not close the Arcana Developer Dashboard browser tab. Open another tab and set up GitHub OAuth.</p>"},{"location":"setup/config-social/github-oauth/#2-get-github-clientid-secret","title":"2. Get GitHub ClientID, Secret","text":"<p>Go to the GitHub Developer Settings &gt; OAuth Apps and register the app as a new GitHub application.</p> GitHub OAuth Settings <ul> <li>Enter the app name.</li> <li>Specify the homepage URL where the app is deployed.</li> <li>Provide a brief description of the dApp.</li> </ul> GitHub Configuration <p>Use the redirect URI value that you saved in the previous step from the <code>Auth</code> tab of the Arcana Developer Dashboardd, in the Authorization callback URL field. See here for GitHub OAuth details.</p> <p>Save the newly registered application in GitHub Developer Settings. GitHub will generate a unique ClientID and a secret for this new application entry.</p> Get GitHub OAuth ClientID <p>Copy and save the Client ID and the secret assigned by GitHub for the newly registered app. It will be required in the next step while completing the Arcana Developer Dashboard app configuration.</p> <p>GitHub Email Settings</p> <p>Make sure your GitHub developer profile email settings are NOT private. If it is marked private then the social login and the aggregate login features offered by the Arcana Auth SDK will not work due to configuration issues.</p> <ol> <li>In your GitHub profile setting, allow your email to be visible</li> <li>In the GitHub Email Settings preferences, make sure you do not select the checkbox which says 'Keep my email address private'.</li> </ol> <p>Refer to the figure below for details:</p> <p> GitHub Profile: Email Visible </p> <p> GitHub Email Settings: Should Not be Private"},{"location":"setup/config-social/github-oauth/#3-update-social-auth","title":"3. Update Social Auth","text":"<p>Revisit the Arcana Developer Dashboard. View the app configuration screen. Click Configure &gt; Social Auth in the LHS navigation bar and refer to the \"GitHub\" field. Paste the Client ID and the Secret assigned by GitHub, in the previous step.</p> <p>In the Arcana Developer Dashboard, click Configure &gt; Social Auth. Refer to the empty fields next to the \"GitHub\" setting. Paste the ClientID and Secret obtained in the previous step as the <code>ClientID</code> and <code>secret</code>, respectively. </p> Update GitHub ClientID <p>Save the Social Auth settings. </p> <p>You are all set with the GitHub configuration.</p>"},{"location":"setup/config-social/google-oauth/","title":"Google Setup","text":"<p>Configuring Google for apps using global keys differs from apps using app-specific keys.</p>"},{"location":"setup/config-social/google-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Log in to the Arcana Developer Dashboard: https://dashboard.arcana.network </p> </li> <li> <p>Register the app by creating a new app entry in the dashboard. </p> </li> </ul> <p>Client ID</p> <p>A default Testnet configuration profile is associated with every registered app. A unique Client ID is assigned for the Testnet profile. Only passwordless login is enabled by default.</p> <p>A newly registered app can be deployed at the Arcana Testnet. Developers must create a Mainnet configuration profile to deploy it on the Mainnet. A new, unique Client ID is assigned to the Mainnet profile. </p> <p> Unique App Identifier: ClientID </p>"},{"location":"setup/config-social/google-oauth/#global-keys","title":"Global Keys","text":"<p>Apps that require global keys feature do not need to configure the Social Auth settings in the Arcana Developer Dashboard.</p> <p>User onboarding via Google is automatically turned on for the app when global keys are enabled.</p> Global Keys Setting <p>Global Keys Configuration Change</p> <p>In the earlier versions of the Arcana Auth SDK, apps using global keys were required to configure Social Auth settings for the providers. This behavior has changed in the latest release of the Arcana Auth SDK. </p> <p>If an app was configured for any social login providers and switches over from app-specific to global keyspace later, the Social Auth settings will be disabled altogether.</p> <p> Global Keys: Social Auth Settings Disabled </p>"},{"location":"setup/config-social/google-oauth/#app-specific-keys","title":"App-specific Keys","text":"<p>Follow these steps to configure the Social Auth settings and enable user onboarding via Google. It requires developers to use the Arcana Developer Dashboard and the Google Cloud Console.</p>"},{"location":"setup/config-social/google-oauth/#1-get-redirect-uri","title":"1. Get Redirect URI","text":"<p>Select the app in the Manage Apps dashboard screen and click Testnet/Mainnet to configure Google in the respective configuration profile. Go to Configure &gt; Social Auth. Copy the redirect URI shown on the top right.</p> Copy Redirect URI <p>Do not close the Social Auth browser tab in the Arcana Developer Dashboard. Open another tab to access the Google Cloud Console and configure Google OAuth. </p>"},{"location":"setup/config-social/google-oauth/#2-get-google-clientid","title":"2. Get Google ClientID","text":"<p>Go to the Google Cloud Console. Create a new OAuth 2.0 credential for your dApp.</p> Set up Google OAuth 2.0 <p>In the Google Cloud Console, select the option to set up credentials for a web application. </p> Specify Redirect URI <p>Specify the redirect URI value to the one that you saved in the previous step from the <code>Auth</code> tab of the Arcana Developer Dashboard. </p> <p>Redirect URI</p> <p>The redirect URI refers to the endpoint to which the Google OAuth 2.0 server can send authentication responses. These endpoints must adhere to Google\u2019s validation rules.</p> <p>Complete the steps in Google Cloud Console for creating a new OAuth 2.0 credential. It will generate a unique ClientID.</p> Copy Google ClientID <p>Save the Client ID assigned by Google. It will be required in the next step.</p>"},{"location":"setup/config-social/google-oauth/#3-update-social-auth","title":"3. Update Social Auth","text":"<p>In the Arcana Developer Dashboard, click Configure &gt; Social Auth. Refer to the empty fields next to the \"Google\" setting. Paste the Google Client ID copied in the previous step. </p> Specify Google ClientID <p>Save the Social Auth settings. </p> <p>You are all set with the Google configuration.</p>"},{"location":"setup/config-social/steam-oauth/","title":"Steam Setup","text":"<p>Configuring Steam for apps using global keys differs from apps using app-specific keys.</p>"},{"location":"setup/config-social/steam-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Log in to the Arcana Developer Dashboard: https://dashboard.arcana.network </p> </li> <li> <p>Register the app by creating a new app entry in the dashboard. </p> </li> </ul> <p>Client ID</p> <p>A default Testnet configuration profile is associated with every registered app. A unique Client ID is assigned for the Testnet profile. Only passwordless login is enabled by default.</p> <p>A newly registered app can be deployed at the Arcana Testnet. Developers must create a Mainnet configuration profile to deploy it on the Mainnet. A new, unique Client ID is assigned to the Mainnet profile. </p> <p> Unique App Identifier: ClientID </p>"},{"location":"setup/config-social/steam-oauth/#global-keys","title":"Global Keys","text":"<p>Apps that require global keys feature do not need to configure the Social Auth settings in the Arcana Developer Dashboard.</p> <p>User onboarding via Steam is automatically turned on for the app when global keys are enabled.</p> Global Keys Setting <p>Global Keys Configuration Change</p> <p>In the earlier versions of the Arcana Auth SDK, apps using global keys were required to configure Social Auth settings for the providers. This behavior has changed in the latest release of the Arcana Auth SDK. </p> <p>If an app was configured for any social login providers and switches over from app-specific to global keyspace later, the Social Auth settings will be disabled altogether.</p> <p> Global Keys: Social Auth Settings Disabled </p>"},{"location":"setup/config-social/steam-oauth/#app-specific-keys","title":"App-specific Keys","text":"<p>Follow these steps to configure the Social Auth settings and enable user onboarding via Steam. It requires developers to use the Arcana Developer Dashboard and the Steam Community Site.</p>"},{"location":"setup/config-social/steam-oauth/#step-1-get-redirect-uri","title":"Step 1: Get Redirect URI","text":"<p>Select the app in the Manage Apps dashboard screen and click Testnet/Mainnet to configure Steam in the respective configuration profile. Go to Configure &gt; Social Auth. Copy the redirect URI shown on the top right.</p> Copy the Redirect URI <p>Do not close the Social Auth browser tab in the Arcana Developer Dashboard. Open another tab to access the Steam Community Site and obtain an API Key.</p>"},{"location":"setup/config-social/steam-oauth/#step-2-get-steam-api-key","title":"Step 2: Get Steam API Key","text":"<p>Steam API Key</p> <p>Developers must have a Steam account and have at least $5 worth of purchased games in the account before they can obtain the Steam API Key. </p> <p>Go to the Steam Community Site. Login to your account. </p> Steam Login <p>Access Steam API Key</p> <p>Make sure you do not have a Steam limited account otherwise you cannot access the API Key. Refer to Steam FAQ for more details. </p> <p>Register for a new Steam Web API Key. Provide the app domain name as input to access your API Key.</p> Access Steam API Key <p>Copy the Steam API Key for your app domain. It will be required in the next step while completing the app configuration using the Arcana Developer Dashboard.</p> Copy Steam API Key"},{"location":"setup/config-social/steam-oauth/#step-3-update-steam-social-auth-settings","title":"Step 3: Update Steam Social Auth Settings","text":"<p>In the Arcana Developer Dashboard, click Configure &gt; Social Auth. Refer to the Steam API Key input field. Paste the Steam API Key obtained in the previous step.</p> Dashboard: Update Steam API Key <p>Save the Social Auth settings. </p> <p>You are all set with the Steam configuration.</p>"},{"location":"setup/config-social/telegram-oauth/","title":"Telegram Setup","text":"<p>These are the configuration instructions to onboard users in Web3 apps via Telegram.</p> Only App-Specific Keys <p>Global Keys option is not supported for apps that use Telegram as the social login provider.</p>"},{"location":"setup/config-social/telegram-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Log in to the Arcana Developer Dashboard: https://dashboard.arcana.network </p> </li> <li> <p>Register the app by creating a new app entry in the dashboard. </p> </li> </ul> <p>Client ID</p> <p>A default Testnet configuration profile is associated with every registered app. A unique Client ID is assigned for the Testnet profile. Only passwordless login is enabled by default.</p> <p>A newly registered app can be deployed at the Arcana Testnet. Developers must create a Mainnet configuration profile to deploy it on the Mainnet. A new, unique Client ID is assigned to the Mainnet profile. </p> <p> Unique App Identifier: ClientID </p>"},{"location":"setup/config-social/telegram-oauth/#app-specific-keys","title":"App-specific Keys","text":"<p>Follow these steps to configure the Social Auth settings and enable user onboarding via Telegram. It requires developers to use the Arcana Developer Dashboard and the Telegram BotFather.</p>"},{"location":"setup/config-social/telegram-oauth/#1-get-telegram-bot-token","title":"1. Get Telegram Bot Token","text":"<p>Use Telegram app, go to Telegram BotFather. Use <code>/newbot</code> to create a bot corresponding to the Web3 app that you wish to integrate with the Arcana Auth SDK. Ignore bot creation if you already have one. Go to your Bot by selecting <code>/mybots</code>.</p> <p>Use <code>/token</code> command to generate Telegram token for the selected bot. This token is used to access the HTTP API. Keep your token secure and store it safely, it can be used by anyone to control your bot.</p> Add Bot Token <p>Note the token value, it will be required in the next step while completing the app configuration using the Arcana Developer Dashboard.</p> <p>Link App Domain to Bot</p> <p>Once you have chosen a bot, send the <code>/setdomain</code> command to @Botfather to link your website's domain to the bot. This is required for successful redirect to your app after the user logs in via Telegram. Learn more...</p> Link App Domain"},{"location":"setup/config-social/telegram-oauth/#2-update-social-auth","title":"2. Update Social Auth","text":"<p>Go to the Arcana Developer Dashboard. Click Configure &gt; Social Auth and select Telegram icon to update settings. Paste the Token assigned by @BotFather in the 'Bot Token field.</p> Add Telegram Bot Token <p>Save the Social Auth settings. </p> <p>You are all set with the Telegram configuration.</p> <p>Plug-and-play login feature not supported for Telegram</p> <p>The plug and play feature of the Arcana Auth SDK does not support social login via Telegram. Developers must build a custom login UI and add code to onboard users. For details, see onboarding users via Telegram and custom login UI.</p>"},{"location":"setup/config-social/twitch-oauth/","title":"Twitch Setup","text":"<p>Configuring Twitch for apps using global keys differs from apps using app-specific keys.</p>"},{"location":"setup/config-social/twitch-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Log in to the Arcana Developer Dashboard: https://dashboard.arcana.network </p> </li> <li> <p>Register the app by creating a new app entry in the dashboard. </p> </li> </ul> <p>Client ID</p> <p>A default Testnet configuration profile is associated with every registered app. A unique Client ID is assigned for the Testnet profile. Only passwordless login is enabled by default.</p> <p>A newly registered app can be deployed at the Arcana Testnet. Developers must create a Mainnet configuration profile to deploy it on the Mainnet. A new, unique Client ID is assigned to the Mainnet profile. </p> <p> Unique App Identifier: ClientID </p>"},{"location":"setup/config-social/twitch-oauth/#global-keys","title":"Global Keys","text":"<p>Apps that require global keys feature do not need to configure the Social Auth settings in the Arcana Developer Dashboard.</p> <p>User onboarding via Twitch is automatically turned on for the app when global keys are enabled.</p> Global Keys Setting <p>Global Keys Configuration Change</p> <p>In the earlier versions of the Arcana Auth SDK, apps using global keys were required to configure Social Auth settings for the providers. This behavior has changed in the latest release of the Arcana Auth SDK. </p> <p>If an app was configured for any social login providers and switches over from app-specific to global keyspace later, the Social Auth settings will be disabled altogether.</p> <p> Global Keys: Social Auth Settings Disabled </p>"},{"location":"setup/config-social/twitch-oauth/#app-specific-keys","title":"App-specific Keys","text":"<p>Follow these steps to configure the Social Auth settings and enable user onboarding via Twitch. It requires developers to use the Arcana Developer Dashboard and the Twitch Developer Dashboard.</p>"},{"location":"setup/config-social/twitch-oauth/#1-get-redirect-uri","title":"1. Get Redirect URI","text":"<p>Select the app in the Manage Apps dashboard screen and click Testnet/Mainnet to configure Twitch in the respective configuration profile. Go to Configure &gt; Social Auth. Copy the redirect URI shown on the top right.</p> Copy Redirect URL <p>Do not close the Social Auth browser tab in the Arcana Developer Dashboard. Open another tab and set up Twitch OAuth. </p>"},{"location":"setup/config-social/twitch-oauth/#2-get-twitch-clientid","title":"2. Get Twitch ClientID","text":"<p>Go to the Twitch Developer Console and register the app as a new Twitch application. </p> Twitch Console: Create New App <p>Enter the application name. </p> <p>Specify the Redirect URI copied from the Arcana Developer Dashboard in the previous step into the OAuth Redirect URL field of the Twitch Developer Console.</p> <p>Copy the ClientID generated by Twitch for the newly registered application in the Twitch Developer Console. It will be required in the next step while using the Arcana Developer Dashboard for completing the app configuration.</p> Copy Twitch ClientID"},{"location":"setup/config-social/twitch-oauth/#3-update-social-auth","title":"3. Update Social Auth","text":"<p>Finally, supply the Twitch ClientID into the Arcana Developer Dashboard Twitch settings. In the Arcana Developer Dashboard, click Configure &gt; Social Auth. Select Twitch icon and refer to Client ID input field. Paste the Client ID assigned by the Twitch Developer Console.</p> Update Twitch ClientID <p>Save the Social Auth settings.</p> <p>You are all set with the Twitch configuration.</p>"},{"location":"setup/config-social/twitter-oauth/","title":"Twitter Setup","text":"<p>Configuring Twitter for apps using global keys differs from apps using app-specific keys.</p>"},{"location":"setup/config-social/twitter-oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Log in to the Arcana Developer Dashboard: https://dashboard.arcana.network </p> </li> <li> <p>Register the app by creating a new app entry in the dashboard. </p> </li> </ul> <p>Client ID</p> <p>A default Testnet configuration profile is associated with every registered app. A unique Client ID is assigned for the Testnet profile. Only passwordless login is enabled by default.</p> <p>A newly registered app can be deployed at the Arcana Testnet. Developers must create a Mainnet configuration profile to deploy it on the Mainnet. A new, unique Client ID is assigned to the Mainnet profile. </p> <p> Unique App Identifier: ClientID </p>"},{"location":"setup/config-social/twitter-oauth/#global-keys","title":"Global Keys","text":"<p>Apps that require global keys feature do not need to configure the Social Auth settings in the Arcana Developer Dashboard.</p> <p>User onboarding via Twitter is automatically turned on for the app when global keys are enabled.</p> Global Keys Setting <p>Global Keys Configuration Change</p> <p>In the earlier versions of the Arcana Auth SDK, apps using global keys were required to configure Social Auth settings for the providers. This behavior has changed in the latest release of the Arcana Auth SDK. </p> <p>If an app was configured for any social login providers and switches over from app-specific to global keyspace later, the Social Auth settings will be disabled altogether.</p> <p> Global Keys: Social Auth Settings Disabled </p>"},{"location":"setup/config-social/twitter-oauth/#app-specific-keys","title":"App-specific Keys","text":"<p>Follow these steps to configure the Social Auth settings and enable user onboarding via Twitter. It requires developers to use the Arcana Developer Dashboard and the Twitter Developer Account.</p>"},{"location":"setup/config-social/twitter-oauth/#1-get-redirect-uri","title":"1. Get Redirect URI","text":"<p>Select the app in the Manage Apps dashboard screen and click Testnet/Mainnet to configure Twitter in the respective configuration profile. Go to Configure &gt; Social Auth. Copy the redirect URI shown on the top right.</p> Copy Redirect URI <p>Do not close the Social Auth browser tab in the Arcana Developer Dashboard. Open another tab and set up Twitter OAuth.</p>"},{"location":"setup/config-social/twitter-oauth/#2-get-twitter-api-key-secret","title":"2. Get Twitter API Key, Secret","text":"<p>Go to the Twitter Developer Portal and create a new Twitter App for setting up the OAuth credentials for the app. Note that if you would like to use Twitter API v2, you must add your Twitter App to a Project.</p> Twitter Developer Console <p>Select an appropriate environment and create a new name for the app on the Twitter Developer Portal.</p> Create Twitter App Entry <p>In the Keys and Tokens tab, the API Key and API Key Secret (also known as the Consumer Key and Secret) values are generated automatically for your newly created app entry. Make sure you copy both of these as they will be needed later for setting up Twitter in the Arcana Developer Dashboard. </p> Twitter Keys and Secret <p>After this, you need to select OAuth Setup as shown below and configure the Redirect URI and the app deployment website domain.</p> <p>Redirect URI Settings</p> <p>Copy the Redirect URI from the Arcana Developer Dashboard to the Twitter Developer Dashboard settings to enable Twitter login.</p> <p>Each app profile\u2014Testnet and Mainnet\u2014has its own Redirect URI in the Arcana Dashboard. Make sure to select the correct URI. Use the Mainnet Redirect URI for Mainnet deployments.</p> Setup App OAuth <p>When you click Setup, you will see OAuth options. For the Type of App field, select the Web App option.</p> Select Twitter Web App Option <p>In the App Info section, select the Redirect URI field. You need to specify the app callback URL in the Twitter settings as the redirect URI copied from the Arcana Developer Dashboard in the previous step. </p> Arcana Developer Dashboard  -&gt; Twitter Developer Portal OAuth Settings Redirect URI -&gt; Callback URI/Redirect URLs Set Twitter App Callback URL <p>Specify all the fields appropriately. Do not leave the optional fields empty.</p> <ul> <li>Website domain</li> <li>Organization details</li> <li>Terms of Service</li> <li>Privacy Policy</li> </ul> <p>Enable Email ID Access</p> <p>Arcana Auth SDK requires the Twitter user's email ID to verify the logged-in user's credentials. To enable this, Twitter makes it necessary that the Privacy Policy and Terms of Service are appropriately provided while creating a new app entry. For details, see here.</p> <p>Make sure you save all the settings.</p> <p>Where can I find API Key and Secrets?</p> <p>Copy the API Key and the API Key Secret from the App Settings section in the Twitter Developer Dashboard. Refer to the Keys and Tokens tab. In the Consumer Keys section, there is an option to regenerate the API key and secret. </p> <p>These details will be required in the next step while specifying the Twitter app configuration in the Arcana Developer Dashboard.</p>"},{"location":"setup/config-social/twitter-oauth/#3-update-social-auth","title":"3. Update Social Auth","text":"<p>In the Arcana Developer Dashboard, click Configure &gt; Social Auth and choose Twitter icon to view Twitter settings. Use the Twitter API Key and the Twitter API Secret obtained from the Twitter Developer Portal and paste them into the Arcana Developer Dashboard Twitter settings.</p> Update Twitter API Key <p>Save the Social Auth settings. </p> <p>You are all set with the Twitter configuration.</p>"},{"location":"setup/config-wallet/","title":"Configure Wallet UX","text":"<p> Rebrand Wallet</p> <p> Manage Keyspace </p> <p> Wallet Mode </p> <p> Custom Wallet UI </p>"},{"location":"setup/config-wallet/config-wallet-branding/","title":"Manage Branding","text":"<p>Learn how to manage the look and feel of the built-in, in-app Arcana wallet  UI through the branding settings in the Arcana Developer Dashboard.</p>"},{"location":"setup/config-wallet/config-wallet-branding/#prerequisites","title":"Prerequisites","text":"<ul> <li>Web3 app should be  registered.</li> </ul>"},{"location":"setup/config-wallet/config-wallet-branding/#1-dashboard-login","title":"1. Dashboard Login","text":"<p>Log in to the Arcana Developer Dashboard. In the 'Manage Apps' screen, click the registered app card. Then click Configure dropdown in the LHS navigation area. </p>"},{"location":"setup/config-wallet/config-wallet-branding/#2-configure-branding","title":"2. Configure Branding","text":"<p>Replace the default wallet branding by providing the following logo and theme inputs:</p> <ul> <li>Logo: Upload light and dark theme branding/logo images that are displayed in the Arcana wallet UI.</li> <li>Wallet Theme: Customise the default look and feel of the in-app Arcana wallet UI.Wallet Branding Settings </li> <li>Email Theme: Customise the default look and feel of the email message that is sent to the specified user email ID for passwordless login. Email Branding Settings </li> </ul>"},{"location":"setup/config-wallet/config-wallet-branding/#whats-next","title":"What's Next?","text":"Wallet Customization <p>Manage the user experience for signing blockchain transactions by configuring SDK usage. Specify the theme, branding settings of the in-app built-in Arcana wallet UI. Use wallet visibility and decide when to display the wallet UI in the app. Configure keyspace and enable the user experience of having the same wallet address across multiple apps integrated with the Arcana Auth SDK.</p> <p>You can also replace the built-in wallet UI with a  custom wallet UI.</p>"},{"location":"setup/config-wallet/config-wallet-branding/#see-also","title":"See also","text":"<ul> <li>Arcana Developer Dashboard Users Guide</li> <li>Arcana wallet Users Guide</li> </ul>"},{"location":"setup/config-wallet/config-wallet-keyspace/","title":"Manage Keyspace","text":"<p>Learn how to manage the user experience of having the same wallet address or unique one across different apps integrated with the Arcana Auth SDK. </p>"},{"location":"setup/config-wallet/config-wallet-keyspace/#prerequisites","title":"Prerequisites","text":"<ul> <li>Web3 app should be  registered.</li> </ul>"},{"location":"setup/config-wallet/config-wallet-keyspace/#1-dashboard-login","title":"1. Dashboard Login","text":"<p>Log in to the Arcana Developer Dashboard. In the 'Manage Apps' screen, click the registered app card. Then click Configure dropdown in the LHS navigation area. Select Keyspace to choose the keyspace type.</p> Dashboard: Select keyspace <p>The Keyspace Configuration settings are displayed:</p> Keyspace Settings"},{"location":"setup/config-wallet/config-wallet-keyspace/#2-select-keyspace-type","title":"2. Select Keyspace Type","text":"<p>Use the Keyspace section in LHS navigation to select the App-specific (default) or Global Keys feature.</p> <p>Arcana offers two types of keyspace options for keys assigned to the Web3 apps: App-specific and Global Keys.</p> <p>App-specific keys are the default.</p> Keyspace Options"},{"location":"setup/config-wallet/config-wallet-keyspace/#whats-next","title":"What's Next?","text":"Wallet Customization <p>Manage the user experience for signing blockchain transactions by configuring SDK usage. Specify the theme, branding settings of the in-app built-in Arcana wallet UI. Use wallet visibility and decide when to display the wallet UI in the app. Configure keyspace and enable the user experience of having the same wallet address across multiple apps integrated with the Arcana Auth SDK.</p> <p>You can also replace the built-in wallet UI with a  custom wallet UI.</p>"},{"location":"setup/config-wallet/config-wallet-keyspace/#see-also","title":"See also","text":"<ul> <li>Arcana Developer Dashboard Users Guide</li> <li>Arcana wallet Users Guide</li> </ul>"},{"location":"setup/config-wallet/config-wallet-settings/","title":"Manage Wallet Settings","text":"<p>Learn how to specify the Arcana wallet content security policy settings in the Arcana Developer Dashboard.</p>"},{"location":"setup/config-wallet/config-wallet-settings/#prerequisites","title":"Prerequisites","text":"<ul> <li>Web3 app should be  registered.</li> </ul>"},{"location":"setup/config-wallet/config-wallet-settings/#1-dashboard-login","title":"1. Dashboard Login","text":"<p>Log in to the Arcana Developer Dashboard and click your registered app entry from the 'Manage Apps' screen. </p> Dashboard: Select Wallet UI"},{"location":"setup/config-wallet/config-wallet-settings/#2-domain-url","title":"2. Domain URL","text":"<p>Click Configure in the LHS navigation area. Select Arcana Wallet to configure the Domain URL.</p> Wallet UI Settings <p>Domain URL: Set the website domain used by the server, to secure and restrict Arcana wallet from loading anywhere else other than the specified domain. Arcana uses the frame-ancestor CSP for restricted domains.Wallet Security</p> <p>Wallet UI Mode</p> <p>The Wallet UI Mode field displays the setting that controls whether the app developer has chosen to use the built-in wallet UI or a custom wallet UI.</p> <p>This setting is selected at the time of  app registration and cannot be changed later. Learn more...</p>"},{"location":"setup/config-wallet/config-wallet-settings/#whats-next","title":"What's Next?","text":"Wallet Customization <p>Manage the user experience for signing blockchain transactions by configuring SDK usage. Specify the theme, branding settings of the in-app built-in Arcana wallet UI. Use wallet visibility and decide when to display the wallet UI in the app. Configure keyspace and enable the user experience of having the same wallet address across multiple apps integrated with the Arcana Auth SDK.</p> <p>You can also replace the built-in wallet UI with a  custom wallet UI.</p>"},{"location":"setup/config-wallet/config-wallet-settings/#see-also","title":"See also","text":"<ul> <li>Arcana Developer Dashboard Users Guide</li> <li>Arcana wallet Users Guide</li> </ul>"},{"location":"solvers/solver-config/","title":"Solver Setup","text":"<p>This guide explains how to become a Solver. It shows how third parties can join  the Arcana Network Chain Abstraction (CA) protocol.</p> <p>Solvers are entities within the Arcana CA Protocol system that compete to fill up user intents for cross-chain transactions.</p> <p>Only permitted third parties can participate in the Arcana Chain Abstraction Protocol as a solver. To become a solver, you need a basic system to run the Arcana Solver software.</p>"},{"location":"solvers/solver-config/#system-requirements","title":"System Requirements","text":"<p>You will need to set up the following software once your hardware node is available:</p> <ul> <li>Linux Ubuntu 22.04.5 LTS</li> <li>Arcana Solver Binary and configuration files</li> </ul>"},{"location":"solvers/solver-config/#configuration-settings","title":"Configuration Settings","text":"<p>Create a configuration file config.toml with the following settings.</p> <pre><code># This is a sample solver-config.toml\n\nEVMPrivateKey = '...'\nP2PPrivateKey = \"...\"\nP2PListenAddrs = ['/ip6/::/tcp/40001']\nP2PDataPath = '/data/solver-p2pdata'\nP2PRendezvousPoint = 'ARCANA_CA_P2P_MEETINGHOUSE'\nRebalanceOnStart = true\nArcanaChainGRPCURL = \"localhost:9090\"\nArcanaChainTendermintURL = \"http://localhost:26657\"\nArcanaChainEventsURL = \"ws://localhost:26657/websocket\"\n[ArcanaChainKeyConfig]\nUID = \"0\"\nPrivateKey = \"...\"\nAlgorithm = \"secp256k1\"\n\n[RPCURLMap]\n137 = \"wss://polygon-mainnet.g.alchemy.com/v2/PfaswrKq0rjOrfYWHfE9uLQKhiD4JCdq\"\n42161 = \"wss://arb-mainnet.g.alchemy.com/v2/PfaswrKq0rjOrfYWHfE9uLQKhiD4JCdq\"\n10 = \"wss://opt-mainnet.g.alchemy.com/v2/PfaswrKq0rjOrfYWHfE9uLQKhiD4JCdq\"\n8453 = \"wss://base-mainnet.g.alchemy.com/v2/PfaswrKq0rjOrfYWHfE9uLQKhiD4JCdq\"\n\nRebalanceConfigs = [ { CurrencyID = 1, CurrencyID = 2 }]\n\nRebalanceConfigs.Chainwise = [\n    {\n        ChainID = 42161,\n        Target = 15,\n        MinimumTransfer = 1,\n    }\n],\n[\n    {\n        ChainID = 21144,\n        Target = 12,\n        MinimumTransfer = 1,\n    }\n]\n</code></pre> <p>Settings</p> <p>You can either provide the <code>config.toml</code> file in the current directory when you run the solver executable or specify the <code>config.toml</code> file path via the <code>CAS_CONFIG_PATH</code> environment variable before you run the VSC Service.</p>"},{"location":"solvers/solver-config/#running-a-solver","title":"Running a Solver","text":"<p>You can run the solver on a physical/virtual server or a Docker container. Click appropriate dropdown below to see detailed instructions.</p> Server/VMDocker Container <p>After providing configuration settings, run the solver by:</p> <pre><code>./solver\n</code></pre> <ol> <li> <p>Update <code>docker-compose.yml</code> (or something similar) with the service, example details listed below:</p> <pre><code>solver:\nimage: ca-solver\ninit: true\nrestart: unless-stopped\nenvironment:\n- CAS_CONFIG_PATH=/etc/cas.toml\nports:\n- 40001:40001\n- \"40001:40001/udp\"\nvolumes:\n- ./config.toml:/etc/cas.toml:ro\n- ./data/solver:/p2pdata``\n</code></pre> </li> <li> <p>Use the <code>config.toml</code> file example listed in the configuration settings section. Provide all the required configuration settings.</p> </li> <li> <p>Use <code>docker compose up</code> to bring up the Arcana Solver service inside a docker container.</p> <p>Image Path</p> <pre><code>Update the image path in the `docker compose` file for the `image` tag: `ca-solver`. This path depends upon whether you are accessing it locally from an installed binary or via an image published via a registry. ([Docker Hub](https://hub.docker.com/) / [GithHub Container Registry](https://codefresh.io/docs/docs/integrations/docker-registries/github-container-registry/) (GHCR) )\n</code></pre> </li> </ol>"},{"location":"solvers/solver-config/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Solver health check<ul> <li>Connect on the solver socket 40001 (default) or the value specified in the configuration file.</li> <li>If the connection fails, the solver is not up and running</li> </ul> </li> <li>System resources used<ul> <li> <p>Check system resource usage using the solver process.</p> <p><code>ps -aef | grep solver</code></p> </li> </ul> </li> </ul>"},{"location":"solvers/solver-dashboard/","title":"Solver Dashboard","text":"<p>Solver Dashboard helps solver administrators in setting up solver profiles. They can track and manage solver funds for the configured solver profiles.</p> What is a Solver? <p>A  solver is a third-party market maker that runs the Arcana provided solver executable. Solvers play a key role in the Arcana chain abstraction (CA) protocol. They provide liquidity and enable users to spend any asset on any destination chain. </p> <p>The protocol converts user intents into requests for funds (RFF). It publishes these requests on a specified channel. Only a permitted set of solvers can interact with the protocol.</p> <p>Solvers watch the channel for new requests. They compete to provide the desired liquidity and fulfill user requests.</p> <p>Solver admins can perform the following actions:</p> <ul> <li>Configure a solver profile<ul> <li>Name</li> <li>URL</li> </ul> </li> <li>Select a solver profile</li> <li>Manage solver funds:<ul> <li>Track total balance</li> <li>View and set thresholds</li> <li>View configured liquidity routes</li> <li>View and set fees for each route</li> <li>Track route earnings</li> </ul> </li> <li>Edit / Delete solver profile</li> </ul> Solver Dashboard"},{"location":"solvers/solver-dashboard/#prerequisites","title":"Prerequisites","text":"<p>To access the Solver Dashboard, the solver admin must:</p> <ol> <li>Own an EOA, wallet address</li> <li>Register the EOA with the Arcana protocol</li> <li>Make sure the solver is accessible at a URL such as <code>ws://ip:port/api/v1/admin-api</code></li> </ol> Running a Solver <p>To run a solver:</p> <ul> <li>Get the solver executable from Arcana</li> <li>Configure the solver settings</li> <li>Run the executable on a server; it should be accessible via WebSocket    <code>ws:</code> or WebSocket with TLS <code>wss:</code></li> </ul> <p>Once the executable runs, the solver is active and participates in the  Arcana CA protocol. The solver admin will require the <code>wss</code> URL to set up and manage the solver profile in the solver  dashboard.</p>"},{"location":"solvers/solver-dashboard/#connect-wallet","title":"Connect Wallet","text":"<p>To access the dashboard, visit https://solver.arcana.network/.</p> <p>At the initial access, the admin must set up a solver profile by specifying:</p> <ul> <li>Solver name</li> <li>Solver URL</li> </ul>"},{"location":"solvers/solver-dashboard/#solver-url","title":"Solver URL","text":"<p>Solver URL refers to the WebSocket communication channel specified as:  <code>wss://ip:port/api/v1/admin-api</code> or <code>ws://ip:port/api/v1/admin-api</code></p> Solver Profiles <p>Next, solver admins must use a registered EOA to connect the wallet to the solver  dashboard and log in.</p> Connect Wallet <p>After the wallet connects, the admin can view the total available solver funds. The dashboard also shows thresholds for various supported tokens. Admins can view and configure fees for the supported liquidity routes.</p>"},{"location":"solvers/solver-dashboard/#eoa-addresses","title":"EOA Addresses","text":"<p>The top RHS on the landing page shows:</p> <ul> <li>EVM and non-EVM addresses for the connected wallet</li> <li>Option to disconnect the wallet</li> </ul> Solver EOA Addresses"},{"location":"solvers/solver-dashboard/#select-solver","title":"Select Solver","text":"<p>Manage one or more solvers registered for the EOA account. Choose the solver  profile via the dropdown list at the top RHS.</p> <p>The selected solver page shows:</p> <ul> <li>Wallet balances: total balance, per token balance</li> <li>Token threshold setting</li> </ul> Solver Selection"},{"location":"solvers/solver-dashboard/#wallet-balances","title":"Wallet Balances","text":"<p>Go to the Wallet Balance screen in the left navigation panel. Here you can:</p> <ul> <li>View chains and tokens configured for the solver</li> <li>Check balances and thresholds</li> <li>Filter by chain or token type</li> </ul>"},{"location":"solvers/solver-dashboard/#total-balance","title":"Total Balance","text":"<p>The top right of the wallet balance screen shows your total balance. This is the combined liquidity across all chains and tokens in your solver account.</p>"},{"location":"solvers/solver-dashboard/#chaintoken-balance","title":"Chain,Token Balance","text":"<p>Each row displays the token balance for each configured chain and token type.</p>"},{"location":"solvers/solver-dashboard/#chaintoken-threshold","title":"Chain,Token Threshold","text":"<p>For each chain, you can view and edit the token thresholds.</p> Token Threshold"},{"location":"solvers/solver-dashboard/#fees","title":"Fees","text":"<p>Go to the left side navigation panel. Click on Fees to view and edit the fees configured for each route and the earnings data per route.</p> <p>Configuring fees for each specified route serviced by the solver is part of the solver setup. This is the fee charged by solver per route for providing liquidity to Arcana protocol users. </p> <p>Each solver route shows the following details:</p> <ul> <li>Source Chain</li> <li>Destination Chain</li> <li>Token</li> <li>Fees</li> </ul> Solver Fees"},{"location":"solvers/solver-dashboard/#filters","title":"Filters","text":"<p>You can filter the fees using these fields:</p> <ul> <li>Source chain</li> <li>Destination chain</li> <li>Token</li> </ul> <p>The Fees field on the right is editable and solvers can change them as needed. The protocol uses the fees you set in the dashboard. When a user creates an intent, the protocol displays all fee details, including solver fees. This ensures  transparency when building the request for funds.</p> <p>If the admin modifies the fees via the solver dashboard, the solver turns it into a Cosmos SDK transaction. It submits the transaction on chain. The updated  fee becomes effective from the next block.</p> Solver Route Filters"},{"location":"solvers/solver-dashboard/#route-earnings","title":"Route Earnings","text":"<p>You can see the earnings for each route next to the fees field.</p> Solver Earnings"},{"location":"solvers/solver-dashboard/#profile","title":"Profile","text":"<p>The solver profile page displays all configured solvers. The connected admin EOA  manages these solvers. They can edit or delete the configured solver profiles.</p> Solver Profiles"},{"location":"solvers/solver-dashboard/#disconnect","title":"Disconnect","text":"<p>Click on the account icon in the top right corner. Then select the option to  disconnect your wallet from the Solver Dashboard.</p>"},{"location":"support/","title":"Support","text":"Did you try Arcabot? <p>Click the icon at the bottom right of this page, state your question and get instant response from Arcabot.</p>"},{"location":"support/#contact-us","title":"Contact Us","text":"<ul> <li>Write to us at \ud83d\udce8 support@arcana.network. </li> <li>\ud83d\uddd3\ufe0f Schedule \ud83e\udd1d meeting/demo \ud83d\udda5\ufe0f with the Arcana Team.</li> </ul>"},{"location":"support/#arcana-community","title":"Arcana Community","text":"<ul> <li> <p> Telegram</p> <p>Check out Arcana Telegram.</p> </li> <li> <p> Twitter</p> <p>Stay informed via Arcana Twitter feed.</p> </li> <li> <p> GitHub</p> <p>Browse GitHub discussion topics. </p> </li> <li> <p> Discord</p> <p>Join the Arcana Discord community.</p> </li> </ul>"},{"location":"support/#report-issues","title":"Report Issues","text":"<ul> <li>Report CA-SDK Issues</li> <li>Report Standalone Arcana CA Wallet Issues</li> <li>Report Dashboard Issues</li> <li>Report Auth SDK Issues</li> <li>Report In-app Arcana Wallet Issues</li> <li>Report Documentation Issues</li> </ul>"},{"location":"user-guides/mfa/mfa-ug/","title":"MFA Setup","text":"<p>Learn how Web3 apps integrated with the Arcana Auth SDK can enable enhanced wallet security by setting up Multi-Factor Authentication (MFA).</p> MFA Selection: User's Choice <p>The MFA feature can only be enabled by the user through the Arcana wallet UI. Developers cannot enable/disable MFA.</p>"},{"location":"user-guides/mfa/mfa-ug/#enable-mfa","title":"Enable MFA","text":"<p>To enable MFA, log in to the app integrated with the Arcana Auth SDK using one of the available authentication mechanisms. At the very first login, the user is prompted to set up MFA. If the user decides not to enable MFA at the first login, it can be enabled later. </p> One-time Setting <p>Once configured, MFA cannot be disabled for the user's wallet account.</p>"},{"location":"user-guides/mfa/mfa-ug/#first-app-login","title":"First App Login","text":"<p>Click Proceed at the very first login when prompted to set up MFA.</p> MFA Setup"},{"location":"user-guides/mfa/mfa-ug/#security-questions","title":"Security Questions","text":"<p>Answer all five security questions. Select pre-configured security questions via the dropdown or create your own by clicking the question field.</p> Security Questions Save your Security Answers <p>When logging in from a new device, MFA will require you to either answer three security questions correctly or provide the PIN. Make sure you save the responses to the security questions and the PIN carefully.</p>"},{"location":"user-guides/mfa/mfa-ug/#recovery-pin","title":"Recovery PIN","text":"<p>Provide a 6-digit alphanumeric PIN as an additional recovery method.</p> MFA PIN Setup MFA Enabled!"},{"location":"user-guides/mfa/mfa-ug/#subsequent-logins","title":"Subsequent Logins","text":"<p>Log in to the app, access the Arcana wallet UI and click on the 'Profile' tab. Select Setup Now under the 'Enhanced Wallet Security' section. Choose Proceed to set up security questions, and set up a recovery PIN as described in the previous section.</p> Setup MFA via Profile Tab"},{"location":"user-guides/mfa/mfa-ug/#mfa-recovery","title":"MFA Recovery","text":"<p>If a user logs into the app using a different device or browser, they will be required to regenerate this local MFA component on the new device. This is essential to confirm the user identity for wallet access.</p> <p>This verification is done via the MFA prompt when logging on a new device. User can choose one of the options to verify:</p> <ul> <li>Enter the MFA recovery PIN.</li> <li>Answer three security questions correctly.</li> </ul> MFA Recovery <p>Once the user is verified, the local MFA factor is regenerated and the user will not be asked for it again on the same device or the browser app unless local storage is reset.</p> MFA Errors MFA Phase Error Message Cause Corrective Action MFA Setup Share expired. Please log in again to continue. If a user logs into the app and chooses to enable MFA, but fails to complete the MFA setup within 24 hours of login initiation, you will see this error. This error can be resolved by making sure that once initiated, the user completes the MFA setup a few minutes before the session expires. MFA Setup Security questionnaire errors. These errors are displayed when the user is setting up MFA and specifying the security questions and answers. User must answer all the required questions, each question should be unique and not repeated, an empty string is not allowed for a security question. MFA Setup PIN validation errors. These errors are displayed when the user is setting up the MFA PIN with invalid characters. Make sure that a 6-digit alphanumeric PIN is provided during MFA setup. The PIN cannot have a space character and should have a minimum of 6 characters and a maximum of 25 characters. MFA Recovery Incorrect security answer. This error is displayed during MFA secret recovery process if the user fails to provide the correct answer to any of the three security questions. Provide the correct answer or choose a different question for which you remember the answer. Alternatively, try using the correct PIN for completing the MFA secret recovery process. MFA Recovery Incorrect PIN. During MFA recovery, if the user chooses to use the PIN and enters an incorrect PIN, this error is displayed. Use the correct PIN or try an alternative method of MFA recovery by answering the security questions correctly. MFA Recovery Computed address did not match the actual address This error occurs when the address computed on the user's local device does not match the one that is decrypted locally after retrieving it from the Arcana encrypted store. It can happen when somehow the local address component is tampered with or corrupted. Simply clearing the app's local storage in the browser should allow the user to verify their identity via MFA and use the app."},{"location":"user-guides/wallet-ui/","title":"Overview","text":"<p>This guide covers how to access and use the features of Arcana wallet.</p>"},{"location":"user-guides/wallet-ui/#how-to-access-arcana-wallet","title":"How to access Arcana wallet?","text":"<p>The Arcana wallet is an in-app, non-custodial Web3 wallet. It activates automatically when users log into an app integrated with Arcana Auth SDK. No need to install or connect like standalone wallets available as browser extensions such as MetaMask, Rabby, Phantom.</p> <p>Authenticated users can access the wallet by clicking the icon at the bottom of the screen, LHS or RHS, where the developer has placed it in the app's context.</p> Access Arcana Wallet"},{"location":"user-guides/wallet-ui/#feature-overview","title":"Feature Overview","text":"<p>Users can perform these operations through the  Arcana wallet:</p> <ul> <li>Check account balance</li> <li>Sign (Approve/Reject) blockchain transactions</li> <li>Speed up transactions</li> <li>Add, modify, switch blockchain networks</li> <li>Deploy smart contracts </li> <li>Manage token assets (native and custom)<ul> <li>Check account balance</li> <li>List token assets</li> <li>Add custom tokens (ERC-20)</li> <li>Send and receive tokens </li> <li>Buy/Sell crypto</li> </ul> </li> <li>Manage NFTs<ul> <li>List NFT assets</li> <li>View NFT details</li> <li>Send NFTs (ERC-721, ERC-1155)</li> <li>Add NFTs</li> <li>Modify (edit, delete) NFT metadata</li> </ul> </li> <li>View account transaction activity (NFT, Token send transactions, contracts deployment, etc.) </li> <li>View pending transactions in the activity tab</li> <li>Use the standard Ethereum 1193 provider interface to call JSON/RPC functions and supported Web3 wallet operations for the network</li> <li>Export private key</li> <li>Enable enhanced security via MFA</li> <li>Logout</li> </ul>"},{"location":"user-guides/wallet-ui/use-wallet-to-export-keys/","title":"Export Private Key","text":"<p>Learn to use the Arcana wallet UI to export private key.</p> <p>Security Risk</p> <p>Exporting a private key from Arcana wallet exposes your keys. Do not share them. Ensure no one can see or screenshot your private key during export.</p>"},{"location":"user-guides/wallet-ui/use-wallet-to-export-keys/#prerequisites","title":"Prerequisites","text":"<ul> <li>Log in to the app integrated with the Arcana Auth SDK to access the Arcana wallet UI and export the key.</li> </ul>"},{"location":"user-guides/wallet-ui/use-wallet-to-export-keys/#exportcopy-key","title":"Export/Copy Key","text":"<p>Click the Profile tab in the wallet. Below the 'Private Key' section, you will see the Export Key option.</p> Export Private Key Confirm Key Export <p>If the user chooses to Proceed, they can either copy or download the private key from the wallet.</p> Copy or Download Key Key Security and Privacy <p>The user's private keys are visible only to the authenticated user via the Arcana wallet UI. App developers cannot access these keys, and Arcana Network does not store them. Key shares are generated by Arcana Network's distributed system, and the user's private key is assembled locally on their device. If MFA is enabled, a local component is required to generate the key using a subset of key shares.  Learn more...</p> <p>Once a user's key is exported via the Arcana wallet UI, the user is responsible for keeping it safe.</p> <p>Exporting MultiversX Wallet</p> <p>For exporting the MultiversX Wallet, there is no private key export feature unlike EVM chains. The user must refer to the saved copy of the secret seed phrase (displayed on first user login) and recover or import the MultiversX wallet. Learn more...</p>"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-nfts/","title":"Manage NFT Assets","text":"<p>Learn to use the Arcana wallet UI to manage your NFT assets.</p>"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-nfts/#prerequisites","title":"Prerequisites","text":"<ul> <li>Log in to the app integrated with the Arcana Auth SDK to access the Arcana wallet UI and manage NFT assets.</li> </ul>"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-nfts/#nft-operations","title":"NFT Operations","text":"<p>The following NFT operations are supported:</p> <ul> <li>List NFT assets associated with the wallet address</li> <li>View NFT details</li> <li>Send NFT</li> <li>Receive NFT</li> <li> <p>Manage NFTs</p> <ul> <li>Add an NFT</li> <li>Edit NFT entry</li> <li>Delete NFT entry</li> </ul> </li> </ul>"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-nfts/#list-nfts","title":"List NFTs","text":"<p>Click the  'NFT' tab at the bottom of the Arcana wallet UI. View thumbnails of NFTs linked to the active wallet address and blockchain network.</p> View NFTs <p>Auto-fetching of NFTs</p> <p>The Arcana wallet automatically fetches NFTs linked to the wallet address and active chain. NFT thumbnails appear in the wallet's NFT tab. This feature uses Ankr APIs and supports only NFTs minted on blockchains backed by Ankr. The Arcana wallet supports auto-fetching of NFTs for the following chains:</p> <p>Mainnet</p> <pre><code>* Arbitrum\n* Avalanche\n* Base\n* Binance Smart Chain\n* Ethereum\n* Fantom\n* Flare\n* Gnosis\n* Optimism\n* Polygon\n* Rollux\n* Syscoin\n</code></pre> <p>Testnet</p> <pre><code>* Ethereum Goerli\n* Avalanche Fuji\n</code></pre> <p>For a full list of chains supported by Ankr APIs, see here.</p>"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-nfts/#view-nft-details","title":"View NFT Details","text":"<p>In the NFT tab, browse and select an NFT thumbnail to view its details. You can see all metadata, including description and attributes.</p> NFT Metadata"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-nfts/#send-nfts","title":"Send NFTs","text":"<p>To transfer NFTs, click the NFT thumbnail. In the details section, click  icon to start the 'Send NFT' workflow. Enter the receiver's address and gas fee details, then click Preview.</p> Send NFT"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-nfts/#receive-nfts","title":"Receive NFTs","text":"<p>In the Token Assets tab click the QR code icon on the top right to display the wallet address and the QR code. Copy the wallet account address or the QR code and share it with the NFT sender for receiving an NFT.</p> Receive NFTs"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-nfts/#search-nft","title":"Search NFT","text":"<p>If you don't see the NFT you wish to view or transfer in the  NFT Assets tab of the wallet, you can either scroll down or search for it using the search bar.</p> Search NFT"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-nfts/#manage-nfts","title":"Manage NFTs","text":"<p>The Arcana wallet automatically fetches the NFTs associated with the wallet address for the chains that are supported by Ankr. For non-supported chains, manually add the NFTs by clicking Manage.</p> Manage NFT Add/Update NFT <p>You can add, edit, and update NFT details. The NFT collection name appears automatically once the correct contract address is entered. The wallet address must match the NFT owner for manual addition to Arcana wallet.</p> <p>NFT owners can delete NFTs, but only those manually added. Deleting an NFT removes it from the wallet but doesn\u2019t destroy it. You can re-add it if you still own it.</p>"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-nfts/#add-nft","title":"Add NFT","text":"<p>Click Manage in the NFT tab of the wallet and select New to add an NFT. Provide requisite inputs and click Save.</p> Add NFT"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-nfts/#modify-nft","title":"Modify NFT","text":"<p>To edit or delete a manually added NFT, go to the NFT wallet UI tab. Click Manage and select the NFT thumbnail to access the pen icon next to the NFT name. Click the pen to edit the details, or delete the NFT, and then click Save.</p> Modify NFT Metadata Save NFT updates"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-nfts/#view-nft-activity","title":"View NFT Activity","text":"<p>Click the  Activity tab on the bottom right of the Arcana wallet UI to view wallet transaction activity and pending transactions.</p> <p>You can see the NFT 'Send' transactions carried out by the wallet address. Only the activity for the current user login session is displayed. Click on an entry to view activity details.</p> Monitor NFT Send Activity NFT Send Details"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-tokens/","title":"Manage Token Assets","text":"<p>Learn to use the Arcana wallet UI to manage your token assets.</p>"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-tokens/#prerequisites","title":"Prerequisites","text":"<ul> <li>Log in to the app integrated with the Arcana Auth SDK to access the Arcana wallet UI and manage NFT assets.</li> </ul>"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-tokens/#token-operations","title":"Token Operations","text":"<p>Arcana wallet supports the following Web3 token operations for both native as well as custom ERC-20 tokens:</p> <ul> <li>Check balance</li> <li>Add custom tokens</li> <li>Send and receive native and custom tokens</li> <li>View Token Transactions </li> </ul>"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-tokens/#check-balance","title":"Check Balance","text":"<p>Click the  'Tokens' tab at the bottom left of the Arcana wallet UI. The account balance is displayed for the native tokens of the current active blockchain network. It also shows a list of custom token assets associated with the wallet account for the active blockchain network and the respective balance amounts.</p> <p>Click Refresh to fetch the latest account balance. </p> Account Balance"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-tokens/#add-custom-tokens","title":"Add Custom Tokens","text":"<p>Click the  'Tokens' tab to view the list of tokens associated with the wallet account.  </p> <p>If you do not see your custom token already listed in the token asset list, click the  icon to add your custom token.</p> <p>Add the Token Contract Address in the pop-up UI.</p> Add Token Contract Address <p>Once you add the address, the Arcana wallet validates whether it is an ERC-20 standard custom token. After the contract is verified, the wallet automatically fetches the Token Symbol and the Token Decimal values as configured in the custom contract.</p> <p>Click Save to add the custom token. The newly added custom token will show up under the account balance section on the wallet.</p> Add Token Contract Address"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-tokens/#select-token","title":"Select Token","text":"<p>Before sending tokens, users can specify whether they intend to transfer native or custom tokens. To select a custom token, it should already be added to the Arcana wallet.</p> <p>Click the  'Tokens' tab to view the native and custom tokens screen.</p> Add Token Contract Address <p>Use the drop-down list by clicking on the arrow next to the native token symbol and choose one of the custom tokens that are already added to the Arcana wallet. </p>"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-tokens/#send-tokens","title":"Send Tokens","text":"<p>Click  the 'Tokens' tab in the wallet to view the tokens associated with the wallet account.</p> Send Tokens <p>Click Send to initiate the send tokens workflow in the Arcana wallet by bringing up the following screen:</p> Send Tokens <p>Choose the appropriate token that you wish to send from the dropdown list, enter the transfer amount, and gas fees, and click Proceed. A preview screen shows the details of the send transaction. Click Send to confirm or click Back if you wish to change any transaction details. </p> Confirm Send"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-tokens/#receive-tokens","title":"Receive Tokens","text":"<p>Click the  'Tokens' tab at the bottom left of the wallet to receive tokens from another wallet address. Click the QR icon  on the top right of the wallet and copy the QR code or the wallet address. Share it with the sender to receive tokens in your account.  </p> &lt;  Receive Tokens <p>Click Refresh to see the updated account balance after the sender transaction is complete.</p> View Tokens"},{"location":"user-guides/wallet-ui/use-wallet-to-manage-tokens/#view-token-activity","title":"View Token Activity","text":"<p>Click the  'Activity' tab on the bottom right of the Arcana wallet to see wallet transaction activity and pending request notifications.</p> <p>You can see the token 'Send' transactions carried out by the wallet address. Only the activity for the current user login session is displayed. Click on an entry to view activity details.</p> Monitor Token Send Activity Send Transaction Details <p>Custom Tokens</p> <p>The app user must add the custom tokens manually to the Arcana wallet UI before the activity related to tokens can be viewed in the Activity tab.</p>"},{"location":"user-guides/wallet-ui/use-wallet-ui/","title":"Basic Wallet Operations","text":"<p>This guide covers basic Arcana wallet operations that are accessible through the user interface.</p> <p>Arcana wallet Access</p> <p>Users can access Arcana wallet from within the app's browser context. The app must be integrated with the Arcana Auth SDK to enable Arcana wallet for the user.</p>"},{"location":"user-guides/wallet-ui/use-wallet-ui/#minimizemaximize-ui","title":"Minimize/Maximize UI","text":"<p>Right after a user authenticates, the wallet is displayed in its minimized state.</p> <p></p> <p>On clicking, it expands to display the wallet in its maximized state. It can be minimized again by clicking the '\u2228' icon on the top in the wallet UI. </p> <p></p>"},{"location":"user-guides/wallet-ui/use-wallet-ui/#switch-wallet-tabs","title":"Switch Wallet Tabs","text":"<p>The following functions can be accessed from any of the wallet tabs:</p> <ul> <li>View the dApp name, logo</li> <li>View wallet address and type</li> <li>View/Switch/Add Blockchain Network</li> <li>Copy wallet address</li> <li>Display QR code for the wallet</li> </ul> <p>Other wallet features can be accessed via specific tabs in the wallet UI:</p> Wallet BalanceNFT AssetsUser ProfileActivity <p>This is the default home tab of the Arcana wallet: </p> <p>It displays the wallet token balance across available chains. User can switch chains, send cryptocurrency and tokens, buy/sell cryptocurrency and manage ERC-20 tokens.  See #view-wallet-balance for details.</p> <p> Wallet Home: Token Balance </p> <p>Use this tab to view the NFT assets linked with your Arcana wallet on the selected chain: </p> <p>See   how to manage NFTs, for details.</p> <p> View NFT Assets </p> <p>View your user profile details associated with the Arcana wallet in this tab: </p> <p>You can view wallet address, export private keys, check MFA status (or enable it) and log out of the wallet through this tab. </p> <p>See   how to export private keys for details.</p> <p>Multi-Factor Authentication (MFA)</p> <p>MFA is a one-time setting. See   how to ensable MFA, for details.</p> <p> View Wallet User Profile </p> <p>Check your Arcana wallet activities through the activity tab: </p> <p>It shows the wallet activity, transactions processed in the current user login session. Learn more...</p> <p> View Wallet Activity </p>"},{"location":"user-guides/wallet-ui/use-wallet-ui/#view-wallet-balance","title":"View Wallet Balance","text":""},{"location":"user-guides/wallet-ui/use-wallet-ui/#addselect-a-network","title":"Add/Select a Network","text":"<p>By default, the Arcana wallet UI displays a pre-configured list of blockchain networks that are configured by the app developer. Users can select a different network from the drop-down list or add newer networks that are supported by the app.</p> <p>To add or select a network, click the dropdown next to the blockchain network icon on the top right: </p> <p>Choose one of the available networks in the list and switch to it or click Add Network to add a new one with the following details:</p> <ul> <li>Add the following details:<ul> <li>Network Name: Name of the network. For example, Shardeum</li> <li>RPC URL: https://liberty10.shardeum.org</li> <li>Chain ID: 8080</li> <li>Currency Symbol: SHM</li> <li>Explorer URL (Optional): https://explorer.liberty10.shardeum.org/</li> </ul> </li> </ul> Add Network <p>Click Save to automatically set the newly added network as the active chain in the wallet UI.</p> Network List"},{"location":"user-guides/wallet-ui/use-wallet-ui/#switch-network","title":"Switch Network","text":"<p>Click on the dropdown next to the network icon on the top right of the wallet UI: </p> <p>Choose one of the available networks in the pre-configured blockchain networks list to switch networks.</p> Switch Network"},{"location":"user-guides/wallet-ui/use-wallet-ui/#sign-transaction","title":"Sign Transaction","text":"<p>A blockchain sign transaction notification can be triggered programmatically via the app or in response to a user action in the Arcana wallet UI. Users can scroll through the notification to view the details before selecting Reject or Approve option.</p> Sign Transactions"},{"location":"user-guides/wallet-ui/use-wallet-ui/#speed-up-transaction","title":"Speed Up Transaction","text":"<p>For every blockchain transaction, users pay gas fees with the network\u2019s native token. It is possible to speed up the transaction by paying higher gas fees. When issuing a send transaction through the Arcana wallet UI, users have three options for gas fees selection:</p> <ul> <li>Normal: Default network gas fees</li> <li>Fast: Pay a premium for quicker transactions</li> <li>Custom: Choose gas limits, priority fee and max gas fees setting and customize fees</li> </ul> Speed up Transactions"},{"location":"user-guides/wallet-ui/use-wallet-ui/#transaction-details","title":"Transaction Details","text":"<p>If a blockchain transaction is triggered via the app that requires the user's approval, the user will see a transaction notification. If the wallet was in a minimized state at the time the request was generated, then the notification will show up with a summary of the transaction along with the buttons to approve or reject. </p> Transaction Notification <p>The user can click on the top right arrow icon in the transaction notification to view its details. </p> Transaction Notification Transaction Notification Example <p>Here is an example of how an <code>eth_sendTransaction</code> triggers a transaction notification and approval request for the user. The send transaction notification summary is displayed:</p> <p> Example: Send Transaction Notification </p> <p>In the case of the send transaction request or sign transaction request, the notification details allow the user to edit the gas fees before approving the request. </p> <p> Example: Send Transaction Notification </p> <p>For other transactions that do not involve gas fees such as personal sign or signature requests, the notification details allow users to review transaction message details before taking an action to approve or reject.</p> Signature Request Example <p>Here is an example of a signature request notification summary:</p> <p> Example: Signature Request Summary </p> <p>On clicking the topmost arrow icon, the user can see the signature request transaction notification details view:</p> <p> Example: Signature Request Details </p>"},{"location":"user-guides/wallet-ui/use-wallet-ui/#buysell-crypto","title":"Buy/Sell Crypto","text":"<p>Arcana wallet uses third-party providers to enable buying and selling (on-ramping and off-ramping) of crypto assets.</p>"},{"location":"user-guides/wallet-ui/use-wallet-ui/#fiat-on-ramp","title":"Fiat On-ramp","text":"<p>The Arcana wallet users can buy cryptocurrency using fiat through one of the supported providers: </p> <ul> <li>Transak</li> </ul> <p>Click Buy to purchase ERC20 or native tokens for supported blockchains from the chosen on-ramp provider. Select the 'Tokens'  tab, then choose the required blockchain network from the drop-down list. The selected chain determines which cryptocurrencies and tokens can be purchased, following local regulations.</p> Buy Crypto <p>Pick up one of the providers and click Proceed. </p> On Ramp Providers <p>Clicking will open the provider interface in a new tab. Arcana wallet will notify you of the 'buy' process. Dismiss the notification and continue using the wallet while the purchase is completed in the other tab.</p> Confirm Buy Transaction On-Ramp Provider Usage <p>Fiat on-ramp providers may require users to follow country-specific KYC procedures and list only the available cryptocurrencies for the selected chain. Minimum purchase amounts can vary by country and provider.</p> <p>For example, Transak requires each user to complete KYC by submitting country-specific identification documents. Once the verification is complete, the user can purchase the cryptocurrency with Transak.  This verification is a one-time thing and subsequent purchases will not require this additional step. The figure below shows an example of a purchase transaction using Transak.</p> <p> Using Transak </p> <p>Refer to the provider documentation for details regarding usage and coverage:</p> <ul> <li> <p>Transak User Guide</p> </li> <li> <p>Transak coverage</p> </li> </ul> Buy Limitations <ol> <li> <p>Purchased ERC20 and ERC721 tokens will not update automatically in the Arcana wallet assets screen. Users must manually add custom tokens, as on-ramp providers do not supply the token's contract address.</p> </li> <li> <p>The notification tab in the Arcana wallet UI will not show activity for a successful purchase. On-ramp providers do not consistently share this information. We may add this feature in future releases.</p> </li> </ol>"},{"location":"user-guides/wallet-ui/use-wallet-ui/#fiat-off-ramp","title":"Fiat Off-ramp","text":"<p>The Arcana wallet users can sell cryptocurrency using fiat through one of the supported providers: </p> <ul> <li>Transak</li> </ul> <p>Click Sell to off-ramp ERC20 tokens or execute native cryptocurrency sell transactions for supported blockchains via the selected provider. The chosen off-ramp provider executes the 'sell' and deposits proceeds into the configured bank account. Select the 'Tokens'  tab, then choose the required blockchain network from the drop-down list. The selected chain determines which cryptocurrencies and tokens can be sold, following local regulations.</p> Sell Crypto <p>Pick up one of the providers and click Proceed.</p> Off-Ramp Providers <p>Clicking opens the provider interface in a new tab. Complete the sale there. Arcana wallet will notify you of the 'sell' initiation. Dismiss the notification and continue using the wallet.</p> Confirm Sell Transaction Off-ramp Provider Usage <p>Fiat off-ramp providers may ask the user to follow country-specific procedures for KYC and list available cryptocurrencies for the selected chain. Note that the basic maximum sell amount for a country or cryptocurrency may vary across countries and providers.</p> <p>Transak requires each user to complete KYC by submitting country-specific identification documents. Once the verification is complete, the user can sell cryptocurrency via Transak.  This verification is a one-time thing; subsequent purchases will not require this additional step. The figure below shows an example of a sell transaction using Transak.</p> <p> Using Transak </p> <p>Refer to provider documentation for more details on usage and coverage.</p> <ul> <li>Transak User Guide</li> <li>Transak coverage</li> </ul> <p>The activity tab in the Arcana wallet UI displays details of the 'sell' transaction issued from the wallet.</p>"},{"location":"user-guides/wallet-ui/use-wallet-ui/#add-tokens","title":"Add Tokens","text":"<p>Click the  'Tokens' tab on the bottom left of the Arcana wallet to bring up the token assets screen.</p> <p>You can add custom ERC-20 and ERC-1155 token assets to the Arcana wallet UI by clicking Manage. Learn more...</p>"},{"location":"user-guides/wallet-ui/use-wallet-ui/#manage-nft-assets","title":"Manage NFT Assets","text":"<p>Click the 'NFT' tab on the bottom of the Arcana wallet UI to view and manage NFTs associated with the wallet address on the selected blockchain network and perform these actions:</p> <ul> <li>List NFT assets associated with the wallet address</li> <li>View NFT details</li> <li>Send NFT</li> <li>Receive NFT</li> <li> <p>Manage NFTs</p> <ul> <li>Add an NFT</li> <li>Edit NFT entry</li> <li>Delete NFT entry</li> </ul> </li> </ul> NFT Assets <p>Learn more...</p>"},{"location":"user-guides/wallet-ui/use-wallet-ui/#view-user-profile","title":"View User Profile","text":"<p>Click the  'Profile' tab on the bottom of the Arcana wallet and perform these actions:</p> <ul> <li>View User name</li> <li>View User Email ID</li> <li>View / Copy Wallet Address</li> <li>Export the private key / Save seed phrase for exporting MultiversX wallet </li> <li>View MFA Status / Enable MFA</li> <li>Logout</li> </ul> User Profile"},{"location":"user-guides/wallet-ui/use-wallet-ui/#export-private-key","title":"Export Private Key","text":"<p>Click the Profile  tab on the bottom of the Arcana wallet to see the user profile screen and choose export private key option.</p> Export Private Key <p>Exporting MultiversX Wallet</p> <p>For exporting the MultiversX Wallet, there is no private key export feature unlike EVM chains. The user must refer to the saved copy of the secret seed phrase (displayed on first user login) and recover or import the MultiversX wallet. Learn more...</p>"},{"location":"user-guides/wallet-ui/use-wallet-ui/#view-status-enable-mfa","title":"View Status / Enable MFA","text":"<p>In the profile tab of the wallet, users can check the current MFA status, whether it is enabled or not. MFA is a one-time setting for the user's wallet. Click Set up MFA to turn on MFA by setting up security questions and a PIN. You will need to enter either of them to authenticate when you login to a new device or browser. Learn more...</p>"},{"location":"user-guides/wallet-ui/use-wallet-ui/#logout","title":"Logout","text":"<p>To log out of the app and the wallet, click the Profile  tab at the bottom of the Arcana wallet UI and select Logout.</p> Logout"},{"location":"user-guides/wallet-ui/use-wallet-ui/#transaction-activity","title":"Transaction Activity","text":"<p>Click the  'Activity' tab on the bottom right of the Arcana wallet to view the activity screen. It lists any pending transactions and the status of the following user actions via the wallet:</p> <ul> <li>Sell transaction</li> <li>Send tokens transaction</li> <li>Contract deployment</li> </ul> User Profile Notification Example <p></p>"},{"location":"user-guides/wallet-ui/use-wallet-ui/#pending-contract-deployment-request","title":"Pending Contract Deployment Request","text":"<p>A red dot on the 'Activity' tab icon at the bottom right of the Arcana wallet indicates a pending blockchain transaction. </p> <p>Click on the red dot to see details of the pending transaction and take appropriate action. </p> View Pending Notifications"},{"location":"user-guides/wallet-ui/use-wallet-ui/#pending-transactions","title":"Pending Transactions","text":"<p>When a transaction notification appears, the user can click 'Do this later' to ignore it. Pending transactions are marked with a red dot in the 'Activity' tab and on the minimized wallet icon.</p> <p>Once the user addresses the notification, it disappears from the 'Activity' tab.</p> Pending Transactions"},{"location":"validators/onboard-validators/","title":"ADKG Validator Onboarding Guide","text":"<p>This guide is for trusted partners, known as 'validators,' selected for the Arcana ADKG protocol. Validators run crucial  ADKG validator nodes, central to Arcana's DKG subsystem decentralization.</p> <p>To become a validator, you must be a trusted partner of Arcana and run a validator node. In return, validators earn rewards based on node uptime and key generation output</p>"},{"location":"validators/onboard-validators/#entry-exit","title":"Entry/ Exit","text":"<p>Initially, Arcana partners exclusively with trusted validators. Future processes will allow validator entry and exit. The DKG subsystem deployed at Mainnet comprises of seven nodes, four owned and run by Arcana, and the rest by trusted partners.</p>"},{"location":"validators/onboard-validators/#node-setup","title":"Node Setup","text":"<p>Arcana DKG is a permissioned system that only allows a trusted group of partners to join. To become an external validator node in the DKG subsystem, partners must be whitelisted by Arcana. This process involves providing an Ethereum address, which will be associated with a private key that verifies the node's identity and grants it access to the Arcana DKG subsystem.</p>"},{"location":"validators/onboard-validators/#prerequisites","title":"Prerequisites","text":"<ol> <li>Validator node</li> <li>Monitoring tools</li> <li>Have a Hashicorp cloud server (or self-hosted server) preferably on a separate server from the validator node</li> <li>Enable a KV Secrets Engine with the path value set to <code>secret</code>. </li> </ol> <pre><code>vault secrets enable -path=secret kv\n</code></pre> HashiCorp KV Setup <p>HW Configuration</p> Minimum Recommended 4 GB RAM 8-16 GB RAM 500 GB SSD 1 TB SSD 4 core CPU 8 core CPU"},{"location":"validators/onboard-validators/#steps","title":"Steps","text":""},{"location":"validators/onboard-validators/#1-node-configuration","title":"1. Node Configuration","text":"<p>Operating System:</p> <p>Preferably deploy Ubuntu Linux v20.04.4 LTS or higher.</p> <p><code>ulimit</code> Settings</p> <p>Use one of the following commands to check the <code>ulimit</code> settings for open file descriptors (default):</p> <pre><code>ulimit -n\n</code></pre> <pre><code>ulimit -aS\n</code></pre> <p>If the soft limit for open files is lower than 20,000 use the following instructions to update it:</p> <ul> <li>Edit the Linux Kernel parameter file <code>/etc/sysctl.conf</code></li> </ul> <pre><code>  vi /etc/sysctl.conf \n</code></pre> <p>Add \" fs.file-max = 20000 \" in the file. To apply the changes, execute:</p> <pre><code>sysctl -p\n</code></pre> <ul> <li>Change the ulimit setting in the file <code>/etc/security/limits.conf</code></li> </ul> <pre><code>vi /etc/security/limits.conf\n</code></pre> <p>Specify the following limits in the <code>/etc/security/limits.conf</code> file:</p> <pre><code> * soft nofile 20000\n * hard nofile 20000\n</code></pre> <p>After making these changes to both files, make sure that you reboot the ADKG node via one of these commands:</p> <pre><code>reboot\n</code></pre> <pre><code>init 6\n</code></pre> <ul> <li>Validate that <code>ulimit</code> for open files has been updated to 20000 by using the command:</li> </ul> <pre><code>ulimit -n\n</code></pre> <p>Network Settings:</p> <ol> <li> <p>Obtain a domain name for your server and set up associated SSL certificates. </p> </li> <li> <p>Keep the following ports open on the validator node:</p> <ul> <li>26656</li> <li>1080</li> </ul> </li> </ol> <p>Setup DKG Software</p> <ol> <li> <p>Copy the DKG binary v1.0.1 locally on your node.</p> </li> <li> <p>Change the binary file permissions to 'executable'.</p> </li> </ol>"},{"location":"validators/onboard-validators/#2-validator-secrets","title":"2. Validator Secrets","text":"<p>The process of setting up validator secrets involves two steps. First, you must initiate a secrets configuration manager. Then, you must generate secret keys for the validator node. Currently, only the Hashicorp vault is supported.</p> <p>2a. Initiate Secrets Configuration Manager</p> <p>Use Hashicorp to initiate the secret configuration manager. Make sure you have already enabled the KV secrets engine as listed in the prerequisites, before running the command listed below.</p> <pre><code>dkg secret generate --secret-config=&lt;path&gt; --token=&lt;token&gt; --server-url=&lt;url&gt; \n</code></pre> <p>Command Line Options</p> <p><code>--secret-config</code></p> <p>Specify the <code>path</code> where the secret manager configuration will be written. Defaults to the <code>secretConfig.json</code> file in the current directory.</p> <p><code>--token</code></p> <p>The access token for the Hashicorp vault. The access token is used for accessing the KV secret storage engine.</p> <p><code>--server-url</code></p> <p>The API URL of the Hashicorp Vault server.</p> <p>2b: Generate Secret Keys</p> <p>After initiating the secret configuration manager, generate keys for the validator node. The following command will provide the Node Address, which should be shared with the Arcana Team.</p> <pre><code>dkg secret init --secret-config=&lt;path&gt;\n</code></pre> <p>Command Line Options</p> <p><code>--secret-config</code></p> <p>The <code>path</code> specified in the previous step where the secret manager configuration will be written. Defaults to <code>secretConfig.json</code> file in the current directory.</p> <p>Follow Start Ceremony</p> <p>Start the node only when you have set up the validator secret and shared the Node Address with the Arcana Team.</p>"},{"location":"validators/onboard-validators/#3-start-ceremony","title":"3. Start Ceremony","text":"<p>Validator DKG nodes cannot be started individually; all participating nodes must start at the same time for the protocol to work properly. Keep an eye on this space for updates on when to start your DKG node as a validator.</p> <p>The key generation begins only when all the nodes in the DKG subsystem, Arcana DKG nodes, and all validator DKG nodes, have joined in.</p>"},{"location":"validators/onboard-validators/#4-node-startup","title":"4. Node Startup","text":"<p>Before you start the validator node, make sure you have completed all the prerequisites and followed the steps defined in the DKG Start Ceremony.</p> <p>Node Start Command</p> <p>You can run the <code>dkg start</code> command and specify validator node configuration details using one of ways listed below:</p> <ul> <li>run <code>dkg start</code> with a JSON configuration file that contains all the configuration, or</li> <li>run <code>dkg start</code> with various flags/parameter values on the command line itself </li> </ul> <p>Registration of validator node happens automatically using the information that is provided in the configuration file or via the command line.</p> <p>Restart</p> <p>If this is not the first time you are starting the node, please make sure that you perform a clean re-start. Refer to the 'Stop/Restart' section below to see how to perform a clean restart.</p> <p>Option1: Use Configuration File</p> <pre><code>dkg start --config=/path/to/config.json\n</code></pre> config.json<pre><code>{\n  ipAddress: \"172.23.22.231\",      //Example value. Replace with public IP Addres of your node\n  domain: \"keyserver.example.com\", // Example value. Do not specify https://\n  dataDir: \"/path/to/data\",        // Ensure dataDir directory access permissions allow DKG binary to access it\n  secretConfig: \"/path/to/secret/config.json\", //Use appropriate file access permissions for DKG binary to access it\n  port: \"3000\",\n}\n</code></pre> <p>Option 2: Use Command Line</p> <pre><code>dkg start --secret-config=/path/to/secret/config --data-dir=/path/to/data --domain=keyserver.example.com --ip-address=172.23.22.231  --server-port=3000\n</code></pre> <p>Node Start Options</p> <p><code>--secret-config</code></p> <p>The path to secret configuration. See 'Validator Secrets section' for details.</p> <p><code>--data-dir</code></p> <p>The data directory where all the node-specific and shared data will be stored, this data will have to be backed up regularly by the nodes to maintain some redundancy.</p> <p>Keep your data directory strictly private!</p> <p>The data directory specified above is used for storing multiple items that are secret. Besides initializing the directories for holding the Tendermint state and key share data, it also stores private keys on a file. </p> <p>This directory should be secured and kept fully secret. If someone were to obtain access to this directory and the secrets, they could potentially impersonate you as a node in the network.</p> <p><code>--domain</code></p> <p>The domain name for the validator node that you are running. This is needed to enable users and other nodes to be able to access the validator node via RPC calls.</p> <p><code>--ip-address</code></p> <p>The IP Address of the validator node that is used by DKG nodes for communicating within themselves.</p> <p><code>--server-port=3000</code></p> <p>The port number at which the http server is listening for requests.</p> <p>SSL Termination</p> <p>The SSL termination can happen on an Nginx server which can then map the port 443 to the <code>--server-port</code> specified in the <code>dkg start</code> command above.</p>"},{"location":"validators/onboard-validators/#5-stoprestart-node","title":"5. Stop/Restart Node","text":"<p>You need to kill the running DKG process to stop the validator node. </p> <p>We are working on providing a cleaner way to stop and restart the node. Until then, follow these steps to cleanly restart your validator node:</p> <ol> <li>Stop all nodes.</li> <li>Replace the DKG binary with the latest one.</li> <li>Remove <code>dkg.sock</code> file, if present.</li> <li>DO NOT REMOVE the directory that your specified for <code>--data-dir</code>.</li> <li>Start the nodes using the <code>dkg start</code> command.</li> </ol>"},{"location":"validators/onboard-validators/#responsibilities","title":"Responsibilities","text":"<ul> <li> <p>Perform all the required technical node operations done by each DKG node.</p> </li> <li> <p>Maintain a high uptime.</p> </li> <li> <p>Back up the validator node reliably.</p> </li> <li> <p>Always use the latest release of the DKG binaries.</p> </li> <li> <p>Check node-related services and processes daily and monitor health.</p> </li> <li> <p>Use node monitoring tools. We plan to support Prometheus in the future, which will allow partners to monitor their nodes using the Grafana dashboard.</p> </li> <li> <p>Communicate any issues with the Arcana team on the DKG Slack channel.</p> </li> <li> <p>Monitoring Metrics: At present, besides CPU and memory, we do not have any other specific metrics that need to be monitored for the validator node. Stay tuned for updates.</p> </li> <li> <p>Provide feedback and suggestions.</p> </li> </ul>"},{"location":"validators/onboard-validators/#migrating-validator-node","title":"Migrating Validator Node","text":"<p>If you want to migrate the validator node to another server (for backup or temporary purposes) there are a couple of options available. Make sure you have addressed the prerequisites first before migrating the validator setup to another node.</p> <p>Migration Prerequisites</p> <p>Before migrating a validator node to another physical or virtual server, make sure that the following are addressed:</p> <ul> <li>Backup the 'data' directory of the validator node</li> <li>Backup the Hashicorp vault data on a separate node</li> </ul> <p>Case 1: Migrating to a Node with same Domain and IP Address</p> <p>Follow the steps listed under starting a validator node section except the instructions in step 2b to bring up a new validator node. Now start the new node and join in the ADKG protocol. The other nodes are not required to be restarted for migration to work.</p> <p>Case 2: Migrating to a Node with same Domain and different IP Address</p> <p>You need to notify the Arcana team as this may require coordinating with other validator node operators. Follow the steps listed under starting a validator node section except the instructions in step 2b to bring up a new validator node. Before starting up the node, wait for all the other nodes in the ADKG subsystem to restart in a synchronized manner. In this case, all validator nodes have to restart together.</p> <p>Case 3: Migrating to a Node with different IP Address and Domain</p> <p>We do not support migrating the validator node to a different one that has a different domain and a different IP address. In future releases too, the new node with a different domain and IP address will not be treated as a reincarnate of the previous node but as a brand 'new' replacement node. Adding such a node will follow Arcana ADKG recovery and repair protocol enhancements. In that case, there is no use backing up the validator node data. Our protocol will re-generate and repair key shares where applicable, in case one node goes down and a different one joins in the ADKG subsystem.</p> <p>Backup Data Directory of the Validator Node</p> <p>ADKG protocol is under active development for robustness and key repair, regeneration mechanisms. We highly recommend that you back up the 'data' directory of the validator node in any case.</p>"},{"location":"validators/onboard-validators/#rewards","title":"Rewards","text":"<p>We are working on providing more details regarding validator rewards that answer the following questions:</p> <ul> <li> <p>What are the incentives for validator node providers?</p> </li> <li> <p>When are the rewards realized and how?</p> </li> </ul> <p>Check out Validator FAQ if you have any questions or write to us: \ud83d\udce8 support@arcana.network</p>"},{"location":"validators/onboard-validators/#questions","title":"Questions?","text":"<p>Write to us at the special validator slack channel if you have any further queries.</p>"},{"location":"web3-stack/apps/","title":"Supported App Types","text":"<p>Web3 apps built using these app frameworks and wallet connectors can integrate with Arcana Auth SDK to support social login and the in-app Arcana wallet.</p> App FrameworksWallet Connectors <ul> <li> <p>Web</p> <ul> <li>Vanilla HTML/CSS/JS</li> <li>Vue</li> <li>React/Next.js</li> </ul> </li> <li> <p>Mobile</p> <ul> <li>Flutter</li> <li>React-Native</li> </ul> </li> <li> <p>Gaming</p> <ul> <li>Unity</li> </ul> </li> </ul> <ul> <li>Wagmi</li> <li>RainbowKit</li> <li>WalletConnect</li> <li>Web3-React</li> </ul> <p>Arcana Auth SDK Flavors</p> <p>In some cases, you need to install and integrate the app with the <code>auth</code> package in addition to the app-specific package listed below. </p> SDK Name Web3 Application Type Package Name Requires companion SDK Arcana Auth SDK For enabling user onboarding in web apps: Vanilla HTML/CSS/JS Apps, Vue Apps <code>auth</code> None Arcana Auth React SDK React Apps <code>auth-react</code> <code>auth</code> Arcana Auth Wagmi SDK Apps using wallet connectors such as Wagmi, RainbowKit, WalletConnect <code>auth-wagmi</code> <code>auth</code> Arcana Auth Web3 React SDK Apps using Web3-React wallet connector <code>auth-web3-react</code> <code>auth</code> Arcana Auth Flutter SDK Mobile apps built using Flutter <code>arcana_auth_flutter</code> None Arcana Auth React-Native SDK Mobile apps built using React Native <code>auth-react-native</code> None Arcana Auth-Core SDK Auth SDK for user onboarding features usage only and ability to assign keys to authenticated users, with no embedded wallet feature <code>auth-core</code> None Arcana Auth Unity SDK Gaming apps built using Unity <code>arcana-auth-sdk</code> None"},{"location":"web3-stack/auth/","title":"Supported Auth Providers","text":"<p>To enable social login and onboard users in Web3 apps, configure one or more of the supported authentication providers via the Arcana Developer Dashboard.</p>"},{"location":"web3-stack/auth/#social-login-providers","title":"Social Login Providers","text":"<ul> <li>Apple</li> <li>Cognito</li> <li>Discord</li> <li>Firebase</li> <li>GitHub</li> <li>Google</li> <li>Steam</li> <li>Telegram</li> <li>Twitch</li> <li>Twitter</li> </ul>"},{"location":"web3-stack/auth/#iam-providers","title":"IAM Providers","text":"<ul> <li>Cognito</li> <li>Firebase</li> </ul>"},{"location":"web3-stack/auth/#custom-auth","title":"Custom Auth","text":"<p>Apps that use custom authentication (for example, Epic user authentication, Relative gaming user authentication mechanism) and require enabling authenticated users to sign blockchain transactions can use the Custom Auth feature.</p>"},{"location":"web3-stack/auth/#passkeys","title":"Passkeys","text":"<p>You can also use passkeys to sign up and onboard users in Web3 apps built with the Arcana Auth SDK. Passkeys can be used as an alternate login mechanism or the only option to onboard an app.</p>"},{"location":"web3-stack/browsers/","title":"Supported Browsers","text":"<p>Web3 apps running on these browsers can integrate with Arcana Auth SDK to support social login and the in-app Arcana wallet:</p> <ul> <li>Chrome 103 or higher</li> <li>Brave v1.41 or higher</li> <li>Safari 15.6 or higher</li> </ul>"},{"location":"web3-stack/ca_stack/","title":"Supported Chains and Tokens","text":"<p>The Arcana CA SDK supports unified balance and chain-abstracted transactions for the chains and tokens<sup>*</sup> listed below. </p> <p>To execute a chain-abstracted transaction, you need enough unified balance of the token type on the source chain. This balance must cover both the gas fee and the transaction amount on the destination chain.</p> <p><sup>*</sup> Every chain may not support all tokens. The list of supported chains and tokens may differ for the Coral and the Folly testnet. The chains supported by the SDK and those supported in the standalone, CA wallet used in the demos may not always be the same.</p>"},{"location":"web3-stack/ca_stack/#chains-and-tokens","title":"Chains and Tokens","text":"<p>Supported Tokens</p> <ul> <li>USDC and USDT tokens are supported if available on the chain. We support Circle-issued tokens if Circle is present on chain, canonical otherwise.</li> <li>ETH is supported as an ERC-20 token if it's managed or issued by the operator or leader of the chain.</li> <li>The native token for a chain is always supported.</li> </ul>"},{"location":"web3-stack/ca_stack/#ethereum","title":"Ethereum","text":"MainnetSepolia Tokens Coral ETH \u2705 USDC \u2705 USDT \u2705 Tokens Folly ETH \u2705 USDC \u2705"},{"location":"web3-stack/ca_stack/#optimism","title":"Optimism","text":"MainnetOP Sepolia Tokens Coral ETH \u2705 USDC \u2705 USDT \u2705 Tokens Folly ETH \u2705 USDC \u2705 USDT \u2705"},{"location":"web3-stack/ca_stack/#bsc","title":"BSC","text":"Mainnet Tokens Coral ETH \u2705 USDC \u2705 USDT \u2705 BNB \u2705"},{"location":"web3-stack/ca_stack/#polygon","title":"Polygon","text":"MainnetPolygon Amoy Tokens Coral USDC \u2705 USDT \u2705 POL \u2705 Tokens Folly USDC \u2705 POL \u2705"},{"location":"web3-stack/ca_stack/#kaia","title":"Kaia","text":"Mainnet Tokens Coral USDT \u2705 KAIA \u2705"},{"location":"web3-stack/ca_stack/#base","title":"Base","text":"MainnetBase Sepolia Tokens Coral ETH \u2705 USDC \u2705 USDT \u2705 Tokens Folly ETH \u2705 USDC \u2705"},{"location":"web3-stack/ca_stack/#fuel","title":"Fuel","text":"Mainnet Tokens Coral ETH \u2705 USDC \u2705 USDT \u2705 <p>No Fuel support in <code>ca-wagmi</code> SDK</p> <p>The Arcana CA Wagmi SDK doesn't support Fuel blockchain yet. Chain abstraction works for other supported chains and tokens in Wagmi-based Web3 apps.</p>"},{"location":"web3-stack/ca_stack/#arbitrum","title":"Arbitrum","text":"MainnetArbitrum Sepolia Tokens Coral ETH \u2705 USDC \u2705 USDT \u2705 Tokens Folly ETH \u2705 USDC \u2705 USDT \u2705"},{"location":"web3-stack/ca_stack/#avalanche","title":"Avalanche","text":"Mainnet Tokens Coral USDC \u2705 USDT \u2705 AVAX \u2705"},{"location":"web3-stack/ca_stack/#sophon","title":"Sophon","text":"Mainnet Tokens Coral ETH \u2705 USDC \u2705 USDT \u2705 SOPH \u2705"},{"location":"web3-stack/ca_stack/#scroll","title":"Scroll","text":"Mainnet Tokens Coral ETH \u2705 USDC \u2705 USDT \u2705"},{"location":"web3-stack/ca_wallet_stack/","title":"Supported Apps, Chains and Tokens","text":"<p>The standalone Arcana CA wallet used to demonstrate unified balance and chain-abstracted transactions. It supports a limited set of chains and tokens<sup>*</sup> in the context of supported apps listed below.</p> <p>To execute a chain-abstracted transaction, you need enough unified balance of the token type on the source chain. This balance must cover both the gas fee and the transaction amount on the destination chain.</p> <p>To try unified balance and chain abstracted transactions, connect the standalone Arcana CA Wallet with any of the supported apps. </p> <p><sup>*</sup> Every chain may not support all tokens. The list of supported chains and tokens may differ for the Coral and the Folly testnet. The chains supported by the SDK and those supported in the standalone, CA wallet used in the demos may not always be the same.</p>"},{"location":"web3-stack/ca_wallet_stack/#apps","title":"Apps","text":"App Status Aave \u2705 CowSwap \u2705 Galaxy \u2705 Griffy \u2705 Hyperliquid \u2705 Jumper \u2705 Polymarket \u2705 Renzo \u2705 Uniswap \u2705"},{"location":"web3-stack/ca_wallet_stack/#chains-and-tokens","title":"Chains and Tokens","text":"<p>Supported Tokens</p> <ul> <li>USDC and USDT tokens are supported if available on the chain. We support Circle-issued tokens if Circle is present on chain, canonical otherwise.</li> <li>ETH is supported as an ERC-20 token if it's managed or issued by the operator or leader of the chain.</li> <li>The native token for a chain is always supported.</li> </ul>"},{"location":"web3-stack/ca_wallet_stack/#ethereum","title":"Ethereum","text":"MainnetSepolia Tokens Coral ETH \u2705 USDC \u2705 USDT \u2705 Tokens Folly ETH \u2705 USDC \u2705"},{"location":"web3-stack/ca_wallet_stack/#optimism","title":"Optimism","text":"MainnetOP Sepolia Tokens Coral ETH \u2705 USDC \u2705 USDT \u2705 Tokens Folly ETH \u2705 USDC \u2705 USDT \u2705"},{"location":"web3-stack/ca_wallet_stack/#bsc","title":"BSC","text":"Mainnet Tokens Coral ETH \u2705 USDC \u2705 USDT \u2705 BNB \u2705"},{"location":"web3-stack/ca_wallet_stack/#polygon","title":"Polygon","text":"MainnetPolygon Amoy Tokens Coral USDC \u2705 USDT \u2705 POL \u2705 Tokens Folly USDC \u2705 POL \u2705"},{"location":"web3-stack/ca_wallet_stack/#kaia","title":"Kaia","text":"Mainnet Tokens Coral USDT \u2705 KAIA \u2705"},{"location":"web3-stack/ca_wallet_stack/#base","title":"Base","text":"MainnetBase Sepolia Tokens Coral ETH \u2705 USDC \u2705 USDT \u2705 Tokens Folly ETH \u2705 USDC \u2705"},{"location":"web3-stack/ca_wallet_stack/#fuel","title":"Fuel","text":"Mainnet Tokens Coral ETH \u2705 USDC \u2705 USDT \u2705"},{"location":"web3-stack/ca_wallet_stack/#arbitrum","title":"Arbitrum","text":"MainnetArbitrum Sepolia Tokens Coral ETH \u2705 USDC \u2705 USDT \u2705 Tokens Folly ETH \u2705 USDC \u2705 USDT \u2705"},{"location":"web3-stack/ca_wallet_stack/#avalanche","title":"Avalanche","text":"Mainnet Tokens Coral USDC \u2705 USDT \u2705 AVAX \u2705"},{"location":"web3-stack/ca_wallet_stack/#sophon","title":"Sophon","text":"Mainnet Tokens Coral ETH \u2705 USDC \u2705 USDT \u2705 SOPH \u2705"},{"location":"web3-stack/ca_wallet_stack/#scroll","title":"Scroll","text":"Mainnet Tokens Coral ETH \u2705 USDC \u2705 USDT \u2705"},{"location":"web3-stack/chains/","title":"Supported Chains","text":"<p>The Arcana wallet supports transactions on both EVM and non-EVM chains.</p>"},{"location":"web3-stack/chains/#arcana-auth-sdk","title":"Arcana Auth SDK","text":"<p>Pre-configured Arcana wallet blockchains</p> EVMNon-EVM <ul> <li>Arbitrum  </li> <li>Arbitrum Goerli </li> <li>Avalanche </li> <li>Base Mainnet</li> <li>Base Testnet (Goerli)</li> <li>Base Testnet (Sepolia)</li> <li>Berachain bArtio Testnet V1</li> <li>Berachain bArtio Testnet V2</li> <li>Bitlayer Testnet</li> <li>Bitlayer Mainnet</li> <li>BNB Smart Chain (BSC)</li> <li>BSC Testnet </li> <li>B<sup>2</sup> Network Testnet</li> <li>B<sup>2</sup> Network Mainnet</li> <li>BOB</li> <li>BOB Testnet</li> <li>Caduceus</li> <li>Ethereum </li> <li>IoTeX</li> <li>Linea Goerli</li> <li>Linea Mainnet</li> <li>opBNB</li> <li>opBNB Testnet</li> <li>Optimism </li> <li>Optimism Goerli</li> <li>Peaq</li> <li>Peaq Testnet (Agung)</li> <li>Polygon </li> <li>Polygon Amoy </li> <li>Polygon zkEVM Testnet</li> <li>Scroll Mainnet</li> <li>Scroll Testnet (Sepolia)</li> <li>Sepolia</li> <li>Shardeum Sphinx 1.x</li> <li>Vanar Mainnet</li> <li>Vanar Testnet (Vanguard)</li> <li>zkSync Era Mainnet</li> <li>zkSync Era Testnet (ETH)</li> </ul> <ul> <li>MultiversX </li> <li>MultiversX Testnet</li> <li>MultiversX Devnet </li> <li>Near </li> <li>Near Testnet</li> <li>Solana</li> <li>Solana Testnet</li> <li>Solana Dev</li> </ul> Pre-configured Blockchains"},{"location":"web3-stack/protocol/","title":"Arcana Protocol","text":"<p>The Arcana CA SDK components of the Arcana protocol that support unified balance feature are built using the Cosmos chain.</p> <p>Other components of the protocol that enable social login via the Arcana Auth SDK are built using the Proof of Stake Polygon chain.</p> <p>The Arcana blockchain protocol is offered through Testnet and Mainnet.</p>"},{"location":"web3-stack/protocol/#mainnet-roadmap","title":"Mainnet Roadmap","text":""},{"location":"web3-stack/protocol/#chain-abstraction","title":"Chain Abstraction","text":"<p>The Arcana unified balance feature is available through the Arcana CA SDK v0.0.3 released in January 2025 on the Testnet. A limited set of chains and tokens are supported for chain abstraction as of this release.</p> <p>Chain Abstraction is available on Arcana Testnet. We are actively working towards enabling this feature on the Arcana Mainnet.</p>"},{"location":"web3-stack/protocol/#social-login","title":"Social Login","text":"<p>The Arcana social login feature is available through the Arcana Auth SDK v1.0.0, released in January 2023 on the Mainnet.</p> <p>The following Auth services are active on Testnet as well as the Mainnet:</p> <ul> <li>Configuring Arcana Auth SDK usage with Arcana Developer Dashboard</li> <li>User onboarding via social login</li> <li>Asynchronous Distributed Key Generation that powers the Arcana Auth SDK and helps onboard users to Web3</li> </ul> <p>We are actively working on adding newer features and capabilities to the Arcana Auth SDK, stay tuned.</p>"},{"location":"web3-stack/protocol/#infrastructure-providers","title":"Infrastructure Providers","text":""},{"location":"web3-stack/protocol/#protocol-audit","title":"Protocol Audit","text":"<p>At Arcana, we take the security and privacy of applications seriously and believe in transparency. To eliminate any security vulnerabilities in Arcana Smart Contracts and the ADKG module, we put it under the rigorous vetting process and cybersecurity tests conducted by Certik. The audit is complete and you can refer to the Arcana Audit Reports for details.</p>"},{"location":"web3-stack/protocol/#network-nodes","title":"Network Nodes","text":"Network Metrics Beta Mainnet # Protocol Nodes 7 21 # Distributed Key Generator Nodes 3 7 (4 operated by Arcana, 3 by trusted partners)"},{"location":"web3-stack/protocol/#adkg-subsystem","title":"ADKG Subsystem","text":"<p>Arcana Auth SDK has evolved since its alpha release. The new asynchronous distributed key generation (ADKG) algorithm is now part of the Arcana protocol, offering improved security and efficiency in key share generation.</p> <p>Refer to the Arcana Technical Whitepaper for more details on ADKG.</p>"},{"location":"web3-stack/protocol/#decentralization","title":"Decentralization","text":"<p>The Arcana ADKG subsystem uses multiple nodes, including some operated by trusted Arcana partners called  validators. We plan to fully decentralize the protocol in future releases.</p>"},{"location":"web3-stack/validators/","title":"Validators","text":"<p>The core of the Arcana protocol is the asynchronous distributed key generation (ADKG) subsystem, which generates key shares. These key shares are assembled on the client side within the app, never at the ADKG nodes, to form the authenticated user's private key.</p> <p>To support decentralization, the ADKG subsystem consists of multiple nodes, including some operated by trusted third-party entities known as validators.</p>"},{"location":"web3-stack/validators/#validator-nodes","title":"Validator Nodes","text":"<p>At Mainnet launch, there are seven ADKG validator nodes. Arcana owns five, and two are owned by:</p> <ul> <li>Comdex - interchain DeFi infrastructure</li> <li>Luganodes - institutional-grade blockchain infrastructure providers</li> </ul> <p>We are working with more partners to fully decentralize the ADKG subsystem.</p>"},{"location":"web3-stack/validators/#key-share-security","title":"Key Share Security","text":""},{"location":"web3-stack/validators/#share-generation","title":"Share Generation","text":"<p>Arcana Auth SDK uses various algorithms for a secure ADKG subsystem. It includes a  robust asynchronous DPSS mechanism to protect user keys and handle malicious nodes. We are adding features like key share repair and refresh, as well as Arcana Auth SDK multi-factor authentication (MFA) feature and multi-party computation (MPC) for enhanced security and ease of use.</p>"},{"location":"web3-stack/validators/#assembly","title":"Assembly","text":"<p>Arcana does not store user key shares. The ADKG subsystem creates and assigns key shares to the authenticated user, combined only on the client side to generate the private key. MFA adds extra security, even if the user changes devices.</p>"},{"location":"web3-stack/wallets/","title":"Supported Wallets","text":"<p>The Arcana Auth SDK works with third-party browser-based wallets as well as the built-in, non-custodial, in-app Arcana wallet.</p> Arcana walletThird-party Wallets <p>The Arcana wallet is a built-in, in-app wallet accessible to authenticated users of Web3 apps integrated with Arcana Auth SDK. </p> <p>Any browser-based wallet can be enabled in an app that is integrated with the Arcana Auth SDK. For example, MetaMask, Brave, Phantom, etc. Note that the wallet must work with the supported chains.</p>"},{"location":"web3-stack/wallets/#built-in-wallet-ui","title":"Built-in Wallet UI","text":"<p>Developers can choose to use the built-in Arcana wallet UI and quickly allow users to sign blockchain transactions via their app.</p>"},{"location":"web3-stack/wallets/#custom-wallet-ui","title":"Custom Wallet UI","text":"<p>When using the Arcana Auth SDK for user onboarding, by default the built-in, embedded, non-custodial Arcana wallet UI is enabled.</p> <p>It is possible to totally replace the Arcana wallet UI with a custom wallet UI. </p>"}]}